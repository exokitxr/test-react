{"ast":null,"code":"import { Helpers } from './Unity.js';\nimport THREE from 'three.js';\nconst stepRate = 0.2;\nconst stepHeight = 0.2;\nconst stepMinDistance = 0;\nconst stepMaxDistance = 0.25;\nconst stepRestitutionDistance = 0.8; // const minStepDistanceTimeFactor = 0.2;\n\nconst minHmdVelocityTimeFactor = 0.015; // const velocityLearningFactor = 1;\n\nconst maxVelocity = 0.015;\nconst velocityRestitutionFactor = 25;\nconst crossStepFactor = 0.9;\nconst zeroVector = new THREE.Vector3();\nconst oneVector = new THREE.Vector3(1, 1, 1);\nconst identityRotation = new THREE.Quaternion();\nconst downHalfRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2);\nconst upHalfRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI / 2);\nconst downJumpRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 4); // const downQuarterRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI/4);\n\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\nconst localVector3 = new THREE.Vector3();\nconst localVector4 = new THREE.Vector3();\nconst localVector5 = new THREE.Vector3();\nconst localVector6 = new THREE.Vector3();\nconst localVector7 = new THREE.Vector3();\nconst localQuaternion = new THREE.Quaternion();\nconst localQuaternion2 = new THREE.Quaternion();\nconst localQuaternion3 = new THREE.Quaternion();\nconst localEuler = new THREE.Euler();\nconst localMatrix = new THREE.Matrix4();\nconst localMatrix2 = new THREE.Matrix4();\nconst localMatrix3 = new THREE.Matrix4();\n\nconst _mod = (a, n) => (a % n + n) % n;\n\nconst _angleDiff = (targetA, sourceA) => {\n  let a = targetA - sourceA;\n  a = _mod(a + Math.PI, Math.PI * 2) - Math.PI;\n  return a;\n};\n\nclass Leg {\n  constructor(legsManager, left) {\n    this.transform = new THREE.Object3D();\n    this.upperLeg = new THREE.Object3D();\n    this.lowerLeg = new THREE.Object3D();\n    this.foot = new THREE.Object3D();\n    this.foot.stickTransform = new THREE.Object3D();\n    this.foot.startTransform = new THREE.Object3D();\n    this.foot.endTransform = new THREE.Object3D();\n    this.foot.startHmdFloorTransform = new THREE.Object3D();\n    this.transform.add(this.upperLeg);\n    this.upperLeg.add(this.lowerLeg);\n    this.lowerLeg.add(this.foot);\n    this.upperLegLength = 0;\n    this.lowerLegLength = 0;\n    this.legLength = 0;\n    this.eyesToUpperLegOffset = new THREE.Vector3();\n    this.legsManager = legsManager;\n    this.left = left;\n    this.standing = true;\n    this.standFactor = 1;\n    const now = Date.now();\n    this.lastStandTimestamp = now;\n    this.lastJumpTimestamp = now;\n    this.stepping = false;\n    this.lastStepTimestamp = now;\n    this.balance = 1;\n  }\n\n  Start() {\n    this.upperLegLength = this.lowerLeg.position.length();\n    this.lowerLegLength = this.foot.position.length();\n    this.legLength = this.upperLegLength + this.lowerLegLength;\n    Helpers.getWorldPosition(this.upperLeg, this.eyesToUpperLegOffset).sub(Helpers.getWorldPosition(this.legsManager.rig.shoulderTransforms.eyes, localVector));\n  }\n\n  Update() {\n    const footPosition = localVector.copy(this.foot.stickTransform.position); // footPosition.y = 0;\n\n    const upperLegPosition = Helpers.getWorldPosition(this.upperLeg, localVector2);\n    const footRotation = this.foot.stickTransform.quaternion;\n    /* localEuler.setFromQuaternion(footRotation, 'YXZ');\n    localEuler.x = 0;\n    localEuler.z = 0;\n    const flatFootRotation = localQuaternion.setFromEuler(localEuler); */\n\n    const hypotenuseDistance = this.upperLegLength;\n    const verticalDistance = (this.legsManager.rig.shoulderTransforms.prone || !this.standing ? upperLegPosition.distanceTo(this.foot.stickTransform.position) : Math.abs(upperLegPosition.y - this.foot.stickTransform.position.y)) * this.upperLegLength / this.legLength;\n    const offsetDistance = hypotenuseDistance > verticalDistance ? Math.sqrt(hypotenuseDistance * hypotenuseDistance - verticalDistance * verticalDistance) : 0;\n    const lowerLegPosition = localVector4.copy(upperLegPosition).add(footPosition).divideScalar(2).add(localVector5.copy(footPosition).sub(upperLegPosition).cross(localVector6.set(1, 0, 0).applyQuaternion(footRotation)).normalize().multiplyScalar(offsetDistance));\n    this.upperLeg.quaternion.setFromRotationMatrix(localMatrix.lookAt(zeroVector, localVector5.copy(upperLegPosition).sub(lowerLegPosition), localVector6.set(0, 1, 0).applyQuaternion(footRotation))).multiply(downHalfRotation).premultiply(Helpers.getWorldQuaternion(this.transform, localQuaternion2).inverse());\n    Helpers.updateMatrixMatrixWorld(this.upperLeg);\n    this.lowerLeg.quaternion.setFromRotationMatrix(localMatrix.lookAt(zeroVector, localVector5.copy(lowerLegPosition).sub(footPosition), localVector6.set(0, 0, 1).applyQuaternion(footRotation))).multiply(downHalfRotation).premultiply(Helpers.getWorldQuaternion(this.upperLeg, localQuaternion2).inverse());\n    Helpers.updateMatrixMatrixWorld(this.lowerLeg); // this.lowerLeg.position = lowerLegPosition;\n    // if (this.standing || this.stepping) {\n    // this.foot.position = footPosition;\n\n    this.foot.quaternion.copy(footRotation).multiply(downHalfRotation).premultiply(Helpers.getWorldQuaternion(this.lowerLeg, localQuaternion2).inverse());\n    Helpers.updateMatrixMatrixWorld(this.foot);\n    /* } else {\n      this.foot.quaternion.slerp(downQuarterRotation, 0.1);\n    } */\n  }\n\n  getStandFactor() {\n    return 1 - Math.pow(Math.min(Math.max((Helpers.getWorldPosition(this.legsManager.rig.shoulderTransforms.eyes, localVector).add(this.eyesToUpperLegOffset).y - this.legLength) / (this.legsManager.rig.height * 0.2), 0), 1), 0.7);\n  }\n\n}\n\nclass LegsManager {\n  constructor(rig) {\n    this.hips = rig.shoulderTransforms.hips;\n    this.leftLeg = new Leg(this, true);\n    this.hips.add(this.leftLeg.transform);\n    this.rightLeg = new Leg(this, false);\n    this.hips.add(this.rightLeg.transform);\n    this.rig = rig;\n    this.poseManager = rig.poseManager;\n    this.legSeparation = 0;\n    this.lastHmdPosition = new THREE.Vector3();\n    this.hmdVelocity = new THREE.Vector3();\n  }\n\n  Start() {\n    this.legSeparation = Helpers.getWorldPosition(this.leftLeg.upperLeg, localVector).distanceTo(Helpers.getWorldPosition(this.rightLeg.upperLeg, localVector2));\n    this.lastHmdPosition.copy(this.poseManager.vrTransforms.head.position);\n    this.leftLeg.Start();\n    this.rightLeg.Start();\n  }\n\n  Update() {\n    Helpers.updateMatrixWorld(this.leftLeg.transform);\n    Helpers.updateMatrixWorld(this.leftLeg.upperLeg);\n    Helpers.updateMatrixWorld(this.leftLeg.lowerLeg);\n    Helpers.updateMatrixWorld(this.leftLeg.foot);\n    Helpers.updateMatrixWorld(this.rightLeg.transform);\n    Helpers.updateMatrixWorld(this.rightLeg.upperLeg);\n    Helpers.updateMatrixWorld(this.rightLeg.lowerLeg);\n    Helpers.updateMatrixWorld(this.rightLeg.foot);\n    const now = Date.now();\n    /* this.hmdVelocity.multiplyScalar(1-velocityLearningFactor)\n      .add(localVector.copy(this.poseManager.vrTransforms.head.position).sub(this.lastHmdPosition).multiplyScalar(velocityLearningFactor)); */\n\n    this.hmdVelocity.copy(this.poseManager.vrTransforms.head.position).sub(this.lastHmdPosition);\n    this.lastHmdPosition.copy(this.poseManager.vrTransforms.head.position); // console.log('v', this.hmdVelocity.toArray().join(','));\n\n    this.leftLeg.standFactor = this.leftLeg.getStandFactor();\n    this.leftLeg.standing = this.leftLeg.standFactor >= 1;\n\n    if (this.leftLeg.standing) {\n      this.leftLeg.lastStandTimestamp = now;\n    } else {\n      this.leftLeg.lastJumpTimestamp = now;\n    }\n\n    if (this.leftLeg.stepping && !this.leftLeg.standing) {\n      this.leftLeg.stepping = false;\n    }\n\n    this.rightLeg.standFactor = this.rightLeg.getStandFactor();\n    this.rightLeg.standing = this.rightLeg.standFactor >= 1;\n\n    if (this.rightLeg.standing) {\n      this.rightLeg.lastStandTimestamp = now;\n    } else {\n      this.rightLeg.lastJumpTimestamp = now;\n    }\n\n    if (this.rightLeg.stepping && !this.rightLeg.standing) {\n      this.rightLeg.stepping = false;\n    }\n\n    const hipsFloorPosition = localVector.copy(this.hips.position);\n    hipsFloorPosition.y = 0;\n    const hipsFloorEuler = localEuler.setFromQuaternion(this.hips.quaternion, 'YXZ');\n    hipsFloorEuler.x = 0;\n    hipsFloorEuler.z = 0;\n    const planeMatrix = localMatrix.compose(hipsFloorPosition, localQuaternion.setFromEuler(hipsFloorEuler), oneVector);\n    const planeMatrixInverse = localMatrix2.getInverse(planeMatrix);\n    const fakePosition = localVector2;\n    const fakeScale = localVector3;\n    const leftFootPosition = localVector4;\n    const leftFootRotation = localQuaternion;\n    localMatrix3.compose(this.leftLeg.foot.stickTransform.position, this.leftLeg.foot.stickTransform.quaternion, oneVector).premultiply(planeMatrixInverse).decompose(leftFootPosition, leftFootRotation, fakeScale);\n    const rightFootPosition = localVector5;\n    const rightFootRotation = localQuaternion2;\n    localMatrix3.compose(this.rightLeg.foot.stickTransform.position, this.rightLeg.foot.stickTransform.quaternion, oneVector).premultiply(planeMatrixInverse).decompose(rightFootPosition, rightFootRotation, fakeScale); // rotation\n\n    const maxTiltAngleFactor = 0.1;\n\n    if (this.leftLeg.standing && !this.rig.shoulderTransforms.prone) {\n      const leftFootEuler = localEuler.setFromQuaternion(leftFootRotation, 'YXZ');\n      leftFootEuler.x = 0;\n      leftFootEuler.z = 0;\n\n      if (leftFootEuler.y < -Math.PI * maxTiltAngleFactor) {\n        leftFootEuler.y = -Math.PI * maxTiltAngleFactor;\n      }\n\n      if (leftFootEuler.y > Math.PI * maxTiltAngleFactor) {\n        leftFootEuler.y = Math.PI * maxTiltAngleFactor;\n      }\n\n      localMatrix3.compose(zeroVector, localQuaternion3.setFromEuler(leftFootEuler), oneVector).premultiply(planeMatrix).decompose(fakePosition, this.leftLeg.foot.stickTransform.quaternion, fakeScale);\n    } else if (!this.leftLeg.standing) {\n      this.leftLeg.foot.stickTransform.quaternion.copy(this.hips.quaternion).multiply(downJumpRotation);\n    } else {\n      Helpers.getWorldQuaternion(this.leftLeg.foot, this.leftLeg.foot.stickTransform.quaternion).multiply(upHalfRotation);\n    }\n\n    if (this.rightLeg.standing && !this.rig.shoulderTransforms.prone) {\n      const rightFootEuler = localEuler.setFromQuaternion(rightFootRotation, 'YXZ');\n      rightFootEuler.x = 0;\n      rightFootEuler.z = 0;\n\n      if (rightFootEuler.y < -Math.PI * maxTiltAngleFactor) {\n        rightFootEuler.y = -Math.PI * maxTiltAngleFactor;\n      }\n\n      if (rightFootEuler.y > Math.PI * maxTiltAngleFactor) {\n        rightFootEuler.y = Math.PI * maxTiltAngleFactor;\n      }\n\n      localMatrix3.compose(zeroVector, localQuaternion3.setFromEuler(rightFootEuler), oneVector).premultiply(planeMatrix).decompose(fakePosition, this.rightLeg.foot.stickTransform.quaternion, fakeScale);\n    } else if (!this.rightLeg.standing) {\n      this.rightLeg.foot.stickTransform.quaternion.copy(this.hips.quaternion).multiply(downJumpRotation);\n    } else {\n      Helpers.getWorldQuaternion(this.rightLeg.foot, this.rightLeg.foot.stickTransform.quaternion).multiply(upHalfRotation);\n    } // position\n\n\n    const _getLegStepFactor = leg => {\n      if (leg.stepping) {\n        const timeDiff = now - leg.lastStepTimestamp;\n        leg.lastStepTimestamp = now;\n        const scaledStepRate = stepRate\n        /* / Math.max(\n        \tlocalVector.set(this.poseManager.vrTransforms.head.position.x, 0, this.poseManager.vrTransforms.head.position.z)\n        \t  .distanceTo(leg.foot.startHmdFloorTransform.position),\n        \tminStepDistanceTimeFactor\n        ) */\n        * Math.max(localVector2.set(this.hmdVelocity.x, 0, this.hmdVelocity.z).length() / this.rig.height, minHmdVelocityTimeFactor);\n        return Math.min(Math.max(leg.stepFactor + scaledStepRate * timeDiff, 0), 1);\n      } else {\n        return 0;\n      }\n    };\n\n    this.leftLeg.stepFactor = _getLegStepFactor(this.leftLeg);\n    this.rightLeg.stepFactor = _getLegStepFactor(this.rightLeg);\n    const leftCanStep = this.leftLeg.standing && !this.leftLeg.stepping && (!this.rightLeg.stepping || this.rightLeg.stepFactor >= crossStepFactor);\n    const rightCanStep = this.rightLeg.standing && !this.rightLeg.stepping && (!this.leftLeg.stepping || this.leftLeg.stepFactor >= crossStepFactor);\n    const maxStepAngleFactor = 0;\n\n    if (leftCanStep || rightCanStep) {\n      let leftStepDistance = 0;\n      let leftStepAngleDiff = 0;\n\n      if (leftCanStep) {\n        const leftDistance = Math.sqrt(leftFootPosition.x * leftFootPosition.x + leftFootPosition.z * leftFootPosition.z);\n        const leftAngleDiff = Math.atan2(leftFootPosition.x, leftFootPosition.z);\n\n        if (leftDistance < this.rig.height * stepMinDistance) {\n          leftStepDistance = leftDistance;\n        } else if (leftDistance > this.rig.height * stepMaxDistance) {\n          leftStepDistance = leftDistance;\n        }\n\n        if (leftAngleDiff > -Math.PI * maxStepAngleFactor) {\n          leftStepAngleDiff = leftAngleDiff;\n        } else if (leftAngleDiff < -Math.PI + Math.PI * maxStepAngleFactor) {\n          leftStepAngleDiff = leftAngleDiff;\n        }\n      }\n\n      let rightStepDistance = 0;\n      let rightStepAngleDiff = 0;\n\n      if (rightCanStep) {\n        const rightDistance = Math.sqrt(rightFootPosition.x * rightFootPosition.x + rightFootPosition.z * rightFootPosition.z);\n        const rightAngleDiff = Math.atan2(rightFootPosition.x, rightFootPosition.z);\n\n        if (rightDistance < this.rig.height * stepMinDistance) {\n          rightStepDistance = rightDistance;\n        } else if (rightDistance > this.rig.height * stepMaxDistance) {\n          rightStepDistance = rightDistance;\n        }\n\n        if (rightAngleDiff < Math.PI * maxStepAngleFactor) {\n          rightStepAngleDiff = rightAngleDiff;\n        } else if (rightAngleDiff > Math.PI - Math.PI * maxStepAngleFactor) {\n          rightStepAngleDiff = rightAngleDiff;\n        }\n      }\n\n      const _stepLeg = leg => {\n        const footDistance = this.legSeparation * stepRestitutionDistance; //Math.min(Math.max(leftStepDistance, this.legSeparation*0.7), this.legSeparation*1.4);\n\n        leg.foot.startTransform.position.copy(leg.foot.stickTransform.position); // leg.foot.startTransform.quaternion.copy(leg.foot.stickTransform.quaternion);\n\n        leg.foot.endTransform.position.copy(hipsFloorPosition).add(localVector6.set((leg.left ? -1 : 1) * footDistance, 0, 0).applyQuaternion(leg.foot.stickTransform.quaternion));\n        const velocityVector = localVector6.set(this.hmdVelocity.x, 0, this.hmdVelocity.z);\n        const velocityVectorLength = velocityVector.length();\n\n        if (velocityVectorLength > maxVelocity * this.rig.height) {\n          velocityVector.multiplyScalar(maxVelocity * this.rig.height / velocityVectorLength);\n        }\n\n        velocityVector.multiplyScalar(velocityRestitutionFactor);\n        leg.foot.endTransform.position.add(velocityVector); // leg.foot.endTransform.quaternion.copy(this.rightLeg.foot.stickTransform.quaternion);\n\n        leg.foot.startHmdFloorTransform.position.set(this.poseManager.vrTransforms.head.position.x, 0, this.poseManager.vrTransforms.head.position.z);\n        leg.lastStepTimestamp = now;\n        leg.stepping = true;\n      };\n\n      if ((leftStepDistance !== 0 || leftStepAngleDiff !== 0) && (rightStepDistance === 0 || Math.abs(leftStepDistance * this.leftLeg.balance) >= Math.abs(rightStepDistance * this.rightLeg.balance)) && (rightStepAngleDiff === 0 || Math.abs(leftStepAngleDiff * this.leftLeg.balance) >= Math.abs(rightStepAngleDiff * this.rightLeg.balance))) {\n        _stepLeg(this.leftLeg);\n\n        this.leftLeg.balance = 0;\n        this.rightLeg.balance = 1;\n      } else if (rightStepDistance !== 0 || rightStepAngleDiff !== 0) {\n        _stepLeg(this.rightLeg);\n\n        this.rightLeg.balance = 0;\n        this.leftLeg.balance = 1;\n      }\n    }\n\n    if (this.rig.shoulderTransforms.prone) {\n      const targetPosition = Helpers.getWorldPosition(this.leftLeg.upperLeg, localVector6).add(localVector7.set(0, -this.leftLeg.legLength * 0.95, 0).applyQuaternion(this.hips.quaternion));\n      targetPosition.y = 0;\n      this.leftLeg.foot.stickTransform.position.lerp(targetPosition, 0.1);\n      this.leftLeg.stepping = false;\n    } else if (this.leftLeg.stepping) {\n      this.leftLeg.foot.stickTransform.position.copy(this.leftLeg.foot.startTransform.position).lerp(this.leftLeg.foot.endTransform.position, this.leftLeg.stepFactor).add(localVector6.set(0, Math.sin(this.leftLeg.stepFactor * Math.PI) * stepHeight * this.rig.height, 0));\n\n      if (this.leftLeg.stepFactor >= 1) {\n        this.leftLeg.stepping = false;\n      }\n    } else if (!this.leftLeg.standing) {\n      const targetPosition = Helpers.getWorldPosition(this.leftLeg.upperLeg, localVector6).add(localVector7.set(0, 0, 1).normalize().applyQuaternion(this.hips.quaternion).multiplyScalar(this.leftLeg.legLength * 0.5));\n      this.leftLeg.foot.stickTransform.position.lerp(targetPosition, 0.1);\n    } else {\n      const targetPosition = localVector6.copy(this.leftLeg.foot.stickTransform.position);\n      targetPosition.y = 0;\n      this.leftLeg.foot.stickTransform.position.lerp(targetPosition, 0.2);\n    }\n\n    if (this.rig.shoulderTransforms.prone) {\n      const targetPosition = Helpers.getWorldPosition(this.rightLeg.upperLeg, localVector6).add(localVector7.set(0, -this.rightLeg.legLength * 0.95, 0).applyQuaternion(this.hips.quaternion));\n      targetPosition.y = 0;\n      this.rightLeg.foot.stickTransform.position.lerp(targetPosition, 0.1);\n      this.rightLeg.stepping = false;\n    } else if (this.rightLeg.stepping) {\n      this.rightLeg.foot.stickTransform.position.copy(this.rightLeg.foot.startTransform.position).lerp(this.rightLeg.foot.endTransform.position, this.rightLeg.stepFactor).add(localVector6.set(0, Math.sin(this.rightLeg.stepFactor * Math.PI) * stepHeight * this.rig.height, 0)); // this.rightLeg.foot.stickTransform.quaternion.copy(this.rightLeg.foot.startTransform.quaternion).slerp(this.rightLeg.foot.endTransform.quaternion, stepFactor);\n\n      if (this.rightLeg.stepFactor >= 1) {\n        this.rightLeg.stepping = false;\n      }\n    } else if (!this.rightLeg.standing) {\n      const targetPosition = Helpers.getWorldPosition(this.rightLeg.upperLeg, localVector6).add(localVector7.set(0, 0, 1).normalize().applyQuaternion(this.hips.quaternion).multiplyScalar(this.rightLeg.legLength * 0.6));\n      this.rightLeg.foot.stickTransform.position.lerp(targetPosition, 0.1);\n    } else {\n      const targetPosition = localVector6.copy(this.rightLeg.foot.stickTransform.position);\n      targetPosition.y = 0;\n      this.rightLeg.foot.stickTransform.position.lerp(targetPosition, 0.2);\n    }\n\n    this.leftLeg.Update();\n    this.rightLeg.Update();\n  }\n\n}\n\nexport default LegsManager;","map":{"version":3,"sources":["/Users/chris/Documents/Github/test-react/src/WebXRApps/vrarmik/LegsManager.js"],"names":["Helpers","THREE","stepRate","stepHeight","stepMinDistance","stepMaxDistance","stepRestitutionDistance","minHmdVelocityTimeFactor","maxVelocity","velocityRestitutionFactor","crossStepFactor","zeroVector","Vector3","oneVector","identityRotation","Quaternion","downHalfRotation","setFromAxisAngle","Math","PI","upHalfRotation","downJumpRotation","localVector","localVector2","localVector3","localVector4","localVector5","localVector6","localVector7","localQuaternion","localQuaternion2","localQuaternion3","localEuler","Euler","localMatrix","Matrix4","localMatrix2","localMatrix3","_mod","a","n","_angleDiff","targetA","sourceA","Leg","constructor","legsManager","left","transform","Object3D","upperLeg","lowerLeg","foot","stickTransform","startTransform","endTransform","startHmdFloorTransform","add","upperLegLength","lowerLegLength","legLength","eyesToUpperLegOffset","standing","standFactor","now","Date","lastStandTimestamp","lastJumpTimestamp","stepping","lastStepTimestamp","balance","Start","position","length","getWorldPosition","sub","rig","shoulderTransforms","eyes","Update","footPosition","copy","upperLegPosition","footRotation","quaternion","hypotenuseDistance","verticalDistance","prone","distanceTo","abs","y","offsetDistance","sqrt","lowerLegPosition","divideScalar","cross","set","applyQuaternion","normalize","multiplyScalar","setFromRotationMatrix","lookAt","multiply","premultiply","getWorldQuaternion","inverse","updateMatrixMatrixWorld","getStandFactor","pow","min","max","height","LegsManager","hips","leftLeg","rightLeg","poseManager","legSeparation","lastHmdPosition","hmdVelocity","vrTransforms","head","updateMatrixWorld","hipsFloorPosition","hipsFloorEuler","setFromQuaternion","x","z","planeMatrix","compose","setFromEuler","planeMatrixInverse","getInverse","fakePosition","fakeScale","leftFootPosition","leftFootRotation","decompose","rightFootPosition","rightFootRotation","maxTiltAngleFactor","leftFootEuler","rightFootEuler","_getLegStepFactor","leg","timeDiff","scaledStepRate","stepFactor","leftCanStep","rightCanStep","maxStepAngleFactor","leftStepDistance","leftStepAngleDiff","leftDistance","leftAngleDiff","atan2","rightStepDistance","rightStepAngleDiff","rightDistance","rightAngleDiff","_stepLeg","footDistance","velocityVector","velocityVectorLength","targetPosition","lerp","sin"],"mappings":"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","sourcesContent":["import {Helpers} from './Unity.js';\nimport THREE from 'three.js'\n\nconst stepRate = 0.2;\nconst stepHeight = 0.2;\nconst stepMinDistance = 0;\nconst stepMaxDistance = 0.25;\nconst stepRestitutionDistance = 0.8;\n// const minStepDistanceTimeFactor = 0.2;\nconst minHmdVelocityTimeFactor = 0.015;\n// const velocityLearningFactor = 1;\nconst maxVelocity = 0.015;\nconst velocityRestitutionFactor = 25;\nconst crossStepFactor = 0.9;\n\nconst zeroVector = new THREE.Vector3();\nconst oneVector = new THREE.Vector3(1, 1, 1);\nconst identityRotation = new THREE.Quaternion();\nconst downHalfRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI/2);\nconst upHalfRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI/2);\nconst downJumpRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI/4);\n// const downQuarterRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI/4);\n\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\nconst localVector3 = new THREE.Vector3();\nconst localVector4 = new THREE.Vector3();\nconst localVector5 = new THREE.Vector3();\nconst localVector6 = new THREE.Vector3();\nconst localVector7 = new THREE.Vector3();\nconst localQuaternion = new THREE.Quaternion();\nconst localQuaternion2 = new THREE.Quaternion();\nconst localQuaternion3 = new THREE.Quaternion();\nconst localEuler = new THREE.Euler();\nconst localMatrix = new THREE.Matrix4();\nconst localMatrix2 = new THREE.Matrix4();\nconst localMatrix3 = new THREE.Matrix4();\n\nconst _mod = (a, n) => (a % n + n) % n;\nconst _angleDiff = (targetA, sourceA) => {\n  let a = targetA - sourceA;\n  a = _mod((a + Math.PI), Math.PI*2) - Math.PI;\n  return a;\n};\n\nclass Leg {\n  constructor(legsManager, left) {\n  \tthis.transform = new THREE.Object3D();\n    this.upperLeg = new THREE.Object3D();\n    this.lowerLeg = new THREE.Object3D();\n    this.foot = new THREE.Object3D();\n    this.foot.stickTransform = new THREE.Object3D();\n    this.foot.startTransform = new THREE.Object3D();\n    this.foot.endTransform = new THREE.Object3D();\n    this.foot.startHmdFloorTransform = new THREE.Object3D();\n\n    this.transform.add(this.upperLeg);\n    this.upperLeg.add(this.lowerLeg);\n    this.lowerLeg.add(this.foot);\n\n    this.upperLegLength = 0;\n    this.lowerLegLength = 0;\n    this.legLength = 0;\n    this.eyesToUpperLegOffset = new THREE.Vector3();\n\n    this.legsManager = legsManager;\n    this.left = left;\n\n    this.standing = true;\n    this.standFactor = 1;\n    const now = Date.now();\n    this.lastStandTimestamp = now;\n    this.lastJumpTimestamp = now;\n\n    this.stepping = false;\n    this.lastStepTimestamp = now;\n\n    this.balance = 1;\n  }\n\n  Start() {\n    this.upperLegLength = this.lowerLeg.position.length();\n    this.lowerLegLength = this.foot.position.length();\n    this.legLength = this.upperLegLength + this.lowerLegLength;\n\n    Helpers.getWorldPosition(this.upperLeg, this.eyesToUpperLegOffset)\n  \t  .sub(Helpers.getWorldPosition(this.legsManager.rig.shoulderTransforms.eyes, localVector));\n  }\n\n  Update() {\n    const footPosition = localVector.copy(this.foot.stickTransform.position);\n    // footPosition.y = 0;\n    const upperLegPosition = Helpers.getWorldPosition(this.upperLeg, localVector2);\n\n    const footRotation = this.foot.stickTransform.quaternion;\n    /* localEuler.setFromQuaternion(footRotation, 'YXZ');\n    localEuler.x = 0;\n    localEuler.z = 0;\n    const flatFootRotation = localQuaternion.setFromEuler(localEuler); */\n\n    const hypotenuseDistance = this.upperLegLength;\n    const verticalDistance = ((this.legsManager.rig.shoulderTransforms.prone || !this.standing) ?\n    \tupperLegPosition.distanceTo(this.foot.stickTransform.position)\n    :\n      Math.abs(upperLegPosition.y - this.foot.stickTransform.position.y)\n    ) * this.upperLegLength / this.legLength;\n    const offsetDistance = hypotenuseDistance > verticalDistance ? Math.sqrt(hypotenuseDistance*hypotenuseDistance - verticalDistance*verticalDistance) : 0;\n\n    const lowerLegPosition = localVector4.copy(upperLegPosition).add(footPosition).divideScalar(2)\n      .add(\n      \tlocalVector5.copy(footPosition).sub(upperLegPosition)\n\t        .cross(localVector6.set(1, 0, 0).applyQuaternion(footRotation))\n\t        .normalize()\n      \t\t.multiplyScalar(offsetDistance)\n      );\n\n    this.upperLeg.quaternion.setFromRotationMatrix(\n      localMatrix.lookAt(\n        zeroVector,\n        localVector5.copy(upperLegPosition).sub(lowerLegPosition),\n        localVector6.set(0, 1, 0).applyQuaternion(footRotation)\n      )\n    )\n      .multiply(downHalfRotation)\n      .premultiply(Helpers.getWorldQuaternion(this.transform, localQuaternion2).inverse());\n    Helpers.updateMatrixMatrixWorld(this.upperLeg);\n\n    this.lowerLeg.quaternion.setFromRotationMatrix(\n      localMatrix.lookAt(\n        zeroVector,\n        localVector5.copy(lowerLegPosition).sub(footPosition),\n        localVector6.set(0, 0, 1).applyQuaternion(footRotation)\n      )\n    )\n      .multiply(downHalfRotation)\n      .premultiply(Helpers.getWorldQuaternion(this.upperLeg, localQuaternion2).inverse());\n    Helpers.updateMatrixMatrixWorld(this.lowerLeg);\n\n    // this.lowerLeg.position = lowerLegPosition;\n\n    // if (this.standing || this.stepping) {\n      // this.foot.position = footPosition;\n      this.foot.quaternion.copy(footRotation)\n        .multiply(downHalfRotation)\n        .premultiply(Helpers.getWorldQuaternion(this.lowerLeg, localQuaternion2).inverse());\n      Helpers.updateMatrixMatrixWorld(this.foot);\n    /* } else {\n      this.foot.quaternion.slerp(downQuarterRotation, 0.1);\n    } */\n\t}\n\n\tgetStandFactor() {\n\t\treturn 1 - Math.pow(Math.min(Math.max(\n\t\t\t(Helpers.getWorldPosition(this.legsManager.rig.shoulderTransforms.eyes, localVector).add(this.eyesToUpperLegOffset).y - this.legLength) / (this.legsManager.rig.height*0.2),\n\t\t0), 1), 0.7);\n\t}\n}\n\nclass LegsManager {\n\tconstructor(rig) {\n    this.hips = rig.shoulderTransforms.hips;\n    this.leftLeg = new Leg(this, true);\n    this.hips.add(this.leftLeg.transform);\n    this.rightLeg = new Leg(this, false);\n    this.hips.add(this.rightLeg.transform);\n\n    this.rig = rig;\n    this.poseManager = rig.poseManager;\n\n    this.legSeparation = 0;\n    this.lastHmdPosition = new THREE.Vector3();\n\n    this.hmdVelocity = new THREE.Vector3();\n  }\n\n  Start() {\n  \tthis.legSeparation = Helpers.getWorldPosition(this.leftLeg.upperLeg, localVector)\n  \t  .distanceTo(Helpers.getWorldPosition(this.rightLeg.upperLeg, localVector2));\n  \tthis.lastHmdPosition.copy(this.poseManager.vrTransforms.head.position);\n  \tthis.leftLeg.Start();\n  \tthis.rightLeg.Start();\n  }\n\n\tUpdate() {\n\t\tHelpers.updateMatrixWorld(this.leftLeg.transform);\n\t\tHelpers.updateMatrixWorld(this.leftLeg.upperLeg);\n\t\tHelpers.updateMatrixWorld(this.leftLeg.lowerLeg);\n\t\tHelpers.updateMatrixWorld(this.leftLeg.foot);\n\n    Helpers.updateMatrixWorld(this.rightLeg.transform);\n\t\tHelpers.updateMatrixWorld(this.rightLeg.upperLeg);\n\t\tHelpers.updateMatrixWorld(this.rightLeg.lowerLeg);\n\t\tHelpers.updateMatrixWorld(this.rightLeg.foot);\n\n\t\tconst now = Date.now();\n\n\t\t/* this.hmdVelocity.multiplyScalar(1-velocityLearningFactor)\n\t\t  .add(localVector.copy(this.poseManager.vrTransforms.head.position).sub(this.lastHmdPosition).multiplyScalar(velocityLearningFactor)); */\n\t\tthis.hmdVelocity.copy(this.poseManager.vrTransforms.head.position).sub(this.lastHmdPosition);\n\t\tthis.lastHmdPosition.copy(this.poseManager.vrTransforms.head.position);\n\t\t// console.log('v', this.hmdVelocity.toArray().join(','));\n\n    this.leftLeg.standFactor = this.leftLeg.getStandFactor();\n\t  this.leftLeg.standing = this.leftLeg.standFactor >= 1;\n\t  if (this.leftLeg.standing) {\n\t  \tthis.leftLeg.lastStandTimestamp = now;\n\t  } else {\n\t  \tthis.leftLeg.lastJumpTimestamp = now;\n\t  }\n\t  if (this.leftLeg.stepping && !this.leftLeg.standing) {\n      this.leftLeg.stepping = false;\n\t  }\n\t  this.rightLeg.standFactor = this.rightLeg.getStandFactor();\n\t  this.rightLeg.standing = this.rightLeg.standFactor >= 1;\n\t  if (this.rightLeg.standing) {\n\t  \tthis.rightLeg.lastStandTimestamp = now;\n\t  } else {\n\t  \tthis.rightLeg.lastJumpTimestamp = now;\n\t  }\n\t  if (this.rightLeg.stepping && !this.rightLeg.standing) {\n      this.rightLeg.stepping = false;\n\t  }\n\n    const hipsFloorPosition = localVector.copy(this.hips.position);\n    hipsFloorPosition.y = 0;\n    const hipsFloorEuler = localEuler.setFromQuaternion(this.hips.quaternion, 'YXZ');\n    hipsFloorEuler.x = 0;\n    hipsFloorEuler.z = 0;\n    const planeMatrix = localMatrix.compose(hipsFloorPosition, localQuaternion.setFromEuler(hipsFloorEuler), oneVector);\n    const planeMatrixInverse = localMatrix2.getInverse(planeMatrix);\n\n    const fakePosition = localVector2;\n    const fakeScale = localVector3;\n\n    const leftFootPosition = localVector4;\n    const leftFootRotation = localQuaternion;\n    localMatrix3.compose(this.leftLeg.foot.stickTransform.position, this.leftLeg.foot.stickTransform.quaternion, oneVector)\n      .premultiply(planeMatrixInverse)\n      .decompose(leftFootPosition, leftFootRotation, fakeScale);\n\n    const rightFootPosition = localVector5;\n    const rightFootRotation = localQuaternion2;\n    localMatrix3.compose(this.rightLeg.foot.stickTransform.position, this.rightLeg.foot.stickTransform.quaternion, oneVector)\n      .premultiply(planeMatrixInverse)\n      .decompose(rightFootPosition, rightFootRotation, fakeScale);\n\n    // rotation\n\n    const maxTiltAngleFactor = 0.1;\n    if (this.leftLeg.standing && !this.rig.shoulderTransforms.prone) {\n      const leftFootEuler = localEuler.setFromQuaternion(leftFootRotation, 'YXZ');\n      leftFootEuler.x = 0;\n\t    leftFootEuler.z = 0;\n    \tif (leftFootEuler.y < -Math.PI*maxTiltAngleFactor) {\n    \t\tleftFootEuler.y = -Math.PI*maxTiltAngleFactor;\n    \t}\n    \tif (leftFootEuler.y > Math.PI*maxTiltAngleFactor) {\n    \t\tleftFootEuler.y = Math.PI*maxTiltAngleFactor;\n    \t}\n    \tlocalMatrix3.compose(zeroVector, localQuaternion3.setFromEuler(leftFootEuler), oneVector)\n\t      .premultiply(planeMatrix)\n\t      .decompose(fakePosition, this.leftLeg.foot.stickTransform.quaternion, fakeScale);\n\t  } else if (!this.leftLeg.standing) {\n\t  \tthis.leftLeg.foot.stickTransform.quaternion.copy(this.hips.quaternion)\n\t  \t  .multiply(downJumpRotation);\n    } else {\n    \tHelpers.getWorldQuaternion(this.leftLeg.foot, this.leftLeg.foot.stickTransform.quaternion)\n    \t  .multiply(upHalfRotation);\n    }\n    if (this.rightLeg.standing && !this.rig.shoulderTransforms.prone) {\n\t    const rightFootEuler = localEuler.setFromQuaternion(rightFootRotation, 'YXZ');\n\t    rightFootEuler.x = 0;\n\t    rightFootEuler.z = 0;\n    \tif (rightFootEuler.y < -Math.PI*maxTiltAngleFactor) {\n    \t\trightFootEuler.y = -Math.PI*maxTiltAngleFactor;\n    \t}\n    \tif (rightFootEuler.y > Math.PI*maxTiltAngleFactor) {\n    \t\trightFootEuler.y = Math.PI*maxTiltAngleFactor;\n    \t}\n    \tlocalMatrix3.compose(zeroVector, localQuaternion3.setFromEuler(rightFootEuler), oneVector)\n\t      .premultiply(planeMatrix)\n\t      .decompose(fakePosition, this.rightLeg.foot.stickTransform.quaternion, fakeScale);\n\t  } else if (!this.rightLeg.standing) {\n\t  \tthis.rightLeg.foot.stickTransform.quaternion.copy(this.hips.quaternion)\n\t  \t  .multiply(downJumpRotation);\n\t  } else {\n      Helpers.getWorldQuaternion(this.rightLeg.foot, this.rightLeg.foot.stickTransform.quaternion)\n        .multiply(upHalfRotation);\n\t  }\n\n\t  // position\n\n    const _getLegStepFactor = leg => {\n    \tif (leg.stepping) {\n\t      const timeDiff = now - leg.lastStepTimestamp;\n\t      leg.lastStepTimestamp = now;\n\n\t\t\t\tconst scaledStepRate = stepRate\n\t\t\t\t  /* / Math.max(\n\t\t\t\t  \tlocalVector.set(this.poseManager.vrTransforms.head.position.x, 0, this.poseManager.vrTransforms.head.position.z)\n\t\t\t\t  \t  .distanceTo(leg.foot.startHmdFloorTransform.position),\n\t\t\t\t  \tminStepDistanceTimeFactor\n\t\t\t\t  ) */\n\t\t\t\t  * Math.max(localVector2.set(this.hmdVelocity.x, 0, this.hmdVelocity.z).length() / this.rig.height, minHmdVelocityTimeFactor);\n\t\t\t\treturn Math.min(Math.max(leg.stepFactor + scaledStepRate * timeDiff, 0), 1);\n\t    } else {\n\t    \treturn 0;\n\t    }\n    };\n    this.leftLeg.stepFactor = _getLegStepFactor(this.leftLeg);\n    this.rightLeg.stepFactor = _getLegStepFactor(this.rightLeg);\n\n    const leftCanStep = this.leftLeg.standing && !this.leftLeg.stepping && (!this.rightLeg.stepping || this.rightLeg.stepFactor >= crossStepFactor);\n    const rightCanStep = this.rightLeg.standing && !this.rightLeg.stepping && (!this.leftLeg.stepping || this.leftLeg.stepFactor >= crossStepFactor);\n    const maxStepAngleFactor = 0;\n    if (leftCanStep || rightCanStep) {\n    \tlet leftStepDistance = 0;\n    \tlet leftStepAngleDiff = 0;\n\t    if (leftCanStep) {\n\t    \tconst leftDistance = Math.sqrt(leftFootPosition.x*leftFootPosition.x + leftFootPosition.z*leftFootPosition.z);\n\t\t\t\tconst leftAngleDiff = Math.atan2(leftFootPosition.x, leftFootPosition.z);\n\t\t\t\tif (leftDistance < this.rig.height*stepMinDistance) {\n\t\t\t\t\tleftStepDistance = leftDistance;\n\t\t\t\t} else if (leftDistance > this.rig.height*stepMaxDistance) {\n\t\t\t\t\tleftStepDistance = leftDistance;\n\t\t\t\t}\n\t\t\t\tif (leftAngleDiff > -Math.PI*maxStepAngleFactor) {\n\t\t\t\t\tleftStepAngleDiff = leftAngleDiff;\n\t\t\t\t} else if (leftAngleDiff < -Math.PI+Math.PI*maxStepAngleFactor) {\n\t\t\t\t\tleftStepAngleDiff = leftAngleDiff;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet rightStepDistance = 0;\n    \tlet rightStepAngleDiff = 0;\n\t\t\tif (rightCanStep) {\n\t\t\t\tconst rightDistance = Math.sqrt(rightFootPosition.x*rightFootPosition.x + rightFootPosition.z*rightFootPosition.z);\n\t\t\t\tconst rightAngleDiff = Math.atan2(rightFootPosition.x, rightFootPosition.z);\n\t\t    if (rightDistance < this.rig.height*stepMinDistance) {\n\t\t    \trightStepDistance = rightDistance;\n\t\t    } else if (rightDistance > this.rig.height*stepMaxDistance) {\n\t\t    \trightStepDistance = rightDistance;\n\t\t    }\n\t\t    if (rightAngleDiff < Math.PI*maxStepAngleFactor) {\n\t\t    \trightStepAngleDiff = rightAngleDiff;\n\t\t    } else if (rightAngleDiff > Math.PI-Math.PI*maxStepAngleFactor) {\n\t\t\t\t\trightStepAngleDiff = rightAngleDiff;\n\t\t\t\t}\n\t\t\t}\n\n      const _stepLeg = leg => {\n        const footDistance = this.legSeparation*stepRestitutionDistance;//Math.min(Math.max(leftStepDistance, this.legSeparation*0.7), this.legSeparation*1.4);\n\n\t\t\t\tleg.foot.startTransform.position.copy(leg.foot.stickTransform.position);\n        // leg.foot.startTransform.quaternion.copy(leg.foot.stickTransform.quaternion);\n\n\t\t\t  leg.foot.endTransform.position.copy(hipsFloorPosition)\n\t\t\t\t  .add(localVector6.set((leg.left ? -1 : 1) * footDistance, 0, 0).applyQuaternion(leg.foot.stickTransform.quaternion));\n\t\t\t\tconst velocityVector = localVector6.set(this.hmdVelocity.x, 0, this.hmdVelocity.z);\n\t\t\t\tconst velocityVectorLength = velocityVector.length();\n\t\t\t\tif (velocityVectorLength > maxVelocity*this.rig.height) {\n          velocityVector.multiplyScalar(maxVelocity*this.rig.height / velocityVectorLength);\n\t\t\t\t}\n\t\t\t\tvelocityVector.multiplyScalar(velocityRestitutionFactor);\n\t\t\t\tleg.foot.endTransform.position.add(velocityVector);\n\t\t\t  // leg.foot.endTransform.quaternion.copy(this.rightLeg.foot.stickTransform.quaternion);\n\n\t\t\t  leg.foot.startHmdFloorTransform.position.set(this.poseManager.vrTransforms.head.position.x, 0, this.poseManager.vrTransforms.head.position.z);\n\n        leg.lastStepTimestamp = now;\n        leg.stepping = true;\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\t(leftStepDistance !== 0 || leftStepAngleDiff !== 0) &&\n\t\t\t\t(rightStepDistance === 0 || Math.abs(leftStepDistance*this.leftLeg.balance) >= Math.abs(rightStepDistance*this.rightLeg.balance)) &&\n\t\t\t\t(rightStepAngleDiff === 0 || Math.abs(leftStepAngleDiff*this.leftLeg.balance) >= Math.abs(rightStepAngleDiff*this.rightLeg.balance))\n\t\t\t) {\n\t\t\t\t_stepLeg(this.leftLeg);\n        this.leftLeg.balance = 0;\n        this.rightLeg.balance = 1;\n\t\t\t} else if (rightStepDistance !== 0  || rightStepAngleDiff !== 0) {\n\t\t\t\t_stepLeg(this.rightLeg);\n      \tthis.rightLeg.balance = 0;\n        this.leftLeg.balance = 1;\n\t\t\t}\n\t\t}\n\n    if (this.rig.shoulderTransforms.prone) {\n    \tconst targetPosition = Helpers.getWorldPosition(this.leftLeg.upperLeg, localVector6)\n        .add(\n        \tlocalVector7.set(0, -this.leftLeg.legLength*0.95, 0)\n        \t  .applyQuaternion(this.hips.quaternion)\n        );\n      targetPosition.y = 0;\n    \tthis.leftLeg.foot.stickTransform.position.lerp(targetPosition, 0.1);\n\n    \tthis.leftLeg.stepping = false;\n    } else if (this.leftLeg.stepping) {\n      this.leftLeg.foot.stickTransform.position.copy(this.leftLeg.foot.startTransform.position)\n        .lerp(this.leftLeg.foot.endTransform.position, this.leftLeg.stepFactor)\n        .add(localVector6.set(0, Math.sin(this.leftLeg.stepFactor*Math.PI) * stepHeight * this.rig.height, 0));\n\n      if (this.leftLeg.stepFactor >= 1) {\n      \tthis.leftLeg.stepping = false;\n      }\n\t\t} else if (!this.leftLeg.standing) {\n      const targetPosition = Helpers.getWorldPosition(this.leftLeg.upperLeg, localVector6)\n        .add(\n        \tlocalVector7.set(0, 0, 1)\n            .normalize()\n        \t  .applyQuaternion(this.hips.quaternion)\n        \t  .multiplyScalar(this.leftLeg.legLength*0.5)\n        );\n      this.leftLeg.foot.stickTransform.position.lerp(targetPosition, 0.1);\n\t\t} else {\n\t\t\tconst targetPosition = localVector6.copy(this.leftLeg.foot.stickTransform.position);\n\t\t\ttargetPosition.y = 0;\n\t\t\tthis.leftLeg.foot.stickTransform.position.lerp(targetPosition, 0.2);\n\t\t}\n\t\tif (this.rig.shoulderTransforms.prone) {\n    \tconst targetPosition = Helpers.getWorldPosition(this.rightLeg.upperLeg, localVector6)\n        .add(\n        \tlocalVector7.set(0, -this.rightLeg.legLength*0.95, 0)\n        \t  .applyQuaternion(this.hips.quaternion)\n        );\n      targetPosition.y = 0;\n    \tthis.rightLeg.foot.stickTransform.position.lerp(targetPosition, 0.1);\n\n    \tthis.rightLeg.stepping = false;\n\t\t} else if (this.rightLeg.stepping) {\n      this.rightLeg.foot.stickTransform.position.copy(this.rightLeg.foot.startTransform.position)\n        .lerp(this.rightLeg.foot.endTransform.position, this.rightLeg.stepFactor)\n        .add(localVector6.set(0, Math.sin(this.rightLeg.stepFactor*Math.PI) * stepHeight * this.rig.height, 0));\n      // this.rightLeg.foot.stickTransform.quaternion.copy(this.rightLeg.foot.startTransform.quaternion).slerp(this.rightLeg.foot.endTransform.quaternion, stepFactor);\n\n      if (this.rightLeg.stepFactor >= 1) {\n      \tthis.rightLeg.stepping = false;\n      }\n\t\t} else if (!this.rightLeg.standing) {\n      const targetPosition = Helpers.getWorldPosition(this.rightLeg.upperLeg, localVector6)\n        .add(\n        \tlocalVector7.set(0, 0, 1)\n        \t  .normalize()\n        \t  .applyQuaternion(this.hips.quaternion)\n        \t  .multiplyScalar(this.rightLeg.legLength*0.6)\n        );\n      this.rightLeg.foot.stickTransform.position.lerp(targetPosition, 0.1);\n\t\t} else {\n\t\t\tconst targetPosition = localVector6.copy(this.rightLeg.foot.stickTransform.position);\n\t\t\ttargetPosition.y = 0;\n\t\t\tthis.rightLeg.foot.stickTransform.position.lerp(targetPosition, 0.2);\n\t\t}\n\n\t\tthis.leftLeg.Update();\n\t\tthis.rightLeg.Update();\n  }\n}\n\nexport default LegsManager;\n"]},"metadata":{},"sourceType":"module"}