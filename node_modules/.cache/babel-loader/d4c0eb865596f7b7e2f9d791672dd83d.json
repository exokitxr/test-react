{"ast":null,"code":"class MicrophoneWorker extends EventTarget {\n  constructor(mediaStream, options = {}) {\n    super();\n    const audio = document.createElement('audio');\n    audio.srcObject = mediaStream;\n    audio.muted = true;\n    this.audioContext = new AudioContext();\n    const mediaStreamSource = this.audioContext.createMediaStreamSource(mediaStream);\n    this.audioContext.audioWorklet.addModule(options.microphoneWorkletUrl || 'microphone-worklet.js').then(() => {\n      const audioWorkletNode = new AudioWorkletNode(this.audioContext, 'volume-processor');\n\n      if (options.muted === false) {\n        audioWorkletNode.port.postMessage(JSON.stringify({\n          method: 'muted',\n          muted: false\n        }));\n      }\n\n      audioWorkletNode.port.onmessage = e => {\n        this.dispatchEvent(new MessageEvent('volume', {\n          data: e.data\n        }));\n      };\n\n      mediaStreamSource.connect(audioWorkletNode).connect(this.audioContext.destination);\n    });\n  }\n\n  close() {\n    this.audioContext.close();\n  }\n\n}\n\nexport default MicrophoneWorker;","map":{"version":3,"sources":["/Users/chris/Documents/Github/test-react/src/WebXRApps/Avatars/microphone-worker.js"],"names":["MicrophoneWorker","EventTarget","constructor","mediaStream","options","audio","document","createElement","srcObject","muted","audioContext","AudioContext","mediaStreamSource","createMediaStreamSource","audioWorklet","addModule","microphoneWorkletUrl","then","audioWorkletNode","AudioWorkletNode","port","postMessage","JSON","stringify","method","onmessage","e","dispatchEvent","MessageEvent","data","connect","destination","close"],"mappings":"AAAA,MAAMA,gBAAN,SAA+BC,WAA/B,CAA2C;AACzCC,EAAAA,WAAW,CAACC,WAAD,EAAcC,OAAO,GAAG,EAAxB,EAA4B;AACrC;AAEA,UAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAd;AACAF,IAAAA,KAAK,CAACG,SAAN,GAAkBL,WAAlB;AACAE,IAAAA,KAAK,CAACI,KAAN,GAAc,IAAd;AACA,SAAKC,YAAL,GAAoB,IAAIC,YAAJ,EAApB;AACA,UAAMC,iBAAiB,GAAG,KAAKF,YAAL,CAAkBG,uBAAlB,CAA0CV,WAA1C,CAA1B;AAEA,SAAKO,YAAL,CAAkBI,YAAlB,CAA+BC,SAA/B,CAAyCX,OAAO,CAACY,oBAAR,IAAgC,uBAAzE,EACGC,IADH,CACQ,MAAM;AACV,YAAMC,gBAAgB,GAAG,IAAIC,gBAAJ,CAAqB,KAAKT,YAA1B,EAAwC,kBAAxC,CAAzB;;AACA,UAAIN,OAAO,CAACK,KAAR,KAAkB,KAAtB,EAA6B;AAC3BS,QAAAA,gBAAgB,CAACE,IAAjB,CAAsBC,WAAtB,CAAkCC,IAAI,CAACC,SAAL,CAAe;AAC/CC,UAAAA,MAAM,EAAE,OADuC;AAE/Cf,UAAAA,KAAK,EAAE;AAFwC,SAAf,CAAlC;AAID;;AACDS,MAAAA,gBAAgB,CAACE,IAAjB,CAAsBK,SAAtB,GAAkCC,CAAC,IAAI;AACrC,aAAKC,aAAL,CAAmB,IAAIC,YAAJ,CAAiB,QAAjB,EAA2B;AAC5CC,UAAAA,IAAI,EAAEH,CAAC,CAACG;AADoC,SAA3B,CAAnB;AAGD,OAJD;;AAKAjB,MAAAA,iBAAiB,CAACkB,OAAlB,CAA0BZ,gBAA1B,EAA4CY,OAA5C,CAAoD,KAAKpB,YAAL,CAAkBqB,WAAtE;AACD,KAfH;AAgBD;;AACDC,EAAAA,KAAK,GAAG;AACN,SAAKtB,YAAL,CAAkBsB,KAAlB;AACD;;AA7BwC;;AA+B3C,eAAehC,gBAAf","sourcesContent":["class MicrophoneWorker extends EventTarget {\n  constructor(mediaStream, options = {}) {\n    super();\n\n    const audio = document.createElement('audio');\n    audio.srcObject = mediaStream;\n    audio.muted = true;\n    this.audioContext = new AudioContext();\n    const mediaStreamSource = this.audioContext.createMediaStreamSource(mediaStream);\n\n    this.audioContext.audioWorklet.addModule(options.microphoneWorkletUrl || 'microphone-worklet.js')\n      .then(() => {\n        const audioWorkletNode = new AudioWorkletNode(this.audioContext, 'volume-processor');\n        if (options.muted === false) {\n          audioWorkletNode.port.postMessage(JSON.stringify({\n            method: 'muted',\n            muted: false,\n          }));\n        }\n        audioWorkletNode.port.onmessage = e => {\n          this.dispatchEvent(new MessageEvent('volume', {\n            data: e.data,\n          }));\n        };\n        mediaStreamSource.connect(audioWorkletNode).connect(this.audioContext.destination);\n      });\n  }\n  close() {\n    this.audioContext.close();\n  }\n}\nexport default MicrophoneWorker;"]},"metadata":{},"sourceType":"module"}