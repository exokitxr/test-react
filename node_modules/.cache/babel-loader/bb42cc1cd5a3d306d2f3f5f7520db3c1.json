{"ast":null,"code":"import _slicedToArray from \"/Users/chris/Documents/Github/test-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/* eslint-disable */\nimport './vrarmik/three-vrm.js';\nimport { fixSkeletonZForward } from './vrarmik/SkeletonUtils.js';\nimport PoseManager from './vrarmik/PoseManager.js';\nimport ShoulderTransforms from './vrarmik/ShoulderTransforms.js';\nimport LegsManager from './vrarmik/LegsManager.js';\nimport MicrophoneWorker from './microphone-worker.js';\nimport skeletonString from './skeleton.js';\nimport THREE from 'three.js';\nconst zeroVector = new THREE.Vector3();\nconst upRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI / 2);\nconst leftRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI * 0.8);\nconst rightRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI * 0.8);\nconst z180Quaternion = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\nconst localVector3 = new THREE.Vector3();\nconst localVector4 = new THREE.Vector3();\nconst localVector5 = new THREE.Vector3();\nconst localVector6 = new THREE.Vector3();\nconst localQuaternion = new THREE.Quaternion();\nconst localQuaternion2 = new THREE.Quaternion();\nconst localMatrix = new THREE.Matrix4();\n\nconst _localizeMatrixWorld = bone => {\n  bone.matrix.copy(bone.matrixWorld);\n\n  if (bone.parent) {\n    bone.matrix.premultiply(new THREE.Matrix4().getInverse(bone.parent.matrixWorld));\n  }\n\n  bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\n  for (let i = 0; i < bone.children.length; i++) {\n    _localizeMatrixWorld(bone.children[i]);\n  }\n};\n\nconst _findBoneDeep = (bones, boneName) => {\n  for (let i = 0; i < bones.length; i++) {\n    const bone = bones[i];\n\n    if (bone.name === boneName) {\n      return bone;\n    } else {\n      const deepBone = _findBoneDeep(bone.children, boneName);\n\n      if (deepBone) {\n        return deepBone;\n      }\n    }\n  }\n\n  return null;\n};\n\nconst _copySkeleton = (src, dst) => {\n  for (let i = 0; i < src.bones.length; i++) {\n    const srcBone = src.bones[i];\n\n    const dstBone = _findBoneDeep(dst.bones, srcBone.name);\n\n    dstBone.matrixWorld.copy(srcBone.matrixWorld);\n  }\n\n  const armature = dst.bones[0].parent;\n\n  _localizeMatrixWorld(armature);\n\n  dst.calculateInverses();\n};\n\nconst cubeGeometry = new THREE.ConeBufferGeometry(0.05, 0.2, 3).applyMatrix(new THREE.Matrix4().makeRotationFromQuaternion(new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 1))));\nconst cubeMaterials = {};\n\nconst _getCubeMaterial = color => {\n  let material = cubeMaterials[color];\n\n  if (!material) {\n    material = new THREE.MeshPhongMaterial({\n      color,\n      flatShading: true\n    });\n    cubeMaterials[color] = material;\n  }\n\n  return material;\n};\n\nconst _makeCubeMesh = (color = 0x0000FF) => {\n  const mesh = new THREE.Mesh(cubeGeometry, _getCubeMaterial(color));\n  mesh.frustumCulled = false;\n  /* if (color === 0x008000 || color === 0x808000) {\n    mesh.add(new THREE.AxesHelper());\n  } */\n\n  mesh.updateMatrixWorld = () => {};\n\n  return mesh;\n};\n\nconst _makeDebugMeshes = () => ({\n  eyes: _makeCubeMesh(0xFF0000),\n  head: _makeCubeMesh(0xFF8080),\n  chest: _makeCubeMesh(0xFFFF00),\n  leftShoulder: _makeCubeMesh(0x00FF00),\n  rightShoulder: _makeCubeMesh(0x008000),\n  leftUpperArm: _makeCubeMesh(0x00FFFF),\n  rightUpperArm: _makeCubeMesh(0x008080),\n  leftLowerArm: _makeCubeMesh(0x0000FF),\n  rightLowerArm: _makeCubeMesh(0x000080),\n  leftHand: _makeCubeMesh(0xFFFFFF),\n  rightHand: _makeCubeMesh(0x808080),\n  hips: _makeCubeMesh(0xFF0000),\n  leftUpperLeg: _makeCubeMesh(0xFFFF00),\n  rightUpperLeg: _makeCubeMesh(0x808000),\n  leftLowerLeg: _makeCubeMesh(0x00FF00),\n  rightLowerLeg: _makeCubeMesh(0x008000),\n  leftFoot: _makeCubeMesh(0xFFFFFF),\n  rightFoot: _makeCubeMesh(0x808080)\n});\n\nconst _getTailBones = skeleton => {\n  const result = [];\n\n  const _recurse = bones => {\n    for (let i = 0; i < bones.length; i++) {\n      const bone = bones[i];\n\n      if (bone.children.length === 0) {\n        if (!result.includes(bone)) {\n          result.push(bone);\n        }\n      } else {\n        _recurse(bone.children);\n      }\n    }\n  };\n\n  _recurse(skeleton.bones);\n\n  return result;\n};\n\nconst _findClosestParentBone = (bone, pred) => {\n  for (; bone; bone = bone.parent) {\n    if (pred(bone)) {\n      return bone;\n    }\n  }\n\n  return null;\n};\n\nconst _findFurthestParentBone = (bone, pred) => {\n  let result = null;\n\n  for (; bone; bone = bone.parent) {\n    if (pred(bone)) {\n      result = bone;\n    }\n  }\n\n  return result;\n};\n\nconst _distanceToParentBone = (bone, parentBone) => {\n  for (let i = 0; bone; bone = bone.parent, i++) {\n    if (bone === parentBone) {\n      return i;\n    }\n  }\n\n  return Infinity;\n};\n\nconst _findClosestChildBone = (bone, pred) => {\n  const _recurse = bone => {\n    if (pred(bone)) {\n      return bone;\n    } else {\n      for (let i = 0; i < bone.children.length; i++) {\n        const result = _recurse(bone.children[i]);\n\n        if (result) {\n          return result;\n        }\n      }\n\n      return null;\n    }\n  };\n\n  return _recurse(bone);\n};\n\nconst _traverseChild = (bone, distance) => {\n  if (distance <= 0) {\n    return bone;\n  } else {\n    for (let i = 0; i < bone.children.length; i++) {\n      const child = bone.children[i];\n\n      const subchild = _traverseChild(child, distance - 1);\n\n      if (subchild !== null) {\n        return subchild;\n      }\n    }\n\n    return null;\n  }\n};\n\nconst _countCharacters = (name, regex) => {\n  let result = 0;\n\n  for (let i = 0; i < name.length; i++) {\n    if (regex.test(name[i])) {\n      result++;\n    }\n  }\n\n  return result;\n};\n\nconst _findHips = skeleton => skeleton.bones.find(bone => /hip/i.test(bone.name));\n\nconst _findHead = tailBones => {\n  const headBones = tailBones.map(tailBone => {\n    const headBone = _findFurthestParentBone(tailBone, bone => /head/i.test(bone.name));\n\n    if (headBone) {\n      return headBone;\n    } else {\n      return null;\n    }\n  }).filter(bone => bone);\n  const headBone = headBones.length > 0 ? headBones[0] : null;\n\n  if (headBone) {\n    return headBone;\n  } else {\n    return null;\n  }\n};\n\nconst _findEye = (tailBones, left) => {\n  const regexp = left ? /l/i : /r/i;\n  const eyeBones = tailBones.map(tailBone => {\n    const eyeBone = _findFurthestParentBone(tailBone, bone => /eye/i.test(bone.name) && regexp.test(bone.name.replace(/eye/gi, '')));\n\n    if (eyeBone) {\n      return eyeBone;\n    } else {\n      return null;\n    }\n  }).filter(spec => spec).sort((a, b) => {\n    const aName = a.name.replace(/shoulder/gi, '');\n\n    const aLeftBalance = _countCharacters(aName, /l/i) - _countCharacters(aName, /r/i);\n\n    const bName = b.name.replace(/shoulder/gi, '');\n\n    const bLeftBalance = _countCharacters(bName, /l/i) - _countCharacters(bName, /r/i);\n\n    if (!left) {\n      return aLeftBalance - bLeftBalance;\n    } else {\n      return bLeftBalance - aLeftBalance;\n    }\n  });\n  const eyeBone = eyeBones.length > 0 ? eyeBones[0] : null;\n\n  if (eyeBone) {\n    return eyeBone;\n  } else {\n    return null;\n  }\n};\n\nconst _findSpine = (chest, hips) => {\n  for (let bone = chest; bone; bone = bone.parent) {\n    if (bone.parent === hips) {\n      return bone;\n    }\n  }\n\n  return null;\n};\n\nconst _findShoulder = (tailBones, left) => {\n  const regexp = left ? /l/i : /r/i;\n  const shoulderBones = tailBones.map(tailBone => {\n    const shoulderBone = _findClosestParentBone(tailBone, bone => /shoulder/i.test(bone.name) && regexp.test(bone.name.replace(/shoulder/gi, '')));\n\n    if (shoulderBone) {\n      const distance = _distanceToParentBone(tailBone, shoulderBone);\n\n      if (distance >= 3) {\n        return {\n          bone: shoulderBone,\n          distance\n        };\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }).filter(spec => spec).sort((a, b) => {\n    const diff = b.distance - a.distance;\n\n    if (diff !== 0) {\n      return diff;\n    } else {\n      const aName = a.bone.name.replace(/shoulder/gi, '');\n\n      const aLeftBalance = _countCharacters(aName, /l/i) - _countCharacters(aName, /r/i);\n\n      const bName = b.bone.name.replace(/shoulder/gi, '');\n\n      const bLeftBalance = _countCharacters(bName, /l/i) - _countCharacters(bName, /r/i);\n\n      if (!left) {\n        return aLeftBalance - bLeftBalance;\n      } else {\n        return bLeftBalance - aLeftBalance;\n      }\n    }\n  });\n  const shoulderBone = shoulderBones.length > 0 ? shoulderBones[0].bone : null;\n\n  if (shoulderBone) {\n    return shoulderBone;\n  } else {\n    return null;\n  }\n};\n\nconst _findHand = shoulderBone => _findClosestChildBone(shoulderBone, bone => /hand|wrist/i.test(bone.name));\n\nconst _findFoot = (tailBones, left) => {\n  const regexp = left ? /l/i : /r/i;\n  const legBones = tailBones.map(tailBone => {\n    const footBone = _findFurthestParentBone(tailBone, bone => /foot|ankle/i.test(bone.name) && regexp.test(bone.name.replace(/foot|ankle/gi, '')));\n\n    if (footBone) {\n      const legBone = _findFurthestParentBone(footBone, bone => /leg|thigh/i.test(bone.name) && regexp.test(bone.name.replace(/leg|thigh/gi, '')));\n\n      if (legBone) {\n        const distance = _distanceToParentBone(footBone, legBone);\n\n        if (distance >= 2) {\n          return {\n            footBone,\n            distance\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }).filter(spec => spec).sort((a, b) => {\n    const diff = b.distance - a.distance;\n\n    if (diff !== 0) {\n      return diff;\n    } else {\n      const aName = a.footBone.name.replace(/foot|ankle/gi, '');\n\n      const aLeftBalance = _countCharacters(aName, /l/i) - _countCharacters(aName, /r/i);\n\n      const bName = b.footBone.name.replace(/foot|ankle/gi, '');\n\n      const bLeftBalance = _countCharacters(bName, /l/i) - _countCharacters(bName, /r/i);\n\n      if (!left) {\n        return aLeftBalance - bLeftBalance;\n      } else {\n        return bLeftBalance - aLeftBalance;\n      }\n    }\n  });\n  const footBone = legBones.length > 0 ? legBones[0].footBone : null;\n\n  if (footBone) {\n    return footBone;\n  } else {\n    return null;\n  }\n};\n\nconst _findArmature = bone => {\n  for (;; bone = bone.parent) {\n    if (!bone.isBone) {\n      return bone;\n    }\n  }\n\n  return null; // can't happen\n};\n\nconst _exportBone = bone => {\n  return [bone.name, bone.position.toArray().concat(bone.quaternion.toArray()).concat(bone.scale.toArray()), bone.children.map(b => _exportBone(b))];\n};\n\nconst _exportSkeleton = skeleton => {\n  const hips = _findHips(skeleton);\n\n  const armature = _findArmature(hips);\n\n  return JSON.stringify(_exportBone(armature));\n};\n\nconst _importObject = (b, Cons, ChildCons) => {\n  const _b = _slicedToArray(b, 3),\n        name = _b[0],\n        array = _b[1],\n        children = _b[2];\n\n  const bone = new Cons();\n  bone.name = name;\n  bone.position.fromArray(array, 0);\n  bone.quaternion.fromArray(array, 3);\n  bone.scale.fromArray(array, 3 + 4);\n\n  for (let i = 0; i < children.length; i++) {\n    bone.add(_importObject(children[i], ChildCons, ChildCons));\n  }\n\n  return bone;\n};\n\nconst _importArmature = b => _importObject(b, THREE.Object3D, THREE.Bone);\n\nconst _importSkeleton = s => {\n  const armature = _importArmature(JSON.parse(s));\n\n  return new THREE.Skeleton(armature.children);\n};\n\nclass Avatar {\n  constructor(object, options = {}) {\n    const model = (() => {\n      let o = object;\n\n      if (o && !o.isMesh) {\n        o = o.scene;\n      }\n\n      if (!o) {\n        const scene = new THREE.Scene();\n        const skinnedMesh = new THREE.Object3D();\n        skinnedMesh.isSkinnedMesh = true;\n        skinnedMesh.skeleton = null;\n\n        skinnedMesh.bind = function (skeleton) {\n          this.skeleton = skeleton;\n        };\n\n        skinnedMesh.bind(_importSkeleton(skeletonString));\n        scene.add(skinnedMesh);\n\n        const hips = _findHips(skinnedMesh.skeleton);\n\n        const armature = _findArmature(hips);\n\n        scene.add(armature);\n        o = scene;\n      }\n\n      return o;\n    })();\n\n    this.model = model;\n    this.options = options;\n    model.updateMatrixWorld(true);\n    const skinnedMeshes = [];\n    model.traverse(o => {\n      if (o.isSkinnedMesh) {\n        skinnedMeshes.push(o);\n      }\n    });\n    skinnedMeshes.sort((a, b) => b.skeleton.bones.length - a.skeleton.bones.length);\n    this.skinnedMeshes = skinnedMeshes;\n    const skeletonSkinnedMesh = skinnedMeshes.find(o => o.skeleton.bones[0].parent) || null;\n    const skeleton = skeletonSkinnedMesh && skeletonSkinnedMesh.skeleton; // console.log('got skeleton', skinnedMeshes, skeleton, _exportSkeleton(skeleton));\n\n    const poseSkeletonSkinnedMesh = skeleton ? skinnedMeshes.find(o => o.skeleton !== skeleton && o.skeleton.bones.length >= skeleton.bones.length) : null;\n    const poseSkeleton = poseSkeletonSkinnedMesh && poseSkeletonSkinnedMesh.skeleton;\n\n    if (poseSkeleton) {\n      _copySkeleton(poseSkeleton, skeleton);\n\n      poseSkeletonSkinnedMesh.bind(skeleton);\n    }\n\n    if (options.debug) {\n      const debugMeshes = _makeDebugMeshes();\n\n      for (const k in debugMeshes) {\n        this.model.add(debugMeshes[k]);\n      }\n\n      this.debugMeshes = debugMeshes;\n    } else {\n      this.debugMeshes = null;\n    }\n\n    const tailBones = _getTailBones(skeleton); // const tailBones = skeleton.bones.filter(bone => bone.children.length === 0);\n\n\n    const Eye_L = _findEye(tailBones, true);\n\n    const Eye_R = _findEye(tailBones, false);\n\n    const Head = _findHead(tailBones);\n\n    const Neck = Head.parent;\n    const Chest = Neck.parent;\n\n    const Hips = _findHips(skeleton);\n\n    const Spine = _findSpine(Chest, Hips);\n\n    const Left_shoulder = _findShoulder(tailBones, true);\n\n    const Left_wrist = _findHand(Left_shoulder);\n\n    const Left_elbow = Left_wrist.parent;\n    const Left_arm = Left_elbow.parent;\n\n    const Right_shoulder = _findShoulder(tailBones, false);\n\n    const Right_wrist = _findHand(Right_shoulder);\n\n    const Right_elbow = Right_wrist.parent;\n    const Right_arm = Right_elbow.parent;\n\n    const Left_ankle = _findFoot(tailBones, true);\n\n    const Left_knee = Left_ankle.parent;\n    const Left_leg = Left_knee.parent;\n\n    const Right_ankle = _findFoot(tailBones, false);\n\n    const Right_knee = Right_ankle.parent;\n    const Right_leg = Right_knee.parent;\n    const modelBones = {\n      Hips,\n      Spine,\n      Chest,\n      Neck,\n      Head,\n\n      /* Eye_L,\n      Eye_R, */\n      Left_shoulder,\n      Left_arm,\n      Left_elbow,\n      Left_wrist,\n      Left_leg,\n      Left_knee,\n      Left_ankle,\n      Right_shoulder,\n      Right_arm,\n      Right_elbow,\n      Right_wrist,\n      Right_leg,\n      Right_knee,\n      Right_ankle\n    };\n    this.modelBones = modelBones;\n    /* for (const k in modelBones) {\n      if (!modelBones[k]) {\n        console.warn('missing bone', k);\n      }\n    } */\n\n    const armature = _findArmature(Hips);\n\n    const _getEyePosition = () => {\n      if (Eye_L && Eye_R) {\n        return Eye_L.getWorldPosition(new THREE.Vector3()).add(Eye_R.getWorldPosition(new THREE.Vector3())).divideScalar(2);\n      } else {\n        const neckToHeadDiff = Head.getWorldPosition(new THREE.Vector3()).sub(Neck.getWorldPosition(new THREE.Vector3()));\n\n        if (neckToHeadDiff.z < 0) {\n          neckToHeadDiff.z *= -1;\n        }\n\n        return Head.getWorldPosition(new THREE.Vector3()).add(neckToHeadDiff);\n      }\n    }; // const eyeDirection = _getEyePosition().sub(Head.getWorldPosition(new Vector3()));\n\n\n    const leftArmDirection = Left_wrist.getWorldPosition(new THREE.Vector3()).sub(Head.getWorldPosition(new THREE.Vector3()));\n    const flipZ = leftArmDirection.x < 0; //eyeDirection.z < 0;\n\n    const armatureDirection = new THREE.Vector3(0, 1, 0).applyQuaternion(armature.quaternion);\n    const flipY = armatureDirection.z < -0.5;\n    const legDirection = new THREE.Vector3(0, 0, -1).applyQuaternion(Left_leg.getWorldQuaternion(new THREE.Quaternion()).premultiply(armature.quaternion.clone().inverse()));\n    const flipLeg = legDirection.y < 0.5;\n    console.log('flip', flipZ, flipY, flipLeg);\n    this.flipZ = flipZ;\n    this.flipY = flipY;\n    this.flipLeg = flipLeg;\n    const armatureQuaternion = armature.quaternion.clone();\n    const armatureMatrixInverse = new THREE.Matrix4().getInverse(armature.matrixWorld);\n    armature.position.set(0, 0, 0);\n    armature.quaternion.set(0, 0, 0, 1);\n    armature.scale.set(1, 1, 1);\n    armature.updateMatrix();\n    Head.traverse(o => {\n      o.savedPosition = o.position.clone();\n      o.savedMatrixWorld = o.matrixWorld.clone();\n    });\n    const allHairBones = [];\n\n    const _recurseAllHairBones = bones => {\n      for (let i = 0; i < bones.length; i++) {\n        const bone = bones[i];\n\n        if (/hair/i.test(bone.name)) {\n          allHairBones.push(bone);\n        }\n\n        _recurseAllHairBones(bone.children);\n      }\n    };\n\n    _recurseAllHairBones(skeleton.bones);\n\n    const hairBones = tailBones.filter(bone => /hair/i.test(bone.name)).map(bone => {\n      for (; bone; bone = bone.parent) {\n        if (bone.parent === Head) {\n          return bone;\n        }\n      }\n\n      return null;\n    }).filter(bone => bone);\n    this.allHairBones = allHairBones;\n    this.hairBones = hairBones;\n    this.springBoneManager = null;\n\n    if (options.hair) {\n      new Promise((accept, reject) => {\n        if (!object) {\n          object = {};\n        }\n\n        if (!object.parser) {\n          object.parser = {\n            json: {\n              extensions: {}\n            }\n          };\n        }\n\n        if (!object.parser.json.extensions) {\n          object.parser.json.extensions = {};\n        }\n\n        if (!object.parser.json.extensions.VRM) {\n          object.parser.json.extensions.VRM = {\n            secondaryAnimation: {\n              boneGroups: this.hairBones.map(hairBone => {\n                const boneIndices = [];\n\n                const _recurse = bone => {\n                  boneIndices.push(this.allHairBones.indexOf(bone));\n\n                  if (bone.children.length > 0) {\n                    _recurse(bone.children[0]);\n                  }\n                };\n\n                _recurse(hairBone);\n\n                return {\n                  comment: hairBone.name,\n                  stiffiness: 0.5,\n                  gravityPower: 0.2,\n                  gravityDir: {\n                    x: 0,\n                    y: -1,\n                    z: 0\n                  },\n                  dragForce: 0.3,\n                  center: -1,\n                  hitRadius: 0.02,\n                  bones: boneIndices,\n                  colliderGroups: []\n                };\n              })\n            }\n          };\n\n          object.parser.getDependency = async (type, nodeIndex) => {\n            if (type === 'node') {\n              return this.allHairBones[nodeIndex];\n            } else {\n              throw new Error('unsupported type');\n            }\n          };\n        }\n\n        new THREE.VRMSpringBoneImporter().import(object).then(springBoneManager => {\n          this.springBoneManager = springBoneManager;\n        });\n      });\n    }\n\n    const _findFinger = (r, left) => {\n      const fingerTipBone = tailBones.filter(bone => r.test(bone.name) && _findClosestParentBone(bone, bone => bone === modelBones.Left_wrist || bone === modelBones.Right_wrist)).sort((a, b) => {\n        const aName = a.name.replace(r, '');\n\n        const aLeftBalance = _countCharacters(aName, /l/i) - _countCharacters(aName, /r/i);\n\n        const bName = b.name.replace(r, '');\n\n        const bLeftBalance = _countCharacters(bName, /l/i) - _countCharacters(bName, /r/i);\n\n        if (!left) {\n          return aLeftBalance - bLeftBalance;\n        } else {\n          return bLeftBalance - aLeftBalance;\n        }\n      });\n      const fingerRootBone = fingerTipBone.length > 0 ? _findFurthestParentBone(fingerTipBone[0], bone => r.test(bone.name)) : null;\n      return fingerRootBone;\n    };\n\n    const fingerBones = {\n      left: {\n        thumb: _findFinger(/thumb/gi, true),\n        index: _findFinger(/index/gi, true),\n        middle: _findFinger(/middle/gi, true),\n        ring: _findFinger(/ring/gi, true),\n        little: _findFinger(/little/gi, true) || _findFinger(/pinky/gi, true)\n      },\n      right: {\n        thumb: _findFinger(/thumb/gi, false),\n        index: _findFinger(/index/gi, false),\n        middle: _findFinger(/middle/gi, false),\n        ring: _findFinger(/ring/gi, false),\n        little: _findFinger(/little/gi, false) || _findFinger(/pinky/gi, false)\n      }\n    };\n    this.fingerBones = fingerBones;\n    const preRotations = {};\n\n    const _ensurePrerotation = k => {\n      const boneName = modelBones[k].name;\n\n      if (!preRotations[boneName]) {\n        preRotations[boneName] = new THREE.Quaternion();\n      }\n\n      return preRotations[boneName];\n    };\n\n    if (flipY) {\n      ['Hips'].forEach(k => {\n        _ensurePrerotation(k).premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2));\n      });\n    }\n\n    if (flipZ) {\n      ['Hips'].forEach(k => {\n        _ensurePrerotation(k).premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI));\n      });\n    }\n\n    if (flipLeg) {\n      ['Left_leg', 'Right_leg'].forEach(k => {\n        _ensurePrerotation(k).premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI / 2));\n      });\n    }\n\n    const qrArm = flipZ ? Left_arm : Right_arm;\n    const qrElbow = flipZ ? Left_elbow : Right_elbow;\n    const qrWrist = flipZ ? Left_wrist : Right_wrist;\n    const qr = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 2).premultiply(new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().lookAt(new THREE.Vector3(0, 0, 0), qrElbow.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse).sub(qrArm.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse)).applyQuaternion(armatureQuaternion), new THREE.Vector3(0, 1, 0))));\n    const qr2 = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 2).premultiply(new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().lookAt(new THREE.Vector3(0, 0, 0), qrWrist.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse).sub(qrElbow.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse)).applyQuaternion(armatureQuaternion), new THREE.Vector3(0, 1, 0))));\n    const qlArm = flipZ ? Right_arm : Left_arm;\n    const qlElbow = flipZ ? Right_elbow : Left_elbow;\n    const qlWrist = flipZ ? Right_wrist : Left_wrist;\n    const ql = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2).premultiply(new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().lookAt(new THREE.Vector3(0, 0, 0), qlElbow.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse).sub(qlArm.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse)).applyQuaternion(armatureQuaternion), new THREE.Vector3(0, 1, 0))));\n    const ql2 = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2).premultiply(new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().lookAt(new THREE.Vector3(0, 0, 0), qlWrist.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse).sub(qlElbow.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse)).applyQuaternion(armatureQuaternion), new THREE.Vector3(0, 1, 0))));\n\n    _ensurePrerotation('Right_arm').multiply(qr.clone().inverse());\n\n    _ensurePrerotation('Right_elbow').multiply(qr.clone()).premultiply(qr2.clone().inverse());\n\n    _ensurePrerotation('Left_arm').multiply(ql.clone().inverse());\n\n    _ensurePrerotation('Left_elbow').multiply(ql.clone()).premultiply(ql2.clone().inverse());\n\n    _ensurePrerotation('Left_leg').premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2));\n\n    _ensurePrerotation('Right_leg').premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2));\n\n    for (const k in preRotations) {\n      preRotations[k].inverse();\n    }\n\n    fixSkeletonZForward(armature.children[0], {\n      preRotations\n    });\n    model.traverse(o => {\n      if (o.isSkinnedMesh) {\n        o.bind(o.skeleton.bones.length === skeleton.bones.length && o.skeleton.bones.every((bone, i) => bone === skeleton.bones[i]) ? skeleton : o.skeleton);\n      }\n    });\n\n    if (flipY) {\n      modelBones.Hips.quaternion.premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI / 2));\n    }\n\n    if (!flipZ) {\n      /* ['Left_arm', 'Right_arm'].forEach((name, i) => {\n       const bone = modelBones[name];\n       if (bone) {\n         bone.quaternion.premultiply(new Quaternion().setFromAxisAngle(new Vector3(0, 0, 1), (i === 0 ? 1 : -1) * Math.PI*0.25));\n       }\n      }); */\n    } else {\n      modelBones.Hips.quaternion.premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI));\n    }\n\n    modelBones.Right_arm.quaternion.premultiply(qr.clone().inverse());\n    modelBones.Right_elbow.quaternion.premultiply(qr).premultiply(qr2.clone().inverse());\n    modelBones.Left_arm.quaternion.premultiply(ql.clone().inverse());\n    modelBones.Left_elbow.quaternion.premultiply(ql).premultiply(ql2.clone().inverse());\n    model.updateMatrixWorld(true);\n    Hips.traverse(bone => {\n      bone.initialQuaternion = bone.quaternion.clone();\n    });\n\n    const _averagePoint = points => {\n      const result = new THREE.Vector3();\n\n      for (let i = 0; i < points.length; i++) {\n        result.add(points[i]);\n      }\n\n      result.divideScalar(points.length);\n      return result;\n    };\n\n    const eyePosition = _getEyePosition();\n\n    this.poseManager = new PoseManager(this);\n    this.shoulderTransforms = new ShoulderTransforms(this);\n    this.legsManager = new LegsManager(this);\n\n    const _getOffset = (bone, parent = bone.parent) => bone.getWorldPosition(new THREE.Vector3()).sub(parent.getWorldPosition(new THREE.Vector3()));\n\n    this.initializeBonePositions({\n      spine: _getOffset(modelBones.Spine),\n      chest: _getOffset(modelBones.Chest, modelBones.Spine),\n      neck: _getOffset(modelBones.Neck),\n      head: _getOffset(modelBones.Head),\n      eyes: eyePosition.clone().sub(Head.getWorldPosition(new THREE.Vector3())),\n      leftShoulder: _getOffset(modelBones.Right_shoulder),\n      leftUpperArm: _getOffset(modelBones.Right_arm),\n      leftLowerArm: _getOffset(modelBones.Right_elbow),\n      leftHand: _getOffset(modelBones.Right_wrist),\n      rightShoulder: _getOffset(modelBones.Left_shoulder),\n      rightUpperArm: _getOffset(modelBones.Left_arm),\n      rightLowerArm: _getOffset(modelBones.Left_elbow),\n      rightHand: _getOffset(modelBones.Left_wrist),\n      leftUpperLeg: _getOffset(modelBones.Right_leg),\n      leftLowerLeg: _getOffset(modelBones.Right_knee),\n      leftFoot: _getOffset(modelBones.Right_ankle),\n      rightUpperLeg: _getOffset(modelBones.Left_leg),\n      rightLowerLeg: _getOffset(modelBones.Left_knee),\n      rightFoot: _getOffset(modelBones.Left_ankle)\n    });\n    this.height = eyePosition.sub(_averagePoint([modelBones.Left_ankle.getWorldPosition(new THREE.Vector3()), modelBones.Right_ankle.getWorldPosition(new THREE.Vector3())])).y;\n    this.shoulderWidth = modelBones.Left_arm.getWorldPosition(new THREE.Vector3()).distanceTo(modelBones.Right_arm.getWorldPosition(new THREE.Vector3()));\n    this.leftArmLength = this.shoulderTransforms.leftArm.armLength;\n    this.rightArmLength = this.shoulderTransforms.rightArm.armLength;\n    this.inputs = {\n      hmd: this.poseManager.vrTransforms.head,\n      leftGamepad: this.poseManager.vrTransforms.leftHand,\n      rightGamepad: this.poseManager.vrTransforms.rightHand\n    };\n    this.inputs.hmd.scaleFactor = 1;\n    this.lastModelScaleFactor = 1;\n    this.outputs = {\n      eyes: this.shoulderTransforms.eyes,\n      head: this.shoulderTransforms.head,\n      hips: this.legsManager.hips,\n      spine: this.shoulderTransforms.spine,\n      chest: this.shoulderTransforms.transform,\n      neck: this.shoulderTransforms.neck,\n      leftShoulder: this.shoulderTransforms.leftShoulderAnchor,\n      leftUpperArm: this.shoulderTransforms.leftArm.upperArm,\n      leftLowerArm: this.shoulderTransforms.leftArm.lowerArm,\n      leftHand: this.shoulderTransforms.leftArm.hand,\n      rightShoulder: this.shoulderTransforms.rightShoulderAnchor,\n      rightUpperArm: this.shoulderTransforms.rightArm.upperArm,\n      rightLowerArm: this.shoulderTransforms.rightArm.lowerArm,\n      rightHand: this.shoulderTransforms.rightArm.hand,\n      leftUpperLeg: this.legsManager.leftLeg.upperLeg,\n      leftLowerLeg: this.legsManager.leftLeg.lowerLeg,\n      leftFoot: this.legsManager.leftLeg.foot,\n      rightUpperLeg: this.legsManager.rightLeg.upperLeg,\n      rightLowerLeg: this.legsManager.rightLeg.lowerLeg,\n      rightFoot: this.legsManager.rightLeg.foot\n    };\n    this.modelBoneOutputs = {\n      Hips: this.outputs.hips,\n      Spine: this.outputs.spine,\n      Chest: this.outputs.chest,\n      Neck: this.outputs.neck,\n      Head: this.outputs.head,\n      Left_shoulder: this.outputs.rightShoulder,\n      Left_arm: this.outputs.rightUpperArm,\n      Left_elbow: this.outputs.rightLowerArm,\n      Left_wrist: this.outputs.rightHand,\n      Left_leg: this.outputs.rightUpperLeg,\n      Left_knee: this.outputs.rightLowerLeg,\n      Left_ankle: this.outputs.rightFoot,\n      Right_shoulder: this.outputs.leftShoulder,\n      Right_arm: this.outputs.leftUpperArm,\n      Right_elbow: this.outputs.leftLowerArm,\n      Right_wrist: this.outputs.leftHand,\n      Right_leg: this.outputs.leftUpperLeg,\n      Right_knee: this.outputs.leftLowerLeg,\n      Right_ankle: this.outputs.leftFoot\n    };\n    this.microphoneWorker = null;\n    this.volume = 0;\n    this.setMicrophoneMediaStream(options.microphoneMediaStream, {\n      muted: options.muted\n    });\n    this.lastTimestamp = Date.now();\n    this.shoulderTransforms.Start();\n    this.legsManager.Start();\n    this.decapitated = false;\n\n    if (options.decapitate) {\n      this.decapitate();\n    }\n  }\n\n  initializeBonePositions(setups) {\n    this.shoulderTransforms.spine.position.copy(setups.spine);\n    this.shoulderTransforms.transform.position.copy(setups.chest);\n    this.shoulderTransforms.neck.position.copy(setups.neck);\n    this.shoulderTransforms.head.position.copy(setups.head);\n    this.shoulderTransforms.eyes.position.copy(setups.eyes);\n    this.shoulderTransforms.leftShoulderAnchor.position.copy(setups.leftShoulder);\n    this.shoulderTransforms.leftArm.upperArm.position.copy(setups.leftUpperArm);\n    this.shoulderTransforms.leftArm.lowerArm.position.copy(setups.leftLowerArm);\n    this.shoulderTransforms.leftArm.hand.position.copy(setups.leftHand);\n    this.shoulderTransforms.rightShoulderAnchor.position.copy(setups.rightShoulder);\n    this.shoulderTransforms.rightArm.upperArm.position.copy(setups.rightUpperArm);\n    this.shoulderTransforms.rightArm.lowerArm.position.copy(setups.rightLowerArm);\n    this.shoulderTransforms.rightArm.hand.position.copy(setups.rightHand);\n    this.legsManager.leftLeg.upperLeg.position.copy(setups.leftUpperLeg);\n    this.legsManager.leftLeg.lowerLeg.position.copy(setups.leftLowerLeg);\n    this.legsManager.leftLeg.foot.position.copy(setups.leftFoot);\n    this.legsManager.rightLeg.upperLeg.position.copy(setups.rightUpperLeg);\n    this.legsManager.rightLeg.lowerLeg.position.copy(setups.rightLowerLeg);\n    this.legsManager.rightLeg.foot.position.copy(setups.rightFoot);\n    this.shoulderTransforms.hips.updateMatrixWorld();\n  }\n\n  update() {\n    // return;\n    const wasDecapitated = this.decapitated;\n\n    if (this.springBoneManager && wasDecapitated) {\n      this.undecapitate();\n    }\n\n    const modelScaleFactor = this.inputs.hmd.scaleFactor;\n\n    if (modelScaleFactor !== this.lastModelScaleFactor) {\n      this.model.scale.set(modelScaleFactor, modelScaleFactor, modelScaleFactor);\n      this.lastModelScaleFactor = modelScaleFactor;\n      this.springBoneManager && this.springBoneManager.springBoneGroupList.forEach(springBoneGroup => {\n        springBoneGroup.forEach(springBone => {\n          springBone._worldBoneLength = springBone.bone.localToWorld(localVector.copy(springBone._initialLocalChildPosition)).sub(springBone._worldPosition).length();\n        });\n      });\n    }\n\n    this.shoulderTransforms.Update();\n    this.legsManager.Update();\n\n    for (const k in this.modelBones) {\n      const modelBone = this.modelBones[k];\n      const modelBoneOutput = this.modelBoneOutputs[k];\n\n      if (k === 'Hips') {\n        modelBone.position.copy(modelBoneOutput.position);\n      }\n\n      modelBone.quaternion.multiplyQuaternions(modelBoneOutput.quaternion, modelBone.initialQuaternion);\n\n      if (k === 'Left_ankle' || k === 'Right_ankle') {\n        modelBone.quaternion.multiply(upRotation);\n      } else if (k === 'Left_wrist') {\n        modelBone.quaternion.multiply(leftRotation); // center\n      } else if (k === 'Right_wrist') {\n        modelBone.quaternion.multiply(rightRotation); // center\n      }\n\n      modelBone.updateMatrixWorld();\n    }\n\n    const now = Date.now();\n    const timeDiff = Math.min(now - this.lastTimestamp, 1000);\n    this.lastTimestamp = now;\n\n    if (this.options.fingers) {\n      const _processFingerBones = left => {\n        const fingerBones = left ? this.fingerBones.left : this.fingerBones.right;\n        const gamepadInput = left ? this.inputs.rightGamepad : this.inputs.leftGamepad;\n\n        for (const k in fingerBones) {\n          const fingerBone = fingerBones[k];\n\n          if (fingerBone) {\n            let setter;\n\n            if (k === 'thumb') {\n              setter = (q, i) => q.setFromAxisAngle(localVector.set(0, left ? 1 : -1, 0), gamepadInput.grip * Math.PI * (i === 0 ? 0.125 : 0.25));\n            } else if (k === 'index') {\n              setter = (q, i) => q.setFromAxisAngle(localVector.set(0, 0, left ? -1 : 1), gamepadInput.pointer * Math.PI * 0.5);\n            } else {\n              setter = (q, i) => q.setFromAxisAngle(localVector.set(0, 0, left ? -1 : 1), gamepadInput.grip * Math.PI * 0.5);\n            }\n\n            let index = 0;\n            fingerBone.traverse(subFingerBone => {\n              setter(subFingerBone.quaternion, index++);\n            });\n          }\n        }\n      };\n\n      _processFingerBones(true);\n\n      _processFingerBones(false);\n    }\n\n    if (this.springBoneManager) {\n      this.springBoneManager.lateUpdate(timeDiff / 1000);\n    }\n\n    if (this.springBoneManager && wasDecapitated) {\n      this.decapitate();\n    }\n\n    if (this.options.visemes) {\n      const aaValue = Math.min(this.volume * 10, 1);\n\n      const blinkValue = (() => {\n        const nowWindow = now % 2000;\n\n        if (nowWindow >= 0 && nowWindow < 100) {\n          return nowWindow / 100;\n        } else if (nowWindow >= 100 && nowWindow < 200) {\n          return 1 - (nowWindow - 100) / 100;\n        } else {\n          return 0;\n        }\n      })();\n\n      this.skinnedMeshes.forEach(o => {\n        const morphTargetDictionary = o.morphTargetDictionary,\n              morphTargetInfluences = o.morphTargetInfluences;\n\n        if (morphTargetDictionary && morphTargetInfluences) {\n          let aaMorphTargetIndex = morphTargetDictionary['vrc.v_aa'];\n\n          if (aaMorphTargetIndex === undefined) {\n            aaMorphTargetIndex = morphTargetDictionary['morphTarget26'];\n          }\n\n          if (aaMorphTargetIndex !== undefined) {\n            morphTargetInfluences[aaMorphTargetIndex] = aaValue;\n          }\n\n          let blinkLeftMorphTargetIndex = morphTargetDictionary['vrc.blink_left'];\n\n          if (blinkLeftMorphTargetIndex === undefined) {\n            blinkLeftMorphTargetIndex = morphTargetDictionary['morphTarget16'];\n          }\n\n          if (blinkLeftMorphTargetIndex !== undefined) {\n            morphTargetInfluences[blinkLeftMorphTargetIndex] = blinkValue;\n          }\n\n          let blinkRightMorphTargetIndex = morphTargetDictionary['vrc.blink_right'];\n\n          if (blinkRightMorphTargetIndex === undefined) {\n            blinkRightMorphTargetIndex = morphTargetDictionary['morphTarget17'];\n          }\n\n          if (blinkRightMorphTargetIndex !== undefined) {\n            morphTargetInfluences[blinkRightMorphTargetIndex] = blinkValue;\n          }\n        }\n      });\n    }\n\n    if (this.debugMeshes) {\n      for (const k in this.debugMeshes) {\n        const mesh = this.debugMeshes[k];\n        const output = this.outputs[k];\n        mesh.matrixWorld.multiplyMatrices(this.model.matrixWorld, output.matrixWorld);\n      }\n    }\n  }\n\n  async setMicrophoneMediaStream(microphoneMediaStream, options = {}) {\n    if (this.microphoneWorker) {\n      this.microphoneWorker.close();\n      this.microphoneWorker = null;\n      setTimeout(() => {\n        this.volume = 0;\n      });\n    }\n\n    if (microphoneMediaStream) {\n      this.microphoneWorker = new MicrophoneWorker(microphoneMediaStream, options);\n      this.microphoneWorker.addEventListener('volume', e => {\n        this.volume = this.volume * 0.8 + e.data * 0.2;\n      });\n    }\n  }\n\n  decapitate() {\n    if (!this.decapitated) {\n      this.modelBones.Head.traverse(o => {\n        o.savedPosition.copy(o.position);\n        o.savedMatrixWorld.copy(o.matrixWorld);\n        o.position.set(NaN, NaN, NaN);\n        o.matrixWorld.set(NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN);\n      });\n\n      if (this.debugMeshes) {\n        [this.debugMeshes.eyes, this.debugMeshes.head].forEach(mesh => {\n          mesh.visible = false;\n        });\n      }\n\n      this.decapitated = true;\n    }\n  }\n\n  undecapitate() {\n    if (this.decapitated) {\n      this.modelBones.Head.traverse(o => {\n        o.position.copy(o.savedPosition);\n        o.matrixWorld.copy(o.savedMatrixWorld);\n      });\n\n      if (this.debugMeshes) {\n        [this.debugMeshes.eyes, this.debugMeshes.head].forEach(mesh => {\n          mesh.visible = true;\n        });\n      }\n\n      this.decapitated = false;\n    }\n  }\n\n  destroy() {\n    this.setMicrophoneMediaStream(null);\n  }\n\n}\n\nexport default Avatar;","map":{"version":3,"sources":["/Users/chris/Documents/Github/test-react/src/WebXRApps/avatars.js"],"names":["fixSkeletonZForward","PoseManager","ShoulderTransforms","LegsManager","MicrophoneWorker","skeletonString","THREE","zeroVector","Vector3","upRotation","Quaternion","setFromAxisAngle","Math","PI","leftRotation","rightRotation","z180Quaternion","localVector","localVector2","localVector3","localVector4","localVector5","localVector6","localQuaternion","localQuaternion2","localMatrix","Matrix4","_localizeMatrixWorld","bone","matrix","copy","matrixWorld","parent","premultiply","getInverse","decompose","position","quaternion","scale","i","children","length","_findBoneDeep","bones","boneName","name","deepBone","_copySkeleton","src","dst","srcBone","dstBone","armature","calculateInverses","cubeGeometry","ConeBufferGeometry","applyMatrix","makeRotationFromQuaternion","setFromUnitVectors","cubeMaterials","_getCubeMaterial","color","material","MeshPhongMaterial","flatShading","_makeCubeMesh","mesh","Mesh","frustumCulled","updateMatrixWorld","_makeDebugMeshes","eyes","head","chest","leftShoulder","rightShoulder","leftUpperArm","rightUpperArm","leftLowerArm","rightLowerArm","leftHand","rightHand","hips","leftUpperLeg","rightUpperLeg","leftLowerLeg","rightLowerLeg","leftFoot","rightFoot","_getTailBones","skeleton","result","_recurse","includes","push","_findClosestParentBone","pred","_findFurthestParentBone","_distanceToParentBone","parentBone","Infinity","_findClosestChildBone","_traverseChild","distance","child","subchild","_countCharacters","regex","test","_findHips","find","_findHead","tailBones","headBones","map","tailBone","headBone","filter","_findEye","left","regexp","eyeBones","eyeBone","replace","spec","sort","a","b","aName","aLeftBalance","bName","bLeftBalance","_findSpine","_findShoulder","shoulderBones","shoulderBone","diff","_findHand","_findFoot","legBones","footBone","legBone","_findArmature","isBone","_exportBone","toArray","concat","_exportSkeleton","JSON","stringify","_importObject","Cons","ChildCons","array","fromArray","add","_importArmature","Object3D","Bone","_importSkeleton","s","parse","Skeleton","Avatar","constructor","object","options","model","o","isMesh","scene","Scene","skinnedMesh","isSkinnedMesh","bind","skinnedMeshes","traverse","skeletonSkinnedMesh","poseSkeletonSkinnedMesh","poseSkeleton","debug","debugMeshes","k","Eye_L","Eye_R","Head","Neck","Chest","Hips","Spine","Left_shoulder","Left_wrist","Left_elbow","Left_arm","Right_shoulder","Right_wrist","Right_elbow","Right_arm","Left_ankle","Left_knee","Left_leg","Right_ankle","Right_knee","Right_leg","modelBones","_getEyePosition","getWorldPosition","divideScalar","neckToHeadDiff","sub","z","leftArmDirection","flipZ","x","armatureDirection","applyQuaternion","flipY","legDirection","getWorldQuaternion","clone","inverse","flipLeg","y","console","log","armatureQuaternion","armatureMatrixInverse","set","updateMatrix","savedPosition","savedMatrixWorld","allHairBones","_recurseAllHairBones","hairBones","springBoneManager","hair","Promise","accept","reject","parser","json","extensions","VRM","secondaryAnimation","boneGroups","hairBone","boneIndices","indexOf","comment","stiffiness","gravityPower","gravityDir","dragForce","center","hitRadius","colliderGroups","getDependency","type","nodeIndex","Error","VRMSpringBoneImporter","import","then","_findFinger","r","fingerTipBone","fingerRootBone","fingerBones","thumb","index","middle","ring","little","right","preRotations","_ensurePrerotation","forEach","qrArm","qrElbow","qrWrist","qr","setFromRotationMatrix","lookAt","applyMatrix4","qr2","qlArm","qlElbow","qlWrist","ql","ql2","multiply","every","initialQuaternion","_averagePoint","points","eyePosition","poseManager","shoulderTransforms","legsManager","_getOffset","initializeBonePositions","spine","neck","height","shoulderWidth","distanceTo","leftArmLength","leftArm","armLength","rightArmLength","rightArm","inputs","hmd","vrTransforms","leftGamepad","rightGamepad","scaleFactor","lastModelScaleFactor","outputs","transform","leftShoulderAnchor","upperArm","lowerArm","hand","rightShoulderAnchor","leftLeg","upperLeg","lowerLeg","foot","rightLeg","modelBoneOutputs","microphoneWorker","volume","setMicrophoneMediaStream","microphoneMediaStream","muted","lastTimestamp","Date","now","Start","decapitated","decapitate","setups","update","wasDecapitated","undecapitate","modelScaleFactor","springBoneGroupList","springBoneGroup","springBone","_worldBoneLength","localToWorld","_initialLocalChildPosition","_worldPosition","Update","modelBone","modelBoneOutput","multiplyQuaternions","timeDiff","min","fingers","_processFingerBones","gamepadInput","fingerBone","setter","q","grip","pointer","subFingerBone","lateUpdate","visemes","aaValue","blinkValue","nowWindow","morphTargetDictionary","morphTargetInfluences","aaMorphTargetIndex","undefined","blinkLeftMorphTargetIndex","blinkRightMorphTargetIndex","output","multiplyMatrices","close","setTimeout","addEventListener","e","data","NaN","visible","destroy"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\nimport './vrarmik/three-vrm.js';\nimport {fixSkeletonZForward} from './vrarmik/SkeletonUtils.js';\nimport PoseManager from './vrarmik/PoseManager.js';\nimport ShoulderTransforms from './vrarmik/ShoulderTransforms.js';\nimport LegsManager from './vrarmik/LegsManager.js';\nimport MicrophoneWorker from './microphone-worker.js';\nimport skeletonString from './skeleton.js';\nimport THREE from 'three.js'\n\nconst zeroVector = new THREE.Vector3();\nconst upRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI/2);\nconst leftRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI*0.8);\nconst rightRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI*0.8);\nconst z180Quaternion = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\n\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\nconst localVector3 = new THREE.Vector3();\nconst localVector4 = new THREE.Vector3();\nconst localVector5 = new THREE.Vector3();\nconst localVector6 = new THREE.Vector3();\nconst localQuaternion = new THREE.Quaternion();\nconst localQuaternion2 = new THREE.Quaternion();\nconst localMatrix = new THREE.Matrix4();\n\nconst _localizeMatrixWorld = bone => {\n  bone.matrix.copy(bone.matrixWorld);\n  if (bone.parent) {\n    bone.matrix.premultiply(new THREE.Matrix4().getInverse(bone.parent.matrixWorld));\n  }\n  bone.matrix.decompose(bone.position, bone.quaternion, bone.scale);\n\n  for (let i = 0; i < bone.children.length; i++) {\n    _localizeMatrixWorld(bone.children[i]);\n  }\n};\nconst _findBoneDeep = (bones, boneName) => {\n  for (let i = 0; i < bones.length; i++) {\n    const bone = bones[i];\n    if (bone.name === boneName) {\n      return bone;\n    } else {\n      const deepBone = _findBoneDeep(bone.children, boneName);\n      if (deepBone) {\n        return deepBone;\n      }\n    }\n  }\n  return null;\n};\nconst _copySkeleton = (src, dst) => {\n  for (let i = 0; i < src.bones.length; i++) {\n    const srcBone = src.bones[i];\n    const dstBone = _findBoneDeep(dst.bones, srcBone.name);\n    dstBone.matrixWorld.copy(srcBone.matrixWorld);\n  }\n\n  const armature = dst.bones[0].parent;\n  _localizeMatrixWorld(armature);\n\n  dst.calculateInverses();\n};\n\nconst cubeGeometry = new THREE.ConeBufferGeometry(0.05, 0.2, 3)\n  .applyMatrix(new THREE.Matrix4().makeRotationFromQuaternion(\n    new THREE.Quaternion().setFromUnitVectors(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 1)))\n  );\nconst cubeMaterials ={};\nconst _getCubeMaterial = color => {\n  let material = cubeMaterials[color];\n  if (!material) {\n    material = new THREE.MeshPhongMaterial({\n      color,\n      flatShading: true,\n    });\n    cubeMaterials[color] = material;\n  }\n  return material;\n}\nconst _makeCubeMesh = (color = 0x0000FF) => {\n  const mesh = new THREE.Mesh(cubeGeometry, _getCubeMaterial(color));\n  mesh.frustumCulled = false;\n  /* if (color === 0x008000 || color === 0x808000) {\n    mesh.add(new THREE.AxesHelper());\n  } */\n  mesh.updateMatrixWorld = () => {};\n  return mesh;\n};\nconst _makeDebugMeshes = () => ({\n  eyes: _makeCubeMesh(0xFF0000),\n  head: _makeCubeMesh(0xFF8080),\n\n  chest: _makeCubeMesh(0xFFFF00),\n  leftShoulder: _makeCubeMesh(0x00FF00),\n  rightShoulder: _makeCubeMesh(0x008000),\n  leftUpperArm: _makeCubeMesh(0x00FFFF),\n  rightUpperArm: _makeCubeMesh(0x008080),\n  leftLowerArm: _makeCubeMesh(0x0000FF),\n  rightLowerArm: _makeCubeMesh(0x000080),\n  leftHand: _makeCubeMesh(0xFFFFFF),\n  rightHand: _makeCubeMesh(0x808080),\n\n  hips: _makeCubeMesh(0xFF0000),\n  leftUpperLeg: _makeCubeMesh(0xFFFF00),\n  rightUpperLeg: _makeCubeMesh(0x808000),\n  leftLowerLeg: _makeCubeMesh(0x00FF00),\n  rightLowerLeg: _makeCubeMesh(0x008000),\n  leftFoot: _makeCubeMesh(0xFFFFFF),\n  rightFoot: _makeCubeMesh(0x808080),\n});\n\nconst _getTailBones = skeleton => {\n  const result = [];\n  const _recurse = bones => {\n    for (let i = 0; i < bones.length; i++) {\n      const bone = bones[i];\n      if (bone.children.length === 0) {\n        if (!result.includes(bone)) {\n          result.push(bone);\n        }\n      } else {\n        _recurse(bone.children);\n      }\n    }\n  };\n  _recurse(skeleton.bones);\n  return result;\n};\nconst _findClosestParentBone = (bone, pred) => {\n  for (; bone; bone = bone.parent) {\n    if (pred(bone)) {\n      return bone;\n    }\n  }\n  return null;\n};\nconst _findFurthestParentBone = (bone, pred) => {\n  let result = null;\n  for (; bone; bone = bone.parent) {\n    if (pred(bone)) {\n      result = bone;\n    }\n  }\n  return result;\n};\nconst _distanceToParentBone = (bone, parentBone) => {\n  for (let i = 0; bone; bone = bone.parent, i++) {\n    if (bone === parentBone) {\n      return i;\n    }\n  }\n  return Infinity;\n};\nconst _findClosestChildBone = (bone, pred) => {\n  const _recurse = bone => {\n    if (pred(bone)) {\n      return bone;\n    } else {\n      for (let i = 0; i < bone.children.length; i++) {\n        const result = _recurse(bone.children[i]);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n  }\n  return _recurse(bone);\n};\nconst _traverseChild = (bone, distance) => {\n  if (distance <= 0) {\n    return bone;\n  } else {\n    for (let i = 0; i < bone.children.length; i++) {\n      const child = bone.children[i];\n      const subchild = _traverseChild(child, distance - 1);\n      if (subchild !== null) {\n        return subchild;\n      }\n    }\n    return null;\n  }\n};\nconst _countCharacters = (name, regex) => {\n  let result = 0;\n  for (let i = 0; i < name.length; i++) {\n    if (regex.test(name[i])) {\n      result++;\n    }\n  }\n  return result;\n};\nconst _findHips = skeleton => skeleton.bones.find(bone => /hip/i.test(bone.name));\nconst _findHead = tailBones => {\n  const headBones = tailBones.map(tailBone => {\n    const headBone = _findFurthestParentBone(tailBone, bone => /head/i.test(bone.name));\n    if (headBone) {\n      return headBone;\n    } else {\n      return null;\n    }\n  }).filter(bone => bone);\n  const headBone = headBones.length > 0 ? headBones[0] : null;\n  if (headBone) {\n    return headBone;\n  } else {\n    return null;\n  }\n};\nconst _findEye = (tailBones, left) => {\n  const regexp = left ? /l/i : /r/i;\n  const eyeBones = tailBones.map(tailBone => {\n    const eyeBone = _findFurthestParentBone(tailBone, bone => /eye/i.test(bone.name) && regexp.test(bone.name.replace(/eye/gi, '')));\n    if (eyeBone) {\n      return eyeBone;\n    } else {\n      return null;\n    }\n  }).filter(spec => spec).sort((a, b) => {\n    const aName = a.name.replace(/shoulder/gi, '');\n    const aLeftBalance = _countCharacters(aName, /l/i) - _countCharacters(aName, /r/i);\n    const bName = b.name.replace(/shoulder/gi, '');\n    const bLeftBalance = _countCharacters(bName, /l/i) - _countCharacters(bName, /r/i);\n    if (!left) {\n      return aLeftBalance - bLeftBalance;\n    } else {\n      return bLeftBalance - aLeftBalance;\n    }\n  });\n  const eyeBone = eyeBones.length > 0 ? eyeBones[0] : null;\n  if (eyeBone) {\n    return eyeBone;\n  } else {\n    return null;\n  }\n};\nconst _findSpine = (chest, hips) => {\n  for (let bone = chest; bone; bone = bone.parent) {\n    if (bone.parent === hips) {\n      return bone;\n    }\n  }\n  return null;\n};\nconst _findShoulder = (tailBones, left) => {\n  const regexp = left ? /l/i : /r/i;\n  const shoulderBones = tailBones.map(tailBone => {\n    const shoulderBone = _findClosestParentBone(tailBone, bone => /shoulder/i.test(bone.name) && regexp.test(bone.name.replace(/shoulder/gi, '')));\n    if (shoulderBone) {\n      const distance = _distanceToParentBone(tailBone, shoulderBone);\n      if (distance >= 3) {\n        return {\n          bone: shoulderBone,\n          distance,\n        };\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }).filter(spec => spec).sort((a, b) => {\n    const diff = b.distance - a.distance;\n    if (diff !== 0) {\n      return diff;\n    } else {\n      const aName = a.bone.name.replace(/shoulder/gi, '');\n      const aLeftBalance = _countCharacters(aName, /l/i) - _countCharacters(aName, /r/i);\n      const bName = b.bone.name.replace(/shoulder/gi, '');\n      const bLeftBalance = _countCharacters(bName, /l/i) - _countCharacters(bName, /r/i);\n      if (!left) {\n        return aLeftBalance - bLeftBalance;\n      } else {\n        return bLeftBalance - aLeftBalance;\n      }\n    }\n  });\n  const shoulderBone = shoulderBones.length > 0 ? shoulderBones[0].bone : null;\n  if (shoulderBone) {\n    return shoulderBone;\n  } else {\n    return null;\n  }\n};\nconst _findHand = shoulderBone => _findClosestChildBone(shoulderBone, bone => /hand|wrist/i.test(bone.name));\nconst _findFoot = (tailBones, left) => {\n  const regexp = left ? /l/i : /r/i;\n  const legBones = tailBones.map(tailBone => {\n    const footBone = _findFurthestParentBone(tailBone, bone => /foot|ankle/i.test(bone.name) && regexp.test(bone.name.replace(/foot|ankle/gi, '')));\n    if (footBone) {\n      const legBone = _findFurthestParentBone(footBone, bone => /leg|thigh/i.test(bone.name) && regexp.test(bone.name.replace(/leg|thigh/gi, '')));\n      if (legBone) {\n        const distance = _distanceToParentBone(footBone, legBone);\n        if (distance >= 2) {\n          return {\n            footBone,\n            distance,\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  }).filter(spec => spec).sort((a, b) => {\n    const diff = b.distance - a.distance;\n    if (diff !== 0) {\n      return diff;\n    } else {\n      const aName = a.footBone.name.replace(/foot|ankle/gi, '');\n      const aLeftBalance = _countCharacters(aName, /l/i) - _countCharacters(aName, /r/i);\n      const bName = b.footBone.name.replace(/foot|ankle/gi, '');\n      const bLeftBalance = _countCharacters(bName, /l/i) - _countCharacters(bName, /r/i);\n      if (!left) {\n        return aLeftBalance - bLeftBalance;\n      } else {\n        return bLeftBalance - aLeftBalance;\n      }\n    }\n  });\n  const footBone = legBones.length > 0 ? legBones[0].footBone : null;\n  if (footBone) {\n    return footBone;\n  } else {\n    return null;\n  }\n};\nconst _findArmature = bone => {\n  for (;; bone = bone.parent) {\n    if (!bone.isBone) {\n      return bone;\n    }\n  }\n  return null; // can't happen\n};\n\nconst _exportBone = bone => {\n  return [bone.name, bone.position.toArray().concat(bone.quaternion.toArray()).concat(bone.scale.toArray()), bone.children.map(b => _exportBone(b))];\n};\nconst _exportSkeleton = skeleton => {\n  const hips = _findHips(skeleton);\n  const armature = _findArmature(hips);\n  return JSON.stringify(_exportBone(armature));\n}\nconst _importObject = (b, Cons, ChildCons) => {\n  const [name, array, children] = b;\n  const bone = new Cons();\n  bone.name = name;\n  bone.position.fromArray(array, 0);\n  bone.quaternion.fromArray(array, 3);\n  bone.scale.fromArray(array, 3+4);\n  for (let i = 0; i < children.length; i++) {\n    bone.add(_importObject(children[i], ChildCons, ChildCons));\n  }\n  return bone;\n};\nconst _importArmature = b => _importObject(b, THREE.Object3D, THREE.Bone);\nconst _importSkeleton = s => {\n  const armature = _importArmature(JSON.parse(s));\n  return new THREE.Skeleton(armature.children);\n};\n\nclass Avatar {\n\tconstructor(object, options = {}) {\n    const model = (() => {\n      let o = object;\n      if (o && !o.isMesh) {\n        o = o.scene;\n      }\n      if (!o) {\n        const scene = new THREE.Scene();\n\n        const skinnedMesh = new THREE.Object3D();\n        skinnedMesh.isSkinnedMesh = true;\n        skinnedMesh.skeleton = null;\n        skinnedMesh.bind = function(skeleton) {\n          this.skeleton = skeleton;\n        };\n        skinnedMesh.bind(_importSkeleton(skeletonString));\n        scene.add(skinnedMesh);\n\n        const hips = _findHips(skinnedMesh.skeleton);\n        const armature = _findArmature(hips);\n        scene.add(armature);\n\n        o = scene;\n      }\n      return o;\n    })();\n    this.model = model;\n    this.options = options;\n\n    model.updateMatrixWorld(true);\n    const skinnedMeshes = [];\n\t  model.traverse(o => {\n\t    if (o.isSkinnedMesh) {\n        skinnedMeshes.push(o);\n\t    }\n\t  });\n    skinnedMeshes.sort((a, b) => b.skeleton.bones.length - a.skeleton.bones.length);\n    this.skinnedMeshes = skinnedMeshes;\n\n    const skeletonSkinnedMesh = skinnedMeshes.find(o => o.skeleton.bones[0].parent) || null;\n    const skeleton = skeletonSkinnedMesh && skeletonSkinnedMesh.skeleton;\n    // console.log('got skeleton', skinnedMeshes, skeleton, _exportSkeleton(skeleton));\n    const poseSkeletonSkinnedMesh = skeleton ? skinnedMeshes.find(o => o.skeleton !== skeleton && o.skeleton.bones.length >= skeleton.bones.length) : null;\n    const poseSkeleton = poseSkeletonSkinnedMesh && poseSkeletonSkinnedMesh.skeleton;\n    if (poseSkeleton) {\n      _copySkeleton(poseSkeleton, skeleton);\n      poseSkeletonSkinnedMesh.bind(skeleton);\n    }\n\n    if (options.debug) {\n      const debugMeshes = _makeDebugMeshes();\n      for (const k in debugMeshes) {\n        this.model.add(debugMeshes[k]);\n      }\n      this.debugMeshes = debugMeshes;\n    } else {\n      this.debugMeshes = null;\n    }\n\n\t  const tailBones = _getTailBones(skeleton);\n    // const tailBones = skeleton.bones.filter(bone => bone.children.length === 0);\n\n\t  const Eye_L = _findEye(tailBones, true);\n\t  const Eye_R = _findEye(tailBones, false);\n\t  const Head = _findHead(tailBones);\n\t  const Neck = Head.parent;\n\t  const Chest = Neck.parent;\n\t  const Hips = _findHips(skeleton);\n\t  const Spine = _findSpine(Chest, Hips);\n\t  const Left_shoulder = _findShoulder(tailBones, true);\n\t  const Left_wrist = _findHand(Left_shoulder);\n\t  const Left_elbow = Left_wrist.parent;\n\t  const Left_arm = Left_elbow.parent;\n\t  const Right_shoulder = _findShoulder(tailBones, false);\n\t  const Right_wrist = _findHand(Right_shoulder);\n\t  const Right_elbow = Right_wrist.parent;\n\t  const Right_arm = Right_elbow.parent;\n\t  const Left_ankle = _findFoot(tailBones, true);\n\t  const Left_knee = Left_ankle.parent;\n\t  const Left_leg = Left_knee.parent;\n\t  const Right_ankle = _findFoot(tailBones, false);\n\t  const Right_knee = Right_ankle.parent;\n\t  const Right_leg = Right_knee.parent;\n    const modelBones = {\n\t    Hips,\n\t    Spine,\n\t    Chest,\n\t    Neck,\n\t    Head,\n\t    /* Eye_L,\n\t    Eye_R, */\n\n\t    Left_shoulder,\n\t    Left_arm,\n\t    Left_elbow,\n\t    Left_wrist,\n\t    Left_leg,\n\t    Left_knee,\n\t    Left_ankle,\n\n\t    Right_shoulder,\n\t    Right_arm,\n\t    Right_elbow,\n\t    Right_wrist,\n\t    Right_leg,\n\t    Right_knee,\n\t    Right_ankle,\n\t  };\n\t  this.modelBones = modelBones;\n    /* for (const k in modelBones) {\n      if (!modelBones[k]) {\n        console.warn('missing bone', k);\n      }\n    } */\n\n\t  const armature = _findArmature(Hips);\n\n    const _getEyePosition = () => {\n      if (Eye_L && Eye_R) {\n        return Eye_L.getWorldPosition(new THREE.Vector3())\n          .add(Eye_R.getWorldPosition(new THREE.Vector3()))\n          .divideScalar(2);\n      } else {\n        const neckToHeadDiff = Head.getWorldPosition(new THREE.Vector3()).sub(Neck.getWorldPosition(new THREE.Vector3()));\n        if (neckToHeadDiff.z < 0) {\n          neckToHeadDiff.z *= -1;\n        }\n        return Head.getWorldPosition(new THREE.Vector3()).add(neckToHeadDiff);\n      }\n    };\n    // const eyeDirection = _getEyePosition().sub(Head.getWorldPosition(new Vector3()));\n    const leftArmDirection = Left_wrist.getWorldPosition(new THREE.Vector3()).sub(Head.getWorldPosition(new THREE.Vector3()));\n\t  const flipZ = leftArmDirection.x < 0;//eyeDirection.z < 0;\n    const armatureDirection = new THREE.Vector3(0, 1, 0).applyQuaternion(armature.quaternion);\n    const flipY = armatureDirection.z < -0.5;\n    const legDirection = new THREE.Vector3(0, 0, -1).applyQuaternion(Left_leg.getWorldQuaternion(new THREE.Quaternion()).premultiply(armature.quaternion.clone().inverse()));\n    const flipLeg = legDirection.y < 0.5;\n\t  console.log('flip', flipZ, flipY, flipLeg);\n\t  this.flipZ = flipZ;\n\t  this.flipY = flipY;\n    this.flipLeg = flipLeg;\n\n    const armatureQuaternion = armature.quaternion.clone();\n    const armatureMatrixInverse = new THREE.Matrix4().getInverse(armature.matrixWorld);\n    armature.position.set(0, 0, 0);\n    armature.quaternion.set(0, 0, 0, 1);\n    armature.scale.set(1, 1, 1);\n    armature.updateMatrix();\n\n    Head.traverse(o => {\n      o.savedPosition = o.position.clone();\n      o.savedMatrixWorld = o.matrixWorld.clone();\n    });\n\n    const allHairBones = [];\n    const _recurseAllHairBones = bones => {\n      for (let i = 0; i < bones.length; i++) {\n        const bone = bones[i];\n        if (/hair/i.test(bone.name)) {\n          allHairBones.push(bone);\n        }\n        _recurseAllHairBones(bone.children);\n      }\n    };\n    _recurseAllHairBones(skeleton.bones);\n    const hairBones = tailBones.filter(bone => /hair/i.test(bone.name)).map(bone => {\n      for (; bone; bone = bone.parent) {\n        if (bone.parent === Head) {\n          return bone;\n        }\n      }\n      return null;\n    }).filter(bone => bone);\n    this.allHairBones = allHairBones;\n    this.hairBones = hairBones;\n\n    this.springBoneManager = null;\n    if (options.hair) {\n      new Promise((accept, reject) => {\n        if (!object) {\n          object = {};\n        }\n        if (!object.parser) {\n          object.parser = {\n            json: {\n              extensions: {},\n            },\n          };\n        }\n        if (!object.parser.json.extensions) {\n          object.parser.json.extensions = {};\n        }\n        if (!object.parser.json.extensions.VRM) {\n          object.parser.json.extensions.VRM = {\n            secondaryAnimation: {\n              boneGroups: this.hairBones.map(hairBone => {\n                const boneIndices = [];\n                const _recurse = bone => {\n                  boneIndices.push(this.allHairBones.indexOf(bone));\n                  if (bone.children.length > 0) {\n                    _recurse(bone.children[0]);\n                  }\n                };\n                _recurse(hairBone);\n                return {\n                  comment: hairBone.name,\n                  stiffiness: 0.5,\n                  gravityPower: 0.2,\n                  gravityDir: {\n                    x: 0,\n                    y: -1,\n                    z: 0\n                  },\n                  dragForce: 0.3,\n                  center: -1,\n                  hitRadius: 0.02,\n                  bones: boneIndices,\n                  colliderGroups: [],\n                };\n              }),\n            },\n          };\n          object.parser.getDependency = async (type, nodeIndex) => {\n            if (type === 'node') {\n              return this.allHairBones[nodeIndex];\n            } else {\n              throw new Error('unsupported type');\n            }\n          };\n        }\n\n        new THREE.VRMSpringBoneImporter().import(object)\n          .then(springBoneManager => {\n            this.springBoneManager = springBoneManager;\n          });\n      });\n    }\n\n    const _findFinger = (r, left) => {\n      const fingerTipBone = tailBones\n        .filter(bone => r.test(bone.name) && _findClosestParentBone(bone, bone => bone === modelBones.Left_wrist || bone === modelBones.Right_wrist))\n        .sort((a, b) => {\n          const aName = a.name.replace(r, '');\n          const aLeftBalance = _countCharacters(aName, /l/i) - _countCharacters(aName, /r/i);\n          const bName = b.name.replace(r, '');\n          const bLeftBalance = _countCharacters(bName, /l/i) - _countCharacters(bName, /r/i);\n          if (!left) {\n            return aLeftBalance - bLeftBalance;\n          } else {\n            return bLeftBalance - aLeftBalance;\n          }\n        });\n      const fingerRootBone = fingerTipBone.length > 0 ? _findFurthestParentBone(fingerTipBone[0], bone => r.test(bone.name)) : null;\n      return fingerRootBone;\n    };\n    const fingerBones = {\n      left: {\n        thumb: _findFinger(/thumb/gi, true),\n        index: _findFinger(/index/gi, true),\n        middle: _findFinger(/middle/gi, true),\n        ring: _findFinger(/ring/gi, true),\n        little: _findFinger(/little/gi, true) || _findFinger(/pinky/gi, true),\n      },\n      right: {\n        thumb: _findFinger(/thumb/gi, false),\n        index: _findFinger(/index/gi, false),\n        middle: _findFinger(/middle/gi, false),\n        ring: _findFinger(/ring/gi, false),\n        little: _findFinger(/little/gi, false) || _findFinger(/pinky/gi, false),\n      },\n    };\n    this.fingerBones = fingerBones;\n\n    const preRotations = {};\n    const _ensurePrerotation = k => {\n      const boneName = modelBones[k].name;\n      if (!preRotations[boneName]) {\n        preRotations[boneName] = new THREE.Quaternion();\n      }\n      return preRotations[boneName];\n    };\n    if (flipY) {\n      ['Hips'].forEach(k => {\n        _ensurePrerotation(k).premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI/2));\n      });\n    }\n    if (flipZ) {\n      ['Hips'].forEach(k => {\n        _ensurePrerotation(k).premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI));\n      });\n    }\n    if (flipLeg) {\n      ['Left_leg', 'Right_leg'].forEach(k => {\n        _ensurePrerotation(k).premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.PI/2));\n      });\n    }\n\n    const qrArm = flipZ ? Left_arm : Right_arm;\n    const qrElbow = flipZ ? Left_elbow : Right_elbow;\n    const qrWrist = flipZ ? Left_wrist : Right_wrist;\n    const qr = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI/2)\n      .premultiply(\n        new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().lookAt(\n          new THREE.Vector3(0, 0, 0),\n          qrElbow.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse)\n            .sub(qrArm.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse))\n            .applyQuaternion(armatureQuaternion),\n          new THREE.Vector3(0, 1, 0),\n        ))\n      );\n    const qr2 = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI/2)\n      .premultiply(\n        new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().lookAt(\n          new THREE.Vector3(0, 0, 0),\n          qrWrist.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse)\n            .sub(qrElbow.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse))\n            .applyQuaternion(armatureQuaternion),\n          new THREE.Vector3(0, 1, 0),\n        ))\n      );\n    const qlArm = flipZ ? Right_arm : Left_arm;\n    const qlElbow = flipZ ? Right_elbow : Left_elbow;\n    const qlWrist = flipZ ? Right_wrist : Left_wrist;\n    const ql = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI/2)\n      .premultiply(\n        new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().lookAt(\n          new THREE.Vector3(0, 0, 0),\n          qlElbow.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse)\n            .sub(qlArm.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse))\n            .applyQuaternion(armatureQuaternion),\n          new THREE.Vector3(0, 1, 0),\n        ))\n      );\n    const ql2 = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI/2)\n      .premultiply(\n        new THREE.Quaternion().setFromRotationMatrix(new THREE.Matrix4().lookAt(\n          new THREE.Vector3(0, 0, 0),\n          qlWrist.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse)\n            .sub(qlElbow.getWorldPosition(new THREE.Vector3()).applyMatrix4(armatureMatrixInverse))\n            .applyQuaternion(armatureQuaternion),\n          new THREE.Vector3(0, 1, 0),\n        ))\n      );\n\n    _ensurePrerotation('Right_arm')\n      .multiply(qr.clone().inverse());\n    _ensurePrerotation('Right_elbow')\n      .multiply(qr.clone())\n      .premultiply(qr2.clone().inverse());\n    _ensurePrerotation('Left_arm')\n      .multiply(ql.clone().inverse());\n    _ensurePrerotation('Left_elbow')\n      .multiply(ql.clone())\n      .premultiply(ql2.clone().inverse());\n\n    _ensurePrerotation('Left_leg').premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0),  -Math.PI/2));\n    _ensurePrerotation('Right_leg').premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0),  -Math.PI/2));\n\n    for (const k in preRotations) {\n      preRotations[k].inverse();\n    }\n\t  fixSkeletonZForward(armature.children[0], {\n\t    preRotations,\n\t  });\n\t  model.traverse(o => {\n\t    if (o.isSkinnedMesh) {\n\t      o.bind((o.skeleton.bones.length === skeleton.bones.length && o.skeleton.bones.every((bone, i) => bone === skeleton.bones[i])) ? skeleton : o.skeleton);\n\t    }\n\t  });\n    if (flipY) {\n      modelBones.Hips.quaternion.premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), -Math.PI/2));\n    }\n\t  if (!flipZ) {\n\t    /* ['Left_arm', 'Right_arm'].forEach((name, i) => {\n\t\t    const bone = modelBones[name];\n\t\t    if (bone) {\n\t\t      bone.quaternion.premultiply(new Quaternion().setFromAxisAngle(new Vector3(0, 0, 1), (i === 0 ? 1 : -1) * Math.PI*0.25));\n\t\t    }\n\t\t  }); */\n\t\t} else {\n\t\t  modelBones.Hips.quaternion.premultiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI));\n\t\t}\n    modelBones.Right_arm.quaternion.premultiply(qr.clone().inverse());\n    modelBones.Right_elbow.quaternion\n      .premultiply(qr)\n      .premultiply(qr2.clone().inverse());\n    modelBones.Left_arm.quaternion.premultiply(ql.clone().inverse());\n    modelBones.Left_elbow.quaternion\n      .premultiply(ql)\n      .premultiply(ql2.clone().inverse());\n\t  model.updateMatrixWorld(true);\n\n    Hips.traverse(bone => {\n      bone.initialQuaternion = bone.quaternion.clone();\n    });\n\n\t  const _averagePoint = points => {\n      const result = new THREE.Vector3();\n      for (let i = 0; i < points.length; i++) {\n        result.add(points[i]);\n      }\n      result.divideScalar(points.length);\n      return result;\n\t  };\n    const eyePosition = _getEyePosition();\n\n\t\tthis.poseManager = new PoseManager(this);\n\t\tthis.shoulderTransforms = new ShoulderTransforms(this);\n\t\tthis.legsManager = new LegsManager(this);\n\n    const _getOffset = (bone, parent = bone.parent) => bone.getWorldPosition(new THREE.Vector3()).sub(parent.getWorldPosition(new THREE.Vector3()));\n    this.initializeBonePositions({\n      spine: _getOffset(modelBones.Spine),\n      chest: _getOffset(modelBones.Chest, modelBones.Spine),\n      neck: _getOffset(modelBones.Neck),\n      head: _getOffset(modelBones.Head),\n      eyes: eyePosition.clone().sub(Head.getWorldPosition(new THREE.Vector3())),\n\n      leftShoulder: _getOffset(modelBones.Right_shoulder),\n      leftUpperArm: _getOffset(modelBones.Right_arm),\n      leftLowerArm: _getOffset(modelBones.Right_elbow),\n      leftHand: _getOffset(modelBones.Right_wrist),\n\n      rightShoulder: _getOffset(modelBones.Left_shoulder),\n      rightUpperArm: _getOffset(modelBones.Left_arm),\n      rightLowerArm: _getOffset(modelBones.Left_elbow),\n      rightHand: _getOffset(modelBones.Left_wrist),\n\n      leftUpperLeg: _getOffset(modelBones.Right_leg),\n      leftLowerLeg: _getOffset(modelBones.Right_knee),\n      leftFoot: _getOffset(modelBones.Right_ankle),\n\n      rightUpperLeg: _getOffset(modelBones.Left_leg),\n      rightLowerLeg: _getOffset(modelBones.Left_knee),\n      rightFoot: _getOffset(modelBones.Left_ankle),\n    });\n\n    this.height = eyePosition.sub(_averagePoint([modelBones.Left_ankle.getWorldPosition(new THREE.Vector3()), modelBones.Right_ankle.getWorldPosition(new THREE.Vector3())])).y;\n    this.shoulderWidth = modelBones.Left_arm.getWorldPosition(new THREE.Vector3()).distanceTo(modelBones.Right_arm.getWorldPosition(new THREE.Vector3()));\n    this.leftArmLength = this.shoulderTransforms.leftArm.armLength;\n    this.rightArmLength = this.shoulderTransforms.rightArm.armLength;\n\n\t\tthis.inputs = {\n      hmd: this.poseManager.vrTransforms.head,\n\t\t\tleftGamepad: this.poseManager.vrTransforms.leftHand,\n\t\t\trightGamepad: this.poseManager.vrTransforms.rightHand,\n\t\t};\n    this.inputs.hmd.scaleFactor = 1;\n    this.lastModelScaleFactor = 1;\n\t\tthis.outputs = {\n\t\t\teyes: this.shoulderTransforms.eyes,\n      head: this.shoulderTransforms.head,\n      hips: this.legsManager.hips,\n      spine: this.shoulderTransforms.spine,\n      chest: this.shoulderTransforms.transform,\n      neck: this.shoulderTransforms.neck,\n      leftShoulder: this.shoulderTransforms.leftShoulderAnchor,\n      leftUpperArm: this.shoulderTransforms.leftArm.upperArm,\n      leftLowerArm: this.shoulderTransforms.leftArm.lowerArm,\n      leftHand: this.shoulderTransforms.leftArm.hand,\n      rightShoulder: this.shoulderTransforms.rightShoulderAnchor,\n      rightUpperArm: this.shoulderTransforms.rightArm.upperArm,\n      rightLowerArm: this.shoulderTransforms.rightArm.lowerArm,\n      rightHand: this.shoulderTransforms.rightArm.hand,\n      leftUpperLeg: this.legsManager.leftLeg.upperLeg,\n      leftLowerLeg: this.legsManager.leftLeg.lowerLeg,\n      leftFoot: this.legsManager.leftLeg.foot,\n      rightUpperLeg: this.legsManager.rightLeg.upperLeg,\n      rightLowerLeg: this.legsManager.rightLeg.lowerLeg,\n      rightFoot: this.legsManager.rightLeg.foot,\n\t\t};\n\t\tthis.modelBoneOutputs = {\n\t    Hips: this.outputs.hips,\n\t    Spine: this.outputs.spine,\n\t    Chest: this.outputs.chest,\n\t    Neck: this.outputs.neck,\n\t    Head: this.outputs.head,\n\n\t    Left_shoulder: this.outputs.rightShoulder,\n\t    Left_arm: this.outputs.rightUpperArm,\n\t    Left_elbow: this.outputs.rightLowerArm,\n\t    Left_wrist: this.outputs.rightHand,\n\t    Left_leg: this.outputs.rightUpperLeg,\n\t    Left_knee: this.outputs.rightLowerLeg,\n\t    Left_ankle: this.outputs.rightFoot,\n\n\t    Right_shoulder: this.outputs.leftShoulder,\n\t    Right_arm: this.outputs.leftUpperArm,\n\t    Right_elbow: this.outputs.leftLowerArm,\n\t    Right_wrist: this.outputs.leftHand,\n\t    Right_leg: this.outputs.leftUpperLeg,\n\t    Right_knee: this.outputs.leftLowerLeg,\n\t    Right_ankle: this.outputs.leftFoot,\n\t  };\n\n    this.microphoneWorker = null;\n    this.volume = 0;\n    this.setMicrophoneMediaStream(options.microphoneMediaStream, {\n      muted: options.muted,\n    });\n\n    this.lastTimestamp = Date.now();\n\n    this.shoulderTransforms.Start();\n    this.legsManager.Start();\n\n    this.decapitated = false;\n    if (options.decapitate) {\n      this.decapitate();\n    }\n\t}\n  initializeBonePositions(setups) {\n    this.shoulderTransforms.spine.position.copy(setups.spine);\n    this.shoulderTransforms.transform.position.copy(setups.chest);\n    this.shoulderTransforms.neck.position.copy(setups.neck);\n    this.shoulderTransforms.head.position.copy(setups.head);\n    this.shoulderTransforms.eyes.position.copy(setups.eyes);\n\n    this.shoulderTransforms.leftShoulderAnchor.position.copy(setups.leftShoulder);\n    this.shoulderTransforms.leftArm.upperArm.position.copy(setups.leftUpperArm);\n    this.shoulderTransforms.leftArm.lowerArm.position.copy(setups.leftLowerArm);\n    this.shoulderTransforms.leftArm.hand.position.copy(setups.leftHand);\n\n    this.shoulderTransforms.rightShoulderAnchor.position.copy(setups.rightShoulder);\n    this.shoulderTransforms.rightArm.upperArm.position.copy(setups.rightUpperArm);\n    this.shoulderTransforms.rightArm.lowerArm.position.copy(setups.rightLowerArm);\n    this.shoulderTransforms.rightArm.hand.position.copy(setups.rightHand);\n\n    this.legsManager.leftLeg.upperLeg.position.copy(setups.leftUpperLeg);\n    this.legsManager.leftLeg.lowerLeg.position.copy(setups.leftLowerLeg);\n    this.legsManager.leftLeg.foot.position.copy(setups.leftFoot);\n\n    this.legsManager.rightLeg.upperLeg.position.copy(setups.rightUpperLeg);\n    this.legsManager.rightLeg.lowerLeg.position.copy(setups.rightLowerLeg);\n    this.legsManager.rightLeg.foot.position.copy(setups.rightFoot);\n\n    this.shoulderTransforms.hips.updateMatrixWorld();\n  }\n\tupdate() {\n// return;\n\n   const wasDecapitated = this.decapitated;\n   if (this.springBoneManager && wasDecapitated) {\n    this.undecapitate();\n   }\n\n    const modelScaleFactor = this.inputs.hmd.scaleFactor;\n    if (modelScaleFactor !== this.lastModelScaleFactor) {\n      this.model.scale.set(modelScaleFactor, modelScaleFactor, modelScaleFactor);\n      this.lastModelScaleFactor = modelScaleFactor;\n\n      this.springBoneManager && this.springBoneManager.springBoneGroupList.forEach(springBoneGroup => {\n        springBoneGroup.forEach(springBone => {\n          springBone._worldBoneLength = springBone.bone\n            .localToWorld(localVector.copy(springBone._initialLocalChildPosition))\n            .sub(springBone._worldPosition)\n            .length();\n        });\n      });\n    }\n\n    this.shoulderTransforms.Update();\n    this.legsManager.Update();\n\n\t  for (const k in this.modelBones) {\n      const modelBone = this.modelBones[k];\n      const modelBoneOutput = this.modelBoneOutputs[k];\n\n      if (k === 'Hips') {\n        modelBone.position.copy(modelBoneOutput.position);\n      }\n      modelBone.quaternion.multiplyQuaternions(modelBoneOutput.quaternion, modelBone.initialQuaternion)\n\n      if (k === 'Left_ankle' || k === 'Right_ankle') {\n        modelBone.quaternion.multiply(upRotation);\n      } else if (k === 'Left_wrist') {\n        modelBone.quaternion.multiply(leftRotation); // center\n      } else if (k === 'Right_wrist') {\n        modelBone.quaternion.multiply(rightRotation); // center\n      }\n      modelBone.updateMatrixWorld();\n    }\n\n    const now = Date.now();\n    const timeDiff = Math.min(now - this.lastTimestamp, 1000);\n    this.lastTimestamp = now;\n\n    if (this.options.fingers) {\n      const _processFingerBones = left => {\n        const fingerBones = left ? this.fingerBones.left : this.fingerBones.right;\n        const gamepadInput = left ? this.inputs.rightGamepad : this.inputs.leftGamepad;\n        for (const k in fingerBones) {\n          const fingerBone = fingerBones[k];\n          if (fingerBone) {\n            let setter;\n            if (k === 'thumb') {\n              setter = (q, i) => q.setFromAxisAngle(localVector.set(0, left ? 1 : -1, 0), gamepadInput.grip * Math.PI*(i === 0 ? 0.125 : 0.25));\n            } else if (k === 'index') {\n              setter = (q, i) => q.setFromAxisAngle(localVector.set(0, 0, left ? -1 : 1), gamepadInput.pointer * Math.PI*0.5);\n            } else {\n              setter = (q, i) => q.setFromAxisAngle(localVector.set(0, 0, left ? -1 : 1), gamepadInput.grip * Math.PI*0.5);\n            }\n            let index = 0;\n            fingerBone.traverse(subFingerBone => {\n              setter(subFingerBone.quaternion, index++);\n            });\n          }\n        }\n      };\n      _processFingerBones(true);\n      _processFingerBones(false);\n    }\n\n    if (this.springBoneManager) {\n      this.springBoneManager.lateUpdate(timeDiff / 1000);\n    }\n    if (this.springBoneManager && wasDecapitated) {\n      this.decapitate();\n    }\n\n    if (this.options.visemes) {\n      const aaValue = Math.min(this.volume * 10, 1);\n      const blinkValue = (() => {\n        const nowWindow = now % 2000;\n        if (nowWindow >= 0 && nowWindow < 100) {\n          return nowWindow/100;\n        } else if (nowWindow >= 100 && nowWindow < 200) {\n          return 1 - (nowWindow-100)/100;\n        } else {\n          return 0;\n        }\n      })();\n      this.skinnedMeshes.forEach(o => {\n        const {morphTargetDictionary, morphTargetInfluences} = o;\n        if (morphTargetDictionary && morphTargetInfluences) {\n          let aaMorphTargetIndex = morphTargetDictionary['vrc.v_aa'];\n          if (aaMorphTargetIndex === undefined) {\n            aaMorphTargetIndex = morphTargetDictionary['morphTarget26'];\n          }\n          if (aaMorphTargetIndex !== undefined) {\n            morphTargetInfluences[aaMorphTargetIndex] = aaValue;\n          }\n\n          let blinkLeftMorphTargetIndex = morphTargetDictionary['vrc.blink_left'];\n          if (blinkLeftMorphTargetIndex === undefined) {\n            blinkLeftMorphTargetIndex = morphTargetDictionary['morphTarget16'];\n          }\n          if (blinkLeftMorphTargetIndex !== undefined) {\n            morphTargetInfluences[blinkLeftMorphTargetIndex] = blinkValue;\n          }\n\n          let blinkRightMorphTargetIndex = morphTargetDictionary['vrc.blink_right'];\n          if (blinkRightMorphTargetIndex === undefined) {\n            blinkRightMorphTargetIndex = morphTargetDictionary['morphTarget17'];\n          }\n          if (blinkRightMorphTargetIndex !== undefined) {\n            morphTargetInfluences[blinkRightMorphTargetIndex] = blinkValue;\n          }\n        }\n      });\n    }\n\n    if (this.debugMeshes) {\n      for (const k in this.debugMeshes) {\n        const mesh = this.debugMeshes[k];\n        const output = this.outputs[k];\n        mesh.matrixWorld.multiplyMatrices(this.model.matrixWorld, output.matrixWorld);\n      }\n    }\n\t}\n\n  async setMicrophoneMediaStream(microphoneMediaStream, options = {}) {\n    if (this.microphoneWorker) {\n      this.microphoneWorker.close();\n      this.microphoneWorker = null;\n      setTimeout(() => {\n        this.volume = 0;\n      });\n    }\n    if (microphoneMediaStream) {\n      this.microphoneWorker = new MicrophoneWorker(microphoneMediaStream, options);\n      this.microphoneWorker.addEventListener('volume', e => {\n        this.volume = this.volume*0.8 + e.data*0.2;\n      });\n    }\n  }\n\n  decapitate() {\n    if (!this.decapitated) {\n      this.modelBones.Head.traverse(o => {\n        o.savedPosition.copy(o.position);\n        o.savedMatrixWorld.copy(o.matrixWorld);\n        o.position.set(NaN, NaN, NaN);\n        o.matrixWorld.set(NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN, NaN);\n      });\n      if (this.debugMeshes) {\n        [this.debugMeshes.eyes, this.debugMeshes.head].forEach(mesh => {\n          mesh.visible = false;\n        });\n      }\n      this.decapitated = true;\n    }\n  }\n  undecapitate() {\n    if (this.decapitated) {\n      this.modelBones.Head.traverse(o => {\n        o.position.copy(o.savedPosition);\n        o.matrixWorld.copy(o.savedMatrixWorld);\n      });\n      if (this.debugMeshes) {\n        [this.debugMeshes.eyes, this.debugMeshes.head].forEach(mesh => {\n          mesh.visible = true;\n        });\n      }\n      this.decapitated = false;\n    }\n  }\n\n  destroy() {\n    this.setMicrophoneMediaStream(null);\n  }\n}\nexport default Avatar;"]},"metadata":{},"sourceType":"module"}