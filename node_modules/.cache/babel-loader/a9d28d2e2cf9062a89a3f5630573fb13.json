{"ast":null,"code":"import { Helpers } from './Unity.js';\nconst zeroVector = new THREE.Vector3();\nconst forwardVector = new THREE.Vector3(0, 0, 1);\nconst leftRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI / 2);\nconst rightRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI / 2);\nconst bankLeftRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), Math.PI / 2);\nconst bankRightRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), -Math.PI / 2);\nconst z180Quaternion = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\nconst localVector3 = new THREE.Vector3();\nconst localVector4 = new THREE.Vector3();\nconst localVector5 = new THREE.Vector3();\nconst localVector6 = new THREE.Vector3();\nconst localQuaternion = new THREE.Quaternion();\nconst localQuaternion2 = new THREE.Quaternion();\nconst localQuaternion3 = new THREE.Quaternion();\nconst localEuler = new THREE.Euler();\nconst localMatrix = new THREE.Matrix4();\n\nclass VRArmIK {\n  constructor(arm, shoulder, shoulderPoser, target, left) {\n    this.arm = arm;\n    this.shoulder = shoulder;\n    this.shoulderPoser = shoulderPoser;\n    this.target = target;\n    this.left = left;\n    this.upperArmLength = 0;\n    this.lowerArmLength = 0;\n    this.armLength = 0;\n  }\n\n  Start() {\n    this.upperArmLength = Helpers.getWorldPosition(this.arm.lowerArm, localVector).distanceTo(Helpers.getWorldPosition(this.arm.upperArm, localVector2));\n    this.lowerArmLength = Helpers.getWorldPosition(this.arm.hand, localVector).distanceTo(Helpers.getWorldPosition(this.arm.lowerArm, localVector2));\n    this.armLength = this.upperArmLength + this.lowerArmLength;\n  }\n\n  Update() {\n    Helpers.updateMatrixWorld(this.arm.transform);\n    Helpers.updateMatrixWorld(this.arm.upperArm);\n    const upperArmPosition = Helpers.getWorldPosition(this.arm.upperArm, localVector);\n    const handRotation = this.target.quaternion;\n    const handPosition = localVector2.copy(this.target.position);\n    const shoulderRotation = Helpers.getWorldQuaternion(this.shoulder.transform, localQuaternion);\n    const shoulderRotationInverse = localQuaternion2.copy(shoulderRotation).inverse();\n    const hypotenuseDistance = this.upperArmLength;\n    const directDistance = upperArmPosition.distanceTo(handPosition) / 2;\n    const offsetDistance = hypotenuseDistance > directDistance ? Math.sqrt(hypotenuseDistance * hypotenuseDistance - directDistance * directDistance) : 0;\n    const offsetDirection = localVector3.copy(handPosition).sub(upperArmPosition).normalize().cross(localVector4.set(-1, 0, 0).applyQuaternion(shoulderRotation));\n    const targetEuler = localEuler.setFromQuaternion(localQuaternion3.multiplyQuaternions(handRotation, shoulderRotationInverse).premultiply(z180Quaternion), 'XYZ'); // const targetDirection = new Vector3(0, 0, 1).applyQuaternion(targetLocalRotation);\n\n    if (this.left) {\n      const yFactor = Math.min(Math.max((targetEuler.y + Math.PI * 0.1) / (Math.PI / 2), 0), 1); // const zFactor = Math.min(Math.max((-targetDirection.x + 0.5)/0.25, 0), 1)\n      // const xFactor = Math.min(Math.max((targetDirection.y-0.8)/0.2, 0), 1);\n      // yFactor *= 1-xFactor;\n      // const factor = Math.min(yFactor, 1-xFactor);//Math.min(yFactor, 1-xFactor);\n\n      targetEuler.z = Math.min(Math.max(targetEuler.z, -Math.PI / 2), 0);\n      targetEuler.z = targetEuler.z * (1 - yFactor) + -Math.PI / 2 * yFactor; // targetEuler.z *= 1 - xFactor;\n      // targetEuler.z *= 1 - zFactor;\n    } else {\n      const yFactor = Math.min(Math.max((-targetEuler.y - Math.PI * 0.1) / (Math.PI / 2), 0), 1); // const zFactor = Math.min(Math.max((-targetDirection.x + 0.5)/0.25, 0), 1)\n      // const xFactor = Math.min(Math.max((targetDirection.y-0.8)/0.2, 0), 1);\n      // yFactor *= 1-xFactor;\n      // const factor = Math.min(yFactor, 1-xFactor);//Math.min(yFactor, 1-xFactor);\n\n      targetEuler.z = Math.min(Math.max(targetEuler.z, 0), Math.PI / 2);\n      targetEuler.z = targetEuler.z * (1 - yFactor) + Math.PI / 2 * yFactor; // targetEuler.z *= 1 - xFactor;\n      // targetEuler.z *= 1 - zFactor;\n    }\n\n    offsetDirection.applyQuaternion(shoulderRotationInverse).applyAxisAngle(forwardVector, targetEuler.z).applyQuaternion(shoulderRotation);\n    const elbowPosition = localVector4.copy(upperArmPosition).add(handPosition).divideScalar(2).add(localVector5.copy(offsetDirection).multiplyScalar(offsetDistance));\n    const upVector = localVector5.set(this.left ? -1 : 1, 0, 0).applyQuaternion(shoulderRotation);\n    this.arm.upperArm.quaternion.setFromRotationMatrix(localMatrix.lookAt(zeroVector, localVector6.copy(elbowPosition).sub(upperArmPosition), upVector)).multiply(this.left ? rightRotation : leftRotation).premultiply(Helpers.getWorldQuaternion(this.arm.upperArm.parent, localQuaternion3).inverse());\n    Helpers.updateMatrixMatrixWorld(this.arm.upperArm); // this.arm.lowerArm.position = elbowPosition;\n\n    this.arm.lowerArm.quaternion.setFromRotationMatrix(localMatrix.lookAt(zeroVector, localVector6.copy(handPosition).sub(elbowPosition), upVector)).multiply(this.left ? rightRotation : leftRotation).premultiply(Helpers.getWorldQuaternion(this.arm.lowerArm.parent, localQuaternion3).inverse());\n    Helpers.updateMatrixMatrixWorld(this.arm.lowerArm); // this.arm.hand.position = handPosition;\n\n    this.arm.hand.quaternion.copy(this.target.quaternion).multiply(this.left ? bankRightRotation : bankLeftRotation).premultiply(Helpers.getWorldQuaternion(this.arm.hand.parent, localQuaternion3).inverse());\n    Helpers.updateMatrixMatrixWorld(this.arm.hand);\n  }\n\n}\n\nexport default VRArmIK;","map":{"version":3,"sources":["/Users/chris/Documents/Github/test-react/src/WebXRApps/vrarmik/VRArmIK.js"],"names":["Helpers","zeroVector","THREE","Vector3","forwardVector","leftRotation","Quaternion","setFromAxisAngle","Math","PI","rightRotation","bankLeftRotation","bankRightRotation","z180Quaternion","localVector","localVector2","localVector3","localVector4","localVector5","localVector6","localQuaternion","localQuaternion2","localQuaternion3","localEuler","Euler","localMatrix","Matrix4","VRArmIK","constructor","arm","shoulder","shoulderPoser","target","left","upperArmLength","lowerArmLength","armLength","Start","getWorldPosition","lowerArm","distanceTo","upperArm","hand","Update","updateMatrixWorld","transform","upperArmPosition","handRotation","quaternion","handPosition","copy","position","shoulderRotation","getWorldQuaternion","shoulderRotationInverse","inverse","hypotenuseDistance","directDistance","offsetDistance","sqrt","offsetDirection","sub","normalize","cross","set","applyQuaternion","targetEuler","setFromQuaternion","multiplyQuaternions","premultiply","yFactor","min","max","y","z","applyAxisAngle","elbowPosition","add","divideScalar","multiplyScalar","upVector","setFromRotationMatrix","lookAt","multiply","parent","updateMatrixMatrixWorld"],"mappings":"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","sourcesContent":["import {Helpers} from './Unity.js';\n\nconst zeroVector = new THREE.Vector3();\nconst forwardVector = new THREE.Vector3(0, 0, 1);\nconst leftRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI/2);\nconst rightRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), -Math.PI/2);\nconst bankLeftRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), Math.PI/2);\nconst bankRightRotation = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), -Math.PI/2);\nconst z180Quaternion = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\n\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\nconst localVector3 = new THREE.Vector3();\nconst localVector4 = new THREE.Vector3();\nconst localVector5 = new THREE.Vector3();\nconst localVector6 = new THREE.Vector3();\nconst localQuaternion = new THREE.Quaternion();\nconst localQuaternion2 = new THREE.Quaternion();\nconst localQuaternion3 = new THREE.Quaternion();\nconst localEuler = new THREE.Euler();\nconst localMatrix = new THREE.Matrix4();\n\n\tclass VRArmIK\n\t{\n\t\tconstructor(arm, shoulder, shoulderPoser, target, left) {\n\t\t\tthis.arm = arm;\n\t\t\tthis.shoulder = shoulder;\n\t\t\tthis.shoulderPoser = shoulderPoser;\n\t\t\tthis.target = target;\n\t\t\tthis.left = left;\n\n\t\t\tthis.upperArmLength = 0;\n\t\t\tthis.lowerArmLength = 0;\n\t\t\tthis.armLength = 0;\n    }\n\n\t\tStart()\n\t\t{\n\t\t\tthis.upperArmLength = Helpers.getWorldPosition(this.arm.lowerArm, localVector).distanceTo(Helpers.getWorldPosition(this.arm.upperArm, localVector2));\n\t\t\tthis.lowerArmLength = Helpers.getWorldPosition(this.arm.hand, localVector).distanceTo(Helpers.getWorldPosition(this.arm.lowerArm, localVector2));\n\t\t\tthis.armLength = this.upperArmLength + this.lowerArmLength;\n\t\t}\n\n\t\tUpdate()\n\t\t{\n\t\t\tHelpers.updateMatrixWorld(this.arm.transform);\n\t\t\tHelpers.updateMatrixWorld(this.arm.upperArm);\n\n\t\t\tconst upperArmPosition = Helpers.getWorldPosition(this.arm.upperArm, localVector);\n      const handRotation = this.target.quaternion;\n      const handPosition = localVector2.copy(this.target.position);\n\n      const shoulderRotation = Helpers.getWorldQuaternion(this.shoulder.transform, localQuaternion);\n      const shoulderRotationInverse = localQuaternion2.copy(shoulderRotation).inverse();\n\n      const hypotenuseDistance = this.upperArmLength;\n\t    const directDistance = upperArmPosition.distanceTo(handPosition) / 2;\n      const offsetDistance = hypotenuseDistance > directDistance ? Math.sqrt(hypotenuseDistance*hypotenuseDistance - directDistance*directDistance) : 0;\n      const offsetDirection = localVector3.copy(handPosition).sub(upperArmPosition)\n        .normalize()\n        .cross(localVector4.set(-1, 0, 0).applyQuaternion(shoulderRotation));\n\n      const targetEuler = localEuler.setFromQuaternion(\n      \tlocalQuaternion3\n      \t  .multiplyQuaternions(handRotation, shoulderRotationInverse)\n      \t  .premultiply(z180Quaternion),\n      \t'XYZ'\n      );\n      // const targetDirection = new Vector3(0, 0, 1).applyQuaternion(targetLocalRotation);\n      if (this.left) {\n    \t\tconst yFactor = Math.min(Math.max((targetEuler.y+Math.PI*0.1)/(Math.PI/2), 0), 1);\n    \t\t// const zFactor = Math.min(Math.max((-targetDirection.x + 0.5)/0.25, 0), 1)\n    \t\t// const xFactor = Math.min(Math.max((targetDirection.y-0.8)/0.2, 0), 1);\n    \t\t// yFactor *= 1-xFactor;\n    \t\t// const factor = Math.min(yFactor, 1-xFactor);//Math.min(yFactor, 1-xFactor);\n    \t\ttargetEuler.z = Math.min(Math.max(targetEuler.z, -Math.PI/2), 0);\n    \t\ttargetEuler.z = (targetEuler.z * (1 - yFactor)) + (-Math.PI/2 * yFactor);\n    \t\t// targetEuler.z *= 1 - xFactor;\n    \t\t// targetEuler.z *= 1 - zFactor;\n      } else {\n      \tconst yFactor = Math.min(Math.max((-targetEuler.y-Math.PI*0.1)/(Math.PI/2), 0), 1);\n    \t\t// const zFactor = Math.min(Math.max((-targetDirection.x + 0.5)/0.25, 0), 1)\n    \t\t// const xFactor = Math.min(Math.max((targetDirection.y-0.8)/0.2, 0), 1);\n    \t\t// yFactor *= 1-xFactor;\n    \t\t// const factor = Math.min(yFactor, 1-xFactor);//Math.min(yFactor, 1-xFactor);\n    \t\ttargetEuler.z = Math.min(Math.max(targetEuler.z, 0), Math.PI/2);\n    \t\ttargetEuler.z = (targetEuler.z * (1 - yFactor)) + (Math.PI/2 * yFactor);\n    \t\t// targetEuler.z *= 1 - xFactor;\n    \t\t// targetEuler.z *= 1 - zFactor;\n      }\n      offsetDirection\n        .applyQuaternion(shoulderRotationInverse)\n        .applyAxisAngle(forwardVector, targetEuler.z)\n        .applyQuaternion(shoulderRotation);\n\n      const elbowPosition = localVector4.copy(upperArmPosition).add(handPosition).divideScalar(2)\n        .add(localVector5.copy(offsetDirection).multiplyScalar(offsetDistance));\n      const upVector = localVector5.set(this.left ? -1 : 1, 0, 0).applyQuaternion(shoulderRotation);\n      this.arm.upperArm.quaternion.setFromRotationMatrix(\n      \tlocalMatrix.lookAt(\n\t      \tzeroVector,\n\t      \tlocalVector6.copy(elbowPosition).sub(upperArmPosition),\n\t      \tupVector\n\t      )\n      )\n        .multiply(this.left ? rightRotation : leftRotation)\n        .premultiply(Helpers.getWorldQuaternion(this.arm.upperArm.parent, localQuaternion3).inverse());\n      Helpers.updateMatrixMatrixWorld(this.arm.upperArm);\n\n      // this.arm.lowerArm.position = elbowPosition;\n      this.arm.lowerArm.quaternion.setFromRotationMatrix(\n        localMatrix.lookAt(\n\t      \tzeroVector,\n\t      \tlocalVector6.copy(handPosition).sub(elbowPosition),\n\t      \tupVector\n\t      )\n      )\n        .multiply(this.left ? rightRotation : leftRotation)\n        .premultiply(Helpers.getWorldQuaternion(this.arm.lowerArm.parent, localQuaternion3).inverse());\n      Helpers.updateMatrixMatrixWorld(this.arm.lowerArm);\n\n      // this.arm.hand.position = handPosition;\n      this.arm.hand.quaternion.copy(this.target.quaternion)\n        .multiply(this.left ? bankRightRotation : bankLeftRotation)\n        .premultiply(Helpers.getWorldQuaternion(this.arm.hand.parent, localQuaternion3).inverse());\n      Helpers.updateMatrixMatrixWorld(this.arm.hand);\n\t\t}\n\t}\n\nexport default VRArmIK;\n"]},"metadata":{},"sourceType":"module"}