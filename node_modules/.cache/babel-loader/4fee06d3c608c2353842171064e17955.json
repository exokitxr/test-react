{"ast":null,"code":"import _slicedToArray from \"/Users/chris/Documents/Github/test-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/* eslint-disable */\nimport React from 'react';\nimport { OrbitControls } from './OrbitControls.js';\nimport * as THREE from 'three';\nimport './webxr-polyfill.module.js';\nimport './HelioWebXRPolyfill.js'; // import avatarModels from 'https://avatar-models.exokit.org/avatar-models.js'\n// import ModelLoader from 'https://model-loader.exokit.org/model-loader.js';\n\nimport Avatar from './avatars.js'; // import {XRChannelConnection} from 'https://multiplayer.exokit.org/multiplayer.js';\n\nconst AvatarsApp = props => {\n  const peerPoseUpdateRate = 50;\n  const walkSpeed = 0.0015;\n  const floorPlane = new THREE.Plane().setFromNormalAndCoplanarPoint(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 0));\n  const localVector = new THREE.Vector3();\n  const localVector2 = new THREE.Vector3();\n  const localVector3 = new THREE.Vector3();\n  const localVector4 = new THREE.Vector3();\n  const localVector5 = new THREE.Vector3();\n  const localQuaternion = new THREE.Quaternion();\n  const localQuaternion2 = new THREE.Quaternion();\n  const localMatrix = new THREE.Matrix4();\n  const localEuler = new THREE.Euler();\n  const localRay = new THREE.Ray();\n  const z180Quaternion = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\n  {\n    const avatarModelsEl = document.getElementById('avatar-models');\n    const noneAAvatar = document.createElement('a');\n    noneAAvatar.classList.add('a-avatar');\n    noneAAvatar.innerText = 'none';\n    avatarModelsEl.appendChild(noneAAvatar);\n\n    for (let i = 0; i < avatarModels.length; i++) {\n      const avatarmodel = avatarModels[i];\n      const aAvatar = document.createElement('a');\n      aAvatar.classList.add('a-avatar');\n      aAvatar.setAttribute('href', \"https://avatar-models.exokit.org/\".concat(avatarmodel.url));\n      aAvatar.innerText = avatarmodel.label;\n      avatarModelsEl.appendChild(aAvatar);\n    }\n  }\n  const scene = new THREE.Scene();\n  const container = new THREE.Object3D();\n  scene.add(container);\n  const camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\n  camera.position.y = 1.5;\n  camera.position.z = 2; // camera.rotation.y = Math.PI;\n\n  const ambientLight = new THREE.AmbientLight(0x808080);\n  scene.add(ambientLight);\n  const directionalLight = new THREE.DirectionalLight(0xFFFFFF, 1);\n  directionalLight.position.set(0.5, 1, 0.5);\n  scene.add(directionalLight);\n  /* const directionalLight2 = new THREE.DirectionalLight(0xFFFFFF, 1);\n  directionalLight2.position.set(0, -0.25, -0.25);\n  scene.add(directionalLight2); */\n\n  const gridHelper = new THREE.GridHelper(10, 10);\n  container.add(gridHelper);\n\n  const _makeTextMesh = (s = '', color = 0x000000, size = 1) => {\n    // create a geometry of packed bitmap glyphs,\n    // word wrapped to 300px and right-aligned\n    var geometry = createTextGeometry({\n      width: Infinity,\n      font: fontJson\n    }); // change text and other options as desired\n    // the options sepcified in constructor will\n    // be used as defaults\n\n    geometry.update(s); // the resulting layout has metrics and bounds\n    // console.log(geometry.layout.height)\n    // console.log(geometry.layout.descender)\n\n    var material = new THREE.RawShaderMaterial(createSDFShader({\n      map: fontTexture,\n      transparent: true,\n      color,\n      // color: palette[Math.floor(Math.random() * palette.length)]\n      // negate: false,\n      side: THREE.DoubleSide\n    }));\n    const scaleFactor = 0.002 * size;\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.set(0, -geometry.layout.lineHeight * 0.001, 0);\n    mesh.scale.set(scaleFactor, -scaleFactor, -scaleFactor);\n\n    mesh.getText = () => s;\n\n    mesh.setText = newS => {\n      if (newS !== s) {\n        s = newS;\n        geometry.update(s);\n      }\n    };\n\n    return mesh;\n  };\n\n  const teleportGeometry = new THREE.TorusBufferGeometry(0.5, 0.15, 3, 5).applyMatrix(new THREE.Matrix4().makeRotationX(-(Math.PI / 2))).applyMatrix(new THREE.Matrix4().makeRotationY(1 / 20 * (Math.PI * 2)));\n  const teleportMaterial = new THREE.MeshBasicMaterial({\n    color: 0x44c2ff\n  });\n\n  const _makeTeleportMesh = () => {\n    const geometry = teleportGeometry;\n    const material = teleportMaterial;\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.visible = false;\n    mesh.frustumCulled = false;\n    return mesh;\n  };\n\n  const teleportMeshes = [_makeTeleportMesh(), _makeTeleportMesh()];\n  container.add(teleportMeshes[0]);\n  container.add(teleportMeshes[1]);\n\n  const _patchModel = object => {\n    object.scene.traverse(o => {\n      if (o.isMesh) {\n        o.frustumCulled = false;\n\n        if (o.material.opacity === 0) {\n          o.material.opacity = 1;\n        }\n      }\n    });\n  };\n\n  const _loadModelUrl = async (url, filename) => {\n    const model = await ModelLoader.loadModelUrl(url, filename);\n\n    _patchModel(model);\n\n    return model;\n  };\n\n  const _bindUploadFileButton = inputFileEl => {\n    inputFileEl.addEventListener('change', async e => {\n      const files = e.target.files;\n\n      if (files.length === 1) {\n        const _files = _slicedToArray(files, 1),\n              file = _files[0];\n\n        const dataUrl = URL.createObjectURL(file);\n        const model = await _loadModelUrl(dataUrl, file.name);\n\n        _setLocalModel(model); // modelUrl = dataUrl;\n\n      }\n\n      const parentNode = inputFileEl.parentNode;\n      parentNode.removeChild(inputFileEl);\n      const newInputFileEl = document.createElement('input');\n      newInputFileEl.type = 'file';\n      newInputFileEl.id = 'upload-file-button';\n      newInputFileEl.style.display = 'none';\n      parentNode.appendChild(newInputFileEl);\n\n      _bindUploadFileButton(newInputFileEl);\n    });\n  };\n\n  _bindUploadFileButton(document.getElementById('upload-file-button'));\n\n  window.document.addEventListener('dragover', e => {\n    e.preventDefault();\n  });\n  window.document.addEventListener('drop', async e => {\n    e.preventDefault();\n\n    if (e.dataTransfer.items.length !== 1) {\n      return;\n    }\n\n    for (var i = 0; i < e.dataTransfer.items.length; i++) {\n      if (e.dataTransfer.items[i].kind === 'file') {\n        const file = e.dataTransfer.items[i].getAsFile(); // console.log('got file', e.dataTransfer.items[i], file);\n\n        const dataUrl = URL.createObjectURL(file);\n        const model = await _loadModelUrl(dataUrl, file.name);\n\n        _setLocalModel(model); // modelUrl = dataUrl;\n\n      }\n    }\n  });\n  const renderer = new THREE.WebGLRenderer({\n    // canvas: document.getElementById('canvas'),\n    // alpha: true,\n    antialias: true\n  }); // console.log('set size', window.innerWidth, window.innerHeight);\n\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.setPixelRatio(window.devicePixelRatio);\n  renderer.sortObjects = false;\n  document.getElementById('iframe-wrapper').appendChild(renderer.domElement);\n  const orbitControls = new THREE.OrbitControls(camera, renderer.domElement);\n  orbitControls.screenSpacePanning = true;\n  orbitControls.enableMiddleZoom = false;\n  orbitControls.update();\n  const aAvatars = Array.from(document.querySelectorAll('.a-avatar'));\n\n  for (let i = 0; i < aAvatars.length; i++) {\n    const aAvatar = aAvatars[i];\n    aAvatar.addEventListener('click', async e => {\n      e.preventDefault();\n      const href = aAvatar.href;\n\n      if (href) {\n        _setLocalModel((await _loadModelUrl(href)));\n      } else {\n        _setLocalModel(null);\n      }\n\n      modelUrl = href;\n\n      _sendAllPeerConnections(JSON.stringify({\n        method: 'model',\n        url: modelUrl\n      }));\n    });\n  }\n\n  let fontJson, fontTexture;\n  const fontPromise = Promise.all([fetch('DejaVu-sdf.json').then(res => res.json()), new Promise((accept, reject) => {\n    new THREE.TextureLoader().load('DejaVu-sdf.png', accept);\n  })]).then(results => {\n    fontJson = results[0];\n    fontTexture = results[1];\n  });\n  const buttonSize = new THREE.Vector3(1, 0.1 * 0.9, 0.1);\n  const buttonGeometry = new THREE.BoxBufferGeometry(buttonSize.x, buttonSize.y, buttonSize.z);\n  const colors = {\n    normal: 0x5c6bc0,\n    highlight: 0x303f9f\n  };\n\n  const mirrorMesh = (() => {\n    const mirrorWidth = 3;\n    const mirrorHeight = 2;\n    const geometry = new THREE.PlaneBufferGeometry(mirrorWidth, mirrorHeight).applyMatrix(new THREE.Matrix4().makeTranslation(0, 1, 0));\n    const mesh = new THREE.Reflector(geometry, {\n      clipBias: 0.003,\n      textureWidth: 1024 * window.devicePixelRatio,\n      textureHeight: 2048 * window.devicePixelRatio,\n      color: 0x889999,\n      addColor: 0x300000,\n      recursion: 1,\n      transparent: true\n    });\n    mesh.position.set(0, 0, -1);\n    const borderMesh = new THREE.Mesh(new THREE.BoxBufferGeometry(mirrorWidth + 0.1, mirrorHeight + 0.1, 0.1).applyMatrix(new THREE.Matrix4().makeTranslation(0, 1, -0.1 / 2 - 0.01)), new THREE.MeshPhongMaterial({\n      color: 0x5c6bc0\n    }));\n    mesh.add(borderMesh);\n    const buttonMeshes = aAvatars.map((aAvatar, i) => {\n      const geometry = buttonGeometry;\n      const material = new THREE.MeshPhongMaterial({\n        color: colors.normal\n      });\n      const mesh = new THREE.Mesh(geometry, material);\n      mesh.position.set(-2, 2 - 0.1 / 2 - i * 0.1, 0);\n      mesh.frustumCulled = false;\n      fontPromise.then(() => {\n        const textMesh = _makeTextMesh(aAvatar.innerText, 0xFFFFFF);\n\n        textMesh.position.x = -0.45;\n        textMesh.position.y = -0.02;\n        textMesh.position.z = 0.06;\n        mesh.add(textMesh);\n      });\n      mesh.box = new THREE.Box3();\n      return mesh;\n    });\n\n    for (let i = 0; i < buttonMeshes.length; i++) {\n      mesh.add(buttonMeshes[i]);\n    }\n\n    mesh.buttonMeshes = buttonMeshes;\n\n    mesh.update = () => {\n      for (let i = 0; i < buttonMeshes.length; i++) {\n        const buttonMesh = buttonMeshes[i];\n        buttonMesh.box.setFromCenterAndSize(buttonMesh.getWorldPosition(new THREE.Vector3()), buttonSize.clone().multiply(buttonMesh.getWorldScale(new THREE.Vector3())));\n      }\n    };\n\n    mesh.getButtonIntersectionIndex = position => {\n      for (let i = 0; i < buttonMeshes.length; i++) {\n        if (buttonMeshes[i].box.containsPoint(position)) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n\n    mesh.onBeforeRender2 = () => {\n      if (rig) {\n        rig.undecapitate();\n      }\n    };\n\n    mesh.onAfterRender2 = () => {\n      if (rig && session) {\n        rig.decapitate();\n      }\n    };\n\n    return mesh;\n  })();\n\n  container.add(mirrorMesh);\n  const userHeight = 1.7;\n\n  const _getHeightFactor = rigHeight => rigHeight / userHeight;\n\n  let rig = null;\n  let modelUrl = '';\n  let heightFactor = 0;\n\n  const _setLocalModel = newModel => {\n    if (rig) {\n      container.remove(rig.model);\n      rig.destroy();\n      rig = null;\n    }\n\n    rig = new Avatar(newModel, {\n      fingers: true,\n      hair: true,\n      visemes: true,\n      // decapitate: true,\n      microphoneMediaStream,\n      debug: !newModel\n    });\n    container.add(rig.model);\n    window.model = newModel;\n    heightFactor = _getHeightFactor(rig.height);\n    container.scale.set(1, 1, 1).divideScalar(heightFactor);\n  };\n\n  const lastPresseds = [false, false];\n  const lastBs = [false, false];\n  const lastPads = [false, false];\n  const lastPositions = [new THREE.Vector3(), new THREE.Vector3()];\n  const startGripPositions = [new THREE.Vector3(), new THREE.Vector3()];\n  const startSceneMatrix = new THREE.Matrix4();\n  let startModelScale = 1;\n  const dateOffset = Math.floor(Math.random() * 60 * 1000);\n\n  const realDateNow = (now => () => dateOffset + now())(Date.now);\n\n  let lastTimestamp = Date.now();\n\n  function animate(timestamp, frame, referenceSpace) {\n    const now = Date.now();\n    const timeDiff = now - lastTimestamp;\n\n    if (rig) {\n      if (renderer.vr.enabled) {\n        const vrCameras = renderer.vr.getCamera(camera).cameras;\n        const vrCamera = vrCameras[0];\n        const vrCamera2 = vrCameras[1];\n        vrCamera.matrixWorld.decompose(vrCamera.position, vrCamera.quaternion, vrCamera.scale);\n        vrCamera2.matrixWorld.decompose(vrCamera2.position, vrCamera2.quaternion, vrCamera2.scale);\n        vrCamera.position.add(vrCamera2.position).divideScalar(2);\n        const _session = session,\n              inputSources = _session.inputSources;\n        const gamepads = navigator.getGamepads();\n        rig.inputs.hmd.position.copy(vrCamera.position).sub(container.position).multiplyScalar(heightFactor);\n        rig.inputs.hmd.quaternion.copy(vrCamera.quaternion);\n\n        const _getGamepad = i => {\n          const handedness = i === 0 ? 'left' : 'right';\n          const inputSource = inputSources.find(inputSource => inputSource.handedness === handedness);\n          let pose, gamepad;\n\n          if (inputSource && (pose = frame.getPose(inputSource.gripSpace, referenceSpace)) && (gamepad = inputSource.gamepad || gamepads[i])) {\n            const _pose = pose,\n                  transform = _pose.transform;\n            const position = transform.position,\n                  orientation = transform.orientation,\n                  matrix = transform.matrix;\n\n            if (position) {\n              // new WebXR api\n              const rawP = localVector.copy(position);\n              const p = localVector2.copy(rawP).sub(container.position).multiplyScalar(heightFactor);\n              const q = localQuaternion.copy(orientation);\n              const pressed = gamepad.buttons[0].pressed;\n              const lastPressed = lastPresseds[i];\n              const pointer = gamepad.buttons[0].value;\n              const grip = gamepad.buttons[1].value;\n              const pad = gamepad.axes[1] <= -0.5 || gamepad.axes[3] <= -0.5;\n              const padX = gamepad.axes[0] !== 0 ? gamepad.axes[0] : gamepad.axes[2];\n              const padY = gamepad.axes[1] !== 0 ? gamepad.axes[1] : gamepad.axes[3];\n              const stick = !!gamepad.buttons[3] && gamepad.buttons[3].pressed;\n              const a = !!gamepad.buttons[4] && gamepad.buttons[4].pressed;\n              const b = !!gamepad.buttons[5] && gamepad.buttons[5].pressed;\n              const lastB = lastBs[i];\n              return {\n                rawPosition: rawP,\n                position: p,\n                quaternion: q,\n                pressed,\n                lastPressed,\n                pointer,\n                grip,\n                pad,\n                padX,\n                padY,\n                stick,\n                a,\n                b,\n                lastB\n              };\n            } else if (matrix) {\n              // old WebXR api\n              const rawP = localVector;\n              const p = localVector2;\n              const q = localQuaternion;\n              const s = localVector3;\n              localMatrix.fromArray(transform.matrix).decompose(rawP, q, s);\n              p.copy(rawP).sub(container.position).multiplyScalar(heightFactor);\n              const pressed = gamepad.buttons[0].pressed;\n              const lastPressed = lastPresseds[i];\n              const pointer = gamepad.buttons[0].value;\n              const grip = gamepad.buttons[1].value;\n              const pad = gamepad.axes[1] <= -0.5 || gamepad.axes[3] <= -0.5;\n              const padX = gamepad.axes[0] !== 0 ? gamepad.axes[0] : gamepad.axes[2];\n              const padY = gamepad.axes[1] !== 0 ? gamepad.axes[1] : gamepad.axes[3];\n              const stick = !!gamepad.buttons[3] && gamepad.buttons[3].pressed;\n              const a = !!gamepad.buttons[4] && gamepad.buttons[4].pressed;\n              const b = !!gamepad.buttons[5] && gamepad.buttons[5].pressed;\n              const lastB = lastBs[i];\n              return {\n                rawPosition: rawP,\n                position: p,\n                quaternion: q,\n                pressed,\n                lastPressed,\n                pointer,\n                grip,\n                pad,\n                padX,\n                padY,\n                stick,\n                a,\n                b,\n                lastB\n              };\n            } else {\n              return null;\n            }\n          } else {\n            return null;\n          }\n        };\n\n        const _updateTeleportMesh = (i, pad, lastPad, position, quaternion, padX, padY, stick) => {\n          const teleportMesh = teleportMeshes[i];\n          teleportMesh.visible = false;\n\n          if (pad) {\n            localVector.copy(vrCamera.position).applyMatrix4(localMatrix.getInverse(container.matrix));\n            localEuler.setFromQuaternion(quaternion, 'YXZ');\n\n            for (let i = 0; i < 20; i++, localVector.add(localVector2), localEuler.x = Math.max(localEuler.x - Math.PI * 0.07, -Math.PI / 2)) {\n              localRay.set(localVector, localVector2.set(0, 0, -1).applyQuaternion(localQuaternion.setFromEuler(localEuler)));\n              const intersection = localRay.intersectPlane(floorPlane, localVector3);\n\n              if (intersection && intersection.distanceTo(localRay.origin) <= 1) {\n                teleportMesh.position.copy(intersection);\n                localEuler.setFromQuaternion(localQuaternion, 'YXZ');\n                localEuler.x = 0;\n                localEuler.z = 0;\n                teleportMesh.quaternion.setFromEuler(localEuler);\n                teleportMesh.visible = true;\n                break;\n              }\n            }\n          } else if (lastPad) {\n            localVector.copy(teleportMesh.position).applyMatrix4(container.matrix).sub(vrCamera.position);\n            localVector.y = 0;\n            container.position.sub(localVector);\n          }\n\n          if (padX !== 0 || padY !== 0) {\n            localVector.set(padX, 0, padY);\n            const moveLength = localVector.length();\n\n            if (moveLength > 1) {\n              localVector.divideScalar(moveLength);\n            }\n\n            const hmdEuler = localEuler.setFromQuaternion(rig.inputs.hmd.quaternion, 'YXZ');\n            localEuler.x = 0;\n            localEuler.z = 0;\n            container.position.sub(localVector.multiplyScalar(walkSpeed * timeDiff * (stick ? 3 : 1) * rig.height).applyEuler(hmdEuler));\n          }\n        };\n\n        const wasLastBd = lastBs[0] && lastBs[1];\n\n        const lg = _getGamepad(1);\n\n        let li = -1;\n\n        if (lg) {\n          const rawPosition = lg.rawPosition,\n                position = lg.position,\n                quaternion = lg.quaternion,\n                pressed = lg.pressed,\n                lastPressed = lg.lastPressed,\n                pointer = lg.pointer,\n                grip = lg.grip,\n                pad = lg.pad,\n                b = lg.b;\n          rig.inputs.leftGamepad.quaternion.copy(quaternion);\n          rig.inputs.leftGamepad.position.copy(position);\n          rig.inputs.leftGamepad.pointer = pointer;\n          rig.inputs.leftGamepad.grip = grip;\n          li = mirrorMesh.getButtonIntersectionIndex(position);\n\n          if (pressed && !lastPressed) {\n            if (li !== -1) {\n              aAvatars[li].click();\n            }\n          }\n\n          _updateTeleportMesh(0, pad, lastPads[0], position, quaternion, 0, 0, false);\n\n          lastPresseds[0] = pressed;\n          lastPads[0] = pad;\n          lastBs[0] = b;\n          lastPositions[0].copy(rawPosition);\n        }\n\n        const rg = _getGamepad(0);\n\n        let ri = -1;\n\n        if (rg) {\n          const rawPosition = rg.rawPosition,\n                position = rg.position,\n                quaternion = rg.quaternion,\n                pressed = rg.pressed,\n                lastPressed = rg.lastPressed,\n                pointer = rg.pointer,\n                grip = rg.grip,\n                pad = rg.pad,\n                padX = rg.padX,\n                padY = rg.padY,\n                stick = rg.stick,\n                b = rg.b;\n          rig.inputs.rightGamepad.quaternion.copy(quaternion);\n          rig.inputs.rightGamepad.position.copy(position);\n          rig.inputs.rightGamepad.pointer = pointer;\n          rig.inputs.rightGamepad.grip = grip;\n          ri = mirrorMesh.getButtonIntersectionIndex(position);\n\n          if (pressed && !lastPressed) {\n            if (ri !== -1) {\n              aAvatars[ri].click();\n            }\n          }\n\n          _updateTeleportMesh(1, false, false, position, quaternion, padX, padY, stick);\n\n          lastPresseds[1] = pressed;\n          lastPads[1] = pad;\n          lastBs[1] = b;\n          lastPositions[1].copy(rawPosition);\n        }\n\n        const _startScale = () => {\n          for (let i = 0; i < startGripPositions.length; i++) {\n            startGripPositions[i].copy(lastPositions[i]);\n          }\n\n          startSceneMatrix.copy(container.matrix);\n          startModelScale = rig ? rig.inputs.hmd.scaleFactor : 1;\n        };\n\n        const _processScale = () => {\n          const startDistance = startGripPositions[0].distanceTo(startGripPositions[1]);\n          const currentDistance = lastPositions[0].distanceTo(lastPositions[1]);\n          const scaleFactor = currentDistance / startDistance;\n          let startGripPosition = localVector3.copy(startGripPositions[0]).add(startGripPositions[1]).divideScalar(2);\n          let currentGripPosition = localVector4.copy(lastPositions[0]).add(lastPositions[1]).divideScalar(2);\n          startGripPosition.applyMatrix4(localMatrix.getInverse(startSceneMatrix));\n          currentGripPosition.applyMatrix4(localMatrix\n          /*.getInverse(startSceneMatrix)*/\n          );\n          const positionDiff = localVector5.copy(currentGripPosition).sub(startGripPosition);\n          container.matrix.copy(startSceneMatrix).multiply(localMatrix.makeTranslation(currentGripPosition.x, currentGripPosition.y, currentGripPosition.z)).multiply(localMatrix.makeScale(scaleFactor, scaleFactor, scaleFactor)).multiply(localMatrix.makeTranslation(-currentGripPosition.x, -currentGripPosition.y, -currentGripPosition.z)).multiply(localMatrix.makeTranslation(positionDiff.x, positionDiff.y, positionDiff.z)).decompose(container.position, container.quaternion, container.scale);\n\n          if (rig) {\n            rig.inputs.hmd.scaleFactor = startModelScale / scaleFactor;\n          } // _startScale();\n\n        };\n\n        const isLastBd = lastBs[0] && lastBs[1];\n\n        if (!wasLastBd && isLastBd) {\n          _startScale();\n        } else if (isLastBd) {\n          _processScale();\n        }\n\n        for (let i = 0; i < mirrorMesh.buttonMeshes.length; i++) {\n          mirrorMesh.buttonMeshes[i].material.color.setHex(i === li || i === ri ? colors.highlight : colors.normal);\n        }\n\n        rig.update();\n      } else if (controlsBound) {// defer\n      } else {\n        const positionOffset = Math.sin(realDateNow() % 10000 / 10000 * Math.PI * 2) * 2;\n        const positionOffset2 = -Math.sin(realDateNow() % 5000 / 5000 * Math.PI * 2) * 1;\n        const standFactor = rig.height - 0.1 * rig.height + Math.sin(realDateNow() % 2000 / 2000 * Math.PI * 2) * 0.2 * rig.height;\n        const rotationAngle = realDateNow() % 5000 / 5000 * Math.PI * 2; // rig.inputs.hmd.position.set(positionOffset, 0.6 + standFactor, 0);\n\n        rig.inputs.hmd.position.set(positionOffset, standFactor, positionOffset2);\n        rig.inputs.hmd.quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), rotationAngle).multiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.sin(realDateNow() % 2000 / 2000 * Math.PI * 2) * Math.PI * 0.2)).multiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), Math.sin(realDateNow() % 2000 / 2000 * Math.PI * 2) * Math.PI * 0.25));\n        rig.inputs.rightGamepad.quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), rotationAngle); // .multiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.sin((realDateNow()%5000)/5000*Math.PI*2)*Math.PI*0.6));\n\n        rig.inputs.rightGamepad.position.set(positionOffset, rig.height * 0.7 + Math.sin(realDateNow() % 2000 / 2000 * Math.PI * 2) * 0.1, positionOffset2).add(new THREE.Vector3(-rig.shoulderWidth / 2, 0, -0.2).applyQuaternion(rig.inputs.rightGamepad.quaternion));\n        /*.add(\n         new THREE.Vector3(-0.1, 0, -1).normalize().multiplyScalar(rig.rightArmLength*0.4).applyQuaternion(rig.inputs.rightGamepad.quaternion)\n        ); */\n\n        rig.inputs.leftGamepad.quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), rotationAngle);\n        rig.inputs.leftGamepad.position.set(positionOffset, rig.height * 0.7, positionOffset2).add(new THREE.Vector3(rig.shoulderWidth / 2, 0, -0.2).applyQuaternion(rig.inputs.leftGamepad.quaternion));\n        /*.add(\n         new THREE.Vector3(0.1, 0, -1).normalize().multiplyScalar(rig.leftArmLength*0.4).applyQuaternion(rig.inputs.leftGamepad.quaternion)\n        );*/\n\n        rig.inputs.leftGamepad.pointer = (Math.sin(Date.now() % 10000 / 10000 * Math.PI * 2) + 1) / 2;\n        rig.inputs.leftGamepad.grip = (Math.sin(Date.now() % 10000 / 10000 * Math.PI * 2) + 1) / 2;\n        rig.inputs.rightGamepad.pointer = (Math.sin(Date.now() % 10000 / 10000 * Math.PI * 2) + 1) / 2;\n        rig.inputs.rightGamepad.grip = (Math.sin(Date.now() % 10000 / 10000 * Math.PI * 2) + 1) / 2;\n        rig.update();\n      }\n    }\n\n    renderer.render(scene, camera);\n\n    for (let i = 0; i < peerConnections.length; i++) {\n      const peerConnection = peerConnections[i];\n\n      if (peerConnection.rig) {\n        peerConnection.rig.update();\n      }\n    }\n\n    if (controlsBound) {\n      localEuler.setFromQuaternion(rig.inputs.hmd.quaternion, 'YXZ');\n      localEuler.x = Math.min(Math.max(localEuler.x - mouse.movementY * 0.01, -Math.PI / 2), Math.PI / 2);\n      localEuler.y -= mouse.movementX * 0.01;\n      localEuler.z = 0;\n      rig.inputs.hmd.quaternion.setFromEuler(localEuler);\n      mouse.movementX = 0;\n      mouse.movementY = 0;\n      localEuler.setFromQuaternion(rig.inputs.hmd.quaternion, 'YXZ');\n      localEuler.x = 0;\n      localEuler.z = 0;\n      const floorRotation = localQuaternion.setFromEuler(localEuler);\n      localVector.set(0, 0, 0);\n\n      if (keys.left) {\n        localVector.x += -1;\n      }\n\n      if (keys.right) {\n        localVector.x += 1;\n      }\n\n      if (keys.up) {\n        localVector.z += -1;\n      }\n\n      if (keys.down) {\n        localVector.z += 1;\n      }\n\n      rig.inputs.hmd.position.add(localVector.normalize().multiplyScalar(walkSpeed * timeDiff * (keys.shift ? 3 : 1) * rig.height).applyQuaternion(floorRotation));\n\n      if (keys.space) {\n        const lerpFactor = 0.3;\n        rig.inputs.hmd.position.y = rig.inputs.hmd.position.y * (1 - lerpFactor) + rig.height * 1.1 * lerpFactor;\n      } else if (keys.z) {\n        const lerpFactor = 0.05;\n        rig.inputs.hmd.position.y = rig.inputs.hmd.position.y * (1 - lerpFactor) + rig.height * 0.2 * lerpFactor;\n      } else if (keys.c) {\n        const lerpFactor = 0.2;\n        rig.inputs.hmd.position.y = rig.inputs.hmd.position.y * (1 - lerpFactor) + rig.height * 0.7 * lerpFactor;\n      } else {\n        const lerpFactor = 0.3;\n        rig.inputs.hmd.position.y = rig.inputs.hmd.position.y * (1 - lerpFactor) + rig.height * 0.9 * lerpFactor;\n      }\n\n      rig.inputs.leftGamepad.position.copy(rig.inputs.hmd.position).add(localVector.set(0.15, -0.15, -0.2).multiplyScalar(rig.height).applyQuaternion(rig.inputs.hmd.quaternion));\n      rig.inputs.leftGamepad.quaternion.copy(rig.inputs.hmd.quaternion).multiply(localQuaternion2.setFromAxisAngle(localVector.set(1, 0, 0), Math.PI * 0.5));\n      rig.inputs.rightGamepad.position.copy(rig.inputs.hmd.position).add(localVector.set(-0.15, -0.15, -0.2).multiplyScalar(rig.height).applyQuaternion(rig.inputs.hmd.quaternion));\n      rig.inputs.rightGamepad.quaternion.copy(rig.inputs.hmd.quaternion).multiply(localQuaternion2.setFromAxisAngle(localVector.set(1, 0, 0), Math.PI * 0.5));\n\n      if (controlsBound === 'firstperson') {\n        rig.decapitate();\n      } else if (controlsBound === 'thirdperson') {\n        rig.undecapitate();\n      }\n\n      rig.update();\n\n      if (controlsBound === 'firstperson') {\n        rig.outputs.eyes.matrixWorld.decompose(camera.position, camera.quaternion, localVector);\n        camera.position.divideScalar(heightFactor).add(container.position);\n        camera.quaternion.multiply(z180Quaternion);\n      } else if (controlsBound === 'thirdperson') {\n        rig.outputs.eyes.matrixWorld.decompose(camera.position, camera.quaternion, localVector);\n        camera.position.divideScalar(heightFactor).add(container.position);\n        camera.quaternion.multiply(z180Quaternion);\n        camera.position.add(localVector.set(0, 0.5, 2).applyQuaternion(camera.quaternion));\n      }\n    }\n\n    lastTimestamp = now;\n  }\n\n  renderer.setAnimationLoop(animate);\n  const mouse = {\n    movementX: 0,\n    movementY: 0\n  };\n  const keys = {\n    up: false,\n    down: false,\n    left: false,\n    right: false,\n    z: false,\n    c: false,\n    space: false,\n    shift: false\n  };\n  let controlsBound = null;\n  let unbindControls = null;\n  window.document.addEventListener('pointerlockchange', () => {\n    if (!window.document.pointerLockElement && unbindControls) {\n      unbindControls();\n      unbindControls = null;\n    }\n  });\n\n  const _bindControls = type => {\n    const _keydown = e => {\n      switch (e.which) {\n        case 65:\n          {\n            keys.left = true;\n            break;\n          }\n\n        case 68:\n          {\n            keys.right = true;\n            break;\n          }\n\n        case 87:\n          {\n            keys.up = true;\n            break;\n          }\n\n        case 83:\n          {\n            keys.down = true;\n            break;\n          }\n\n        case 90:\n          {\n            keys.z = true;\n            break;\n          }\n\n        case 67:\n          {\n            keys.c = true;\n            break;\n          }\n\n        case 32:\n          {\n            keys.space = true;\n            break;\n          }\n\n        case 16:\n          {\n            keys.shift = true;\n            break;\n          }\n      }\n    };\n\n    window.addEventListener('keydown', _keydown);\n\n    const _keyup = e => {\n      switch (e.which) {\n        case 65:\n          {\n            keys.left = false;\n            break;\n          }\n\n        case 68:\n          {\n            keys.right = false;\n            break;\n          }\n\n        case 87:\n          {\n            keys.up = false;\n            break;\n          }\n\n        case 83:\n          {\n            keys.down = false;\n            break;\n          }\n\n        case 90:\n          {\n            keys.z = false;\n            break;\n          }\n\n        case 67:\n          {\n            keys.c = false;\n            break;\n          }\n\n        case 32:\n          {\n            keys.space = false;\n            break;\n          }\n\n        case 16:\n          {\n            keys.shift = false;\n            break;\n          }\n      }\n    };\n\n    window.addEventListener('keyup', _keyup);\n\n    const _mousemove = e => {\n      mouse.movementX += e.movementX;\n      mouse.movementY += e.movementY;\n    };\n\n    window.addEventListener('mousemove', _mousemove);\n    orbitControls.enabled = false;\n    controlsBound = type;\n\n    unbindControls = () => {\n      window.addEventListener('keydown', _keydown);\n      window.addEventListener('keyup', _keyup);\n      window.removeEventListener('mousemove', _mousemove);\n      orbitControls.target.copy(camera.position).add(new THREE.Vector3(0, 0, -3).applyQuaternion(camera.quaternion));\n      orbitControls.enabled = true;\n      controlsBound = null;\n    };\n  };\n\n  const firstpersonButton = document.getElementById('firstperson-button');\n  firstpersonButton.addEventListener('click', async () => {\n    if (rig) {\n      await renderer.domElement.requestPointerLock();\n\n      _bindControls('firstperson');\n    }\n  });\n  const thirdpersonButton = document.getElementById('thirdperson-button');\n  thirdpersonButton.addEventListener('click', async () => {\n    if (rig) {\n      await renderer.domElement.requestPointerLock();\n\n      _bindControls('thirdperson');\n    }\n  });\n  let session = null;\n  const enterXrButton = document.getElementById('enter-xr-button');\n  const noXrButton = document.getElementById('no-xr-button');\n  enterXrButton.addEventListener('click', async () => {\n    session = await navigator.xr.requestSession('immersive-vr', {\n      requiredFeatures: ['local-floor']\n    });\n    let referenceSpace;\n    let referenceSpaceType = '';\n\n    const _loadReferenceSpace = async () => {\n      const lastReferenceSpaceType = referenceSpaceType;\n\n      try {\n        referenceSpace = await session.requestReferenceSpace('local-floor');\n        referenceSpaceType = 'local-floor';\n      } catch (err) {\n        referenceSpace = await session.requestReferenceSpace('local');\n        referenceSpaceType = 'local';\n      }\n\n      if (referenceSpaceType !== lastReferenceSpaceType) {\n        console.log(\"referenceSpace changed to \".concat(referenceSpaceType));\n      }\n    };\n\n    await _loadReferenceSpace();\n    const loadReferenceSpaceInterval = setInterval(_loadReferenceSpace, 1000);\n    renderer.vr.setSession(session);\n    session.requestAnimationFrame((timestamp, frame) => {\n      const pose = frame.getViewerPose(referenceSpace);\n      const viewport = session.renderState.baseLayer.getViewport(pose.views[0]); // const width = viewport.width;\n\n      const height = viewport.height;\n\n      const fullWidth = (() => {\n        let result = 0;\n\n        for (let i = 0; i < pose.views.length; i++) {\n          result += session.renderState.baseLayer.getViewport(pose.views[i]).width;\n        }\n\n        return result;\n      })();\n\n      renderer.setSize(fullWidth, height);\n      renderer.setPixelRatio(1);\n      renderer.setAnimationLoop(null);\n      renderer.vr.enabled = true;\n      renderer.vr.setSession(session);\n      renderer.vr.setAnimationLoop(animate);\n      console.log('loaded root in XR');\n    });\n  });\n  let microphoneMediaStream = null;\n  const enableMicButton = document.getElementById('enable-mic-button');\n  const disableMicButton = document.getElementById('disable-mic-button');\n  enableMicButton.addEventListener('click', async () => {\n    try {\n      microphoneMediaStream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      rig.setMicrophoneMediaStream(microphoneMediaStream);\n\n      if (channelConnection) {\n        channelConnection.setMicrophoneMediaStream(microphoneMediaStream);\n      }\n\n      disableMicButton.style.display = null;\n      enableMicButton.style.display = 'none';\n    } catch (err) {\n      console.warn(err);\n    }\n  });\n  disableMicButton.addEventListener('click', async () => {\n    rig.setMicrophoneMediaStream(null);\n\n    if (channelConnection) {\n      channelConnection.setMicrophoneMediaStream(null);\n    }\n\n    microphoneMediaStream.getAudioTracks().forEach(track => {\n      track.stop();\n    });\n    microphoneMediaStream = null;\n    enableMicButton.style.display = null;\n    disableMicButton.style.display = 'none';\n    /* try {\n      await navigator.permissions.revoke({\n        name: 'microphone',\n      });\n    } catch(err) {\n      console.warn(err);\n    } */\n  });\n  let channelConnection = null;\n  const peerConnections = [];\n\n  const _sendAllPeerConnections = s => {\n    for (let i = 0; i < peerConnections.length; i++) {\n      peerConnections[i].send(s);\n    }\n  };\n\n  const channelInput = document.getElementById('channel-input');\n  const connectButton = document.getElementById('connect-button');\n  connectButton.addEventListener('click', () => {\n    const channelInputValue = channelInput.value;\n    const match = channelInputValue.match(/^(.+?)\\/(.+?)$/);\n\n    if (match) {\n      const userName = match[1];\n      const channelName = match[2];\n      console.log(\"connecting to \".concat(userName, \"/\").concat(channelName));\n      channelConnection = new XRChannelConnection(\"wss://presence.exokit.org/?u=\".concat(encodeURIComponent(userName), \"&c=\").concat(encodeURIComponent(channelName)), {\n        microphoneMediaStream\n      });\n      channelConnection.addEventListener('open', () => {\n        console.log('xr channel open');\n      });\n      channelConnection.addEventListener('error', err => {\n        console.warn('xr channel error', err);\n      });\n      channelConnection.addEventListener('peerconnection', e => {\n        const peerConnection = e.detail;\n        peerConnection.rig = null;\n        peerConnection.mediaStream = null;\n        let updateInterval = 0;\n        peerConnection.addEventListener('open', () => {\n          console.log('add peer connection', peerConnection);\n          peerConnections.push(peerConnection);\n          peerConnection.send(JSON.stringify({\n            method: 'model',\n            url: modelUrl\n          }));\n          updateInterval = setInterval(() => {\n            if (rig) {\n              const hmd = {\n                position: localVector.copy(rig.inputs.hmd.position).divideScalar(heightFactor).toArray(),\n                quaternion: rig.inputs.hmd.quaternion.toArray(),\n                scaleFactor: rig.inputs.hmd.scaleFactor\n              };\n              const gamepads = [{\n                position: localVector.copy(rig.inputs.leftGamepad.position).divideScalar(heightFactor).toArray(),\n                quaternion: rig.inputs.leftGamepad.quaternion.toArray(),\n                pointer: rig.inputs.leftGamepad.pointer,\n                grip: rig.inputs.leftGamepad.grip,\n                visible: true\n              }, {\n                position: localVector.copy(rig.inputs.rightGamepad.position).divideScalar(heightFactor).toArray(),\n                quaternion: rig.inputs.rightGamepad.quaternion.toArray(),\n                pointer: rig.inputs.rightGamepad.pointer,\n                grip: rig.inputs.rightGamepad.grip,\n                visible: true\n              }];\n              peerConnection.update(hmd, gamepads);\n            }\n          }, peerPoseUpdateRate);\n        });\n        peerConnection.addEventListener('close', () => {\n          console.log('remove peer connection', peerConnection);\n          const index = peerConnections.indexOf(peerConnection);\n\n          if (index !== -1) {\n            peerConnections.splice(index, 1);\n          }\n\n          clearInterval(updateInterval);\n\n          if (peerConnection.rig) {\n            container.remove(peerConnection.rig.model);\n            peerConnection.rig.destroy();\n          }\n        });\n        peerConnection.addEventListener('pose', e => {\n          const rig = peerConnection.rig;\n\n          if (rig) {\n            const data = e.detail;\n            const hmd = data.hmd,\n                  gamepads = data.gamepads;\n            rig.starts.hmd.position.copy(peerConnection.rig.inputs.hmd.position);\n            rig.starts.hmd.rotation.copy(peerConnection.rig.inputs.hmd.quaternion);\n            rig.starts.hmd.scaleFactor = peerConnection.rig.inputs.hmd.scaleFactor;\n            rig.starts.gamepads[0].position.copy(peerConnection.rig.inputs.leftGamepad.position);\n            rig.starts.gamepads[0].rotation.copy(peerConnection.rig.inputs.leftGamepad.quaternion);\n            rig.starts.gamepads[0].pointer = peerConnection.rig.inputs.leftGamepad.pointer;\n            rig.starts.gamepads[0].grip = peerConnection.rig.inputs.leftGamepad.grip;\n            rig.starts.gamepads[1].position.copy(peerConnection.rig.inputs.rightGamepad.position);\n            rig.starts.gamepads[1].rotation.copy(peerConnection.rig.inputs.rightGamepad.quaternion);\n            rig.starts.gamepads[1].pointer = peerConnection.rig.inputs.rightGamepad.pointer;\n            rig.starts.gamepads[1].grip = peerConnection.rig.inputs.rightGamepad.grip;\n            rig.targets.hmd.position.fromArray(hmd.position);\n            rig.targets.hmd.rotation.fromArray(hmd.quaternion);\n            rig.targets.hmd.scaleFactor = hmd.scaleFactor;\n            rig.targets.gamepads[0].position.fromArray(gamepads[0].position);\n            rig.targets.gamepads[0].rotation.fromArray(gamepads[0].quaternion);\n            rig.targets.gamepads[0].pointer = gamepads[0].pointer;\n            rig.targets.gamepads[0].grip = gamepads[0].grip;\n            rig.targets.gamepads[1].position.fromArray(gamepads[1].position);\n            rig.targets.gamepads[1].rotation.fromArray(gamepads[1].quaternion);\n            rig.targets.gamepads[1].pointer = gamepads[1].pointer;\n            rig.targets.gamepads[1].grip = gamepads[1].grip;\n            rig.targets.timestamp = Date.now();\n          }\n        });\n        peerConnection.addEventListener('mediastream', e => {\n          console.log('got media stream', e.detail, e.detail.getAudioTracks());\n          peerConnection.mediaStream = e.detail;\n\n          if (peerConnection.rig) {\n            peerConnection.rig.setMicrophoneMediaStream(peerConnection.mediaStream, {\n              muted: false\n            });\n          }\n        });\n        peerConnection.addEventListener('message', async e => {\n          console.log('got message', e);\n          const data = JSON.parse(e.data);\n          const method = data.method;\n\n          if (method === 'model') {\n            const url = data.url;\n            console.log('got peer model', {\n              url\n            });\n\n            if (peerConnection.rig) {\n              container.remove(peerConnection.rig.model);\n              peerConnection.rig.destroy();\n            }\n\n            const model = url ? await _loadModelUrl(url) : null;\n            peerConnection.rig = new Avatar(model, {\n              fingers: true,\n              hair: true,\n              visemes: true,\n              microphoneMediaStream: peerConnection.mediaStream,\n              muted: false,\n              debug: !model\n            });\n            container.add(peerConnection.rig.model);\n            peerConnection.rig.starts = {\n              hmd: {\n                position: peerConnection.rig.inputs.hmd.position.clone(),\n                rotation: peerConnection.rig.inputs.hmd.quaternion.clone(),\n                scaleFactor: peerConnection.rig.inputs.hmd.scaleFactor\n              },\n              gamepads: [{\n                position: peerConnection.rig.inputs.leftGamepad.position.clone(),\n                rotation: peerConnection.rig.inputs.leftGamepad.quaternion.clone(),\n                pointer: peerConnection.rig.inputs.leftGamepad.pointer,\n                grip: peerConnection.rig.inputs.leftGamepad.grip\n              }, {\n                position: peerConnection.rig.inputs.rightGamepad.position.clone(),\n                rotation: peerConnection.rig.inputs.rightGamepad.quaternion.clone(),\n                pointer: peerConnection.rig.inputs.rightGamepad.pointer,\n                grip: peerConnection.rig.inputs.rightGamepad.grip\n              }]\n            };\n            peerConnection.rig.targets = {\n              hmd: {\n                position: new THREE.Vector3(),\n                rotation: new THREE.Quaternion(),\n                scaleFactor: 1\n              },\n              gamepads: [{\n                position: new THREE.Vector3(),\n                rotation: new THREE.Quaternion(),\n                pointer: 0,\n                grip: 0\n              }, {\n                position: new THREE.Vector3(),\n                rotation: new THREE.Quaternion(),\n                pointer: 0,\n                grip: 0\n              }],\n              timestamp: Date.now()\n            };\n\n            const heightFactor = _getHeightFactor(peerConnection.rig.height);\n\n            peerConnection.rig.update = (_update => function update() {\n              const now = Date.now();\n              const timestamp = peerConnection.rig.targets.timestamp;\n              const lerpFactor = Math.min(Math.max((now - timestamp) / (peerPoseUpdateRate * 2), 0), 1);\n              peerConnection.rig.inputs.hmd.quaternion.copy(peerConnection.rig.starts.hmd.rotation).slerp(peerConnection.rig.targets.hmd.rotation, lerpFactor);\n              peerConnection.rig.inputs.hmd.position.copy(peerConnection.rig.starts.hmd.position).lerp(localVector.copy(peerConnection.rig.targets.hmd.position).multiplyScalar(heightFactor), lerpFactor);\n              peerConnection.rig.inputs.hmd.scaleFactor = peerConnection.rig.starts.hmd.scaleFactor * (1 - lerpFactor) + peerConnection.rig.targets.hmd.scaleFactor * lerpFactor;\n              peerConnection.rig.inputs.leftGamepad.position.copy(peerConnection.rig.starts.gamepads[0].position).lerp(localVector.copy(peerConnection.rig.targets.gamepads[0].position).multiplyScalar(heightFactor), lerpFactor);\n              peerConnection.rig.inputs.leftGamepad.quaternion.copy(peerConnection.rig.starts.gamepads[0].rotation).slerp(peerConnection.rig.targets.gamepads[0].rotation, lerpFactor);\n              peerConnection.rig.inputs.leftGamepad.pointer = peerConnection.rig.starts.gamepads[0].pointer * (1 - lerpFactor) + peerConnection.rig.targets.gamepads[0].pointer * lerpFactor;\n              peerConnection.rig.inputs.leftGamepad.grip = peerConnection.rig.starts.gamepads[0].grip * (1 - lerpFactor) + peerConnection.rig.targets.gamepads[0].grip * lerpFactor;\n              peerConnection.rig.inputs.rightGamepad.position.copy(peerConnection.rig.starts.gamepads[1].position).lerp(localVector.copy(peerConnection.rig.targets.gamepads[1].position).multiplyScalar(heightFactor), lerpFactor);\n              peerConnection.rig.inputs.rightGamepad.quaternion.copy(peerConnection.rig.starts.gamepads[1].rotation).slerp(peerConnection.rig.targets.gamepads[1].rotation, lerpFactor);\n              peerConnection.rig.inputs.rightGamepad.pointer = peerConnection.rig.starts.gamepads[1].pointer * (1 - lerpFactor) + peerConnection.rig.targets.gamepads[1].pointer * lerpFactor;\n              peerConnection.rig.inputs.rightGamepad.grip = peerConnection.rig.starts.gamepads[1].grip * (1 - lerpFactor) + peerConnection.rig.targets.gamepads[1].grip * lerpFactor;\n\n              _update.apply(this, arguments);\n            })(peerConnection.rig.update);\n          } else {\n            console.warn('invalid method', {\n              method\n            });\n          }\n        });\n      });\n      connectButton.style.display = 'none';\n    } else {\n      console.warn(\"invalid user/channel: \".concat(channelInputValue));\n    }\n  });\n\n  (async () => {\n    let result;\n\n    if (navigator.xr) {\n      try {\n        await navigator.xr.supportsSession('immersive-vr');\n        result = true;\n      } catch (err) {\n        console.warn(err);\n        result = false;\n      }\n    } else {\n      result = false;\n    }\n\n    if (result) {\n      console.log('xr available');\n      enterXrButton.style.display = null;\n    } else {\n      console.log('no xr');\n      noXrButton.style.display = null;\n    }\n    /* const microphonePermission = await navigator.permissions.query({\n      name: 'microphone',\n    });\n    if (microphonePermission.state === 'granted') {\n      microphoneMediaStream  = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n      disableMicButton.style.display = null;\n    } else {\n      enableMicButton.style.display = null;\n    } */\n\n\n    enableMicButton.style.display = null;\n    const href = aAvatars[1].href;\n    const model = await _loadModelUrl(href);\n\n    _setLocalModel(model);\n\n    modelUrl = href;\n\n    _sendAllPeerConnections(JSON.stringify({\n      method: 'model',\n      url: modelUrl\n    }));\n  })();\n\n  let loginToken = null;\n  const loginUrl = 'https://login.exokit.org/';\n\n  async function doLogin(email, code) {\n    const res = await fetch(\"\".concat(loginUrl, \"?email=\").concat(encodeURIComponent(email), \"&code=\").concat(encodeURIComponent(code)), {\n      method: 'POST'\n    });\n\n    if (res.status >= 200 && res.status < 300) {\n      const newLoginToken = await res.json();\n      await storage.set('loginToken', newLoginToken);\n      loginToken = newLoginToken; // loginNameStatic.innerText = loginToken.name;\n      // loginEmailStatic.innerText = loginToken.email;\n\n      document.body.classList.add('logged-in');\n      loginForm.classList.remove('phase-1');\n      loginForm.classList.remove('phase-2');\n      loginForm.classList.add('phase-3');\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  const storage = {\n    async get(k) {\n      const s = localStorage.getItem(k);\n\n      if (typeof s === 'string') {\n        return JSON.parse(s);\n      } else {\n        return undefined;\n      }\n    },\n\n    async set(k, v) {\n      localStorage.setItem(k, JSON.stringify(v));\n    },\n\n    async remove(k) {\n      localStorage.removeItem(k);\n    }\n\n  }; // const loginButton = document.getElementById('login-button');\n  // const loginButton2 = document.getElementById('login-button-2');\n  // const loginPopdown = document.getElementById('login-popdown');\n\n  const loginForm = document.getElementById('login-form');\n  const loginEmail = document.getElementById('login-email');\n  const loginNameStatic = document.getElementById('login-name-static');\n  const loginEmailStatic = document.getElementById('login-email-static');\n  const statusNotConnected = document.getElementById('status-not-connected');\n  const statusConnected = document.getElementById('status-connected');\n  const loginVerificationCode = document.getElementById('login-verification-code');\n  const loginNotice = document.getElementById('login-notice');\n  const loginError = document.getElementById('login-error');\n  const logoutButton = document.getElementById('logout-button');\n\n  loginForm.onsubmit = async e => {\n    e.preventDefault();\n\n    if (loginForm.classList.contains('phase-1') && loginEmail.value) {\n      loginNotice.innerHTML = '';\n      loginError.innerHTML = '';\n      loginForm.classList.remove('phase-1');\n      const res = await fetch(\"\".concat(loginUrl, \"?email=\").concat(encodeURIComponent(loginEmail.value)), {\n        method: 'POST'\n      });\n\n      if (res.status >= 200 && res.status < 300) {\n        loginNotice.innerText = \"Code sent to \".concat(loginEmail.value, \"!\");\n        loginForm.classList.add('phase-2');\n        return res.blob();\n      } else if (res.status === 403) {\n        loginError.innerText = \"\".concat(loginEmail.value, \" is not in the beta yet :(\");\n        loginForm.classList.add('phase-1');\n      } else {\n        throw new Error(\"invalid status code: \".concat(res.status));\n      }\n    } else if (loginForm.classList.contains('phase-2') && loginEmail.value && loginVerificationCode.value) {\n      loginNotice.innerHTML = '';\n      loginError.innerHTML = '';\n      loginForm.classList.remove('phase-2');\n      await doLogin(loginEmail.value, loginVerificationCode.value);\n    } else if (loginForm.classList.contains('phase-3')) {\n      await storage.remove('loginToken');\n      window.location.reload();\n      /* loginToken = null;\n      xrEngine.postMessage({\n        method: 'login',\n        loginToken,\n      });\n       loginNotice.innerHTML = '';\n      loginError.innerHTML = '';\n      document.body.classList.remove('logged-in');\n      loginForm.classList.remove('phase-3');\n      loginForm.classList.add('phase-1'); */\n    }\n  };\n\n  const exportModelButton = document.getElementById('export-model-button');\n  exportModelButton.addEventListener('click', async () => {\n    const ab = await model.export();\n    const b = new Blob([ab], {\n      type: 'model/gltf-binary'\n    });\n    const u = URL.createObjectURL(b);\n    const a = document.createElement('a');\n    a.download = 'model.glb';\n    a.href = u;\n    a.style.display = 'none';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(u);\n  });\n  const scaleDownButton = document.getElementById('scale-down-button');\n  scaleDownButton.addEventListener('click', () => {\n    const scaleFactor = 1.25;\n    const orbitControlsTarget = localVector.copy(orbitControls.target);\n    container.matrix.multiply(localMatrix.makeTranslation(orbitControlsTarget.x, orbitControlsTarget.y, orbitControlsTarget.z)).multiply(localMatrix.makeScale(scaleFactor, scaleFactor, scaleFactor)).multiply(localMatrix.makeTranslation(-orbitControlsTarget.x, -orbitControlsTarget.y, -orbitControlsTarget.z)).decompose(container.position, container.quaternion, container.scale);\n\n    if (rig) {\n      rig.inputs.hmd.scaleFactor /= scaleFactor;\n    }\n  });\n  const scaleUpButton = document.getElementById('scale-up-button');\n  scaleUpButton.addEventListener('click', () => {\n    const scaleFactor = 1 / 1.25;\n    const orbitControlsTarget = localVector.copy(orbitControls.target);\n    container.matrix.multiply(localMatrix.makeTranslation(orbitControlsTarget.x, orbitControlsTarget.y, orbitControlsTarget.z)).multiply(localMatrix.makeScale(scaleFactor, scaleFactor, scaleFactor)).multiply(localMatrix.makeTranslation(-orbitControlsTarget.x, -orbitControlsTarget.y, -orbitControlsTarget.z)).decompose(container.position, container.quaternion, container.scale);\n\n    if (rig) {\n      rig.inputs.hmd.scaleFactor /= scaleFactor;\n    }\n  });\n\n  (async () => {\n    const localLoginToken = await storage.get('loginToken');\n\n    if (localLoginToken) {\n      const res = await fetch(\"\".concat(loginUrl, \"?email=\").concat(encodeURIComponent(localLoginToken.email), \"&token=\").concat(encodeURIComponent(localLoginToken.token)), {\n        method: 'POST'\n      });\n\n      if (res.status >= 200 && res.status < 300) {\n        loginToken = await res.json();\n        await storage.set('loginToken', loginToken); // loginNameStatic.innerText = loginToken.name;\n        // loginEmailStatic.innerText = loginToken.email;\n\n        document.body.classList.add('logged-in');\n        loginForm.classList.remove('phase-1');\n        loginForm.classList.remove('phase-2');\n        loginForm.classList.add('phase-3');\n      } else {\n        await storage.remove('loginToken');\n        console.warn(\"invalid status code: \".concat(res.status));\n      }\n    }\n  })();\n\n  window.addEventListener('resize', e => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n  });\n  return null;\n};\n\nexport default AvatarsApp;","map":{"version":3,"sources":["/Users/chris/Documents/Github/test-react/src/WebXRApps/Avatars/AvatarsApp.js"],"names":["React","OrbitControls","THREE","Avatar","AvatarsApp","props","peerPoseUpdateRate","walkSpeed","floorPlane","Plane","setFromNormalAndCoplanarPoint","Vector3","localVector","localVector2","localVector3","localVector4","localVector5","localQuaternion","Quaternion","localQuaternion2","localMatrix","Matrix4","localEuler","Euler","localRay","Ray","z180Quaternion","setFromAxisAngle","Math","PI","avatarModelsEl","document","getElementById","noneAAvatar","createElement","classList","add","innerText","appendChild","i","avatarModels","length","avatarmodel","aAvatar","setAttribute","url","label","scene","Scene","container","Object3D","camera","PerspectiveCamera","window","innerWidth","innerHeight","position","y","z","ambientLight","AmbientLight","directionalLight","DirectionalLight","set","gridHelper","GridHelper","_makeTextMesh","s","color","size","geometry","createTextGeometry","width","Infinity","font","fontJson","update","material","RawShaderMaterial","createSDFShader","map","fontTexture","transparent","side","DoubleSide","scaleFactor","mesh","Mesh","layout","lineHeight","scale","getText","setText","newS","teleportGeometry","TorusBufferGeometry","applyMatrix","makeRotationX","makeRotationY","teleportMaterial","MeshBasicMaterial","_makeTeleportMesh","visible","frustumCulled","teleportMeshes","_patchModel","object","traverse","o","isMesh","opacity","_loadModelUrl","filename","model","ModelLoader","loadModelUrl","_bindUploadFileButton","inputFileEl","addEventListener","e","files","target","file","dataUrl","URL","createObjectURL","name","_setLocalModel","parentNode","removeChild","newInputFileEl","type","id","style","display","preventDefault","dataTransfer","items","kind","getAsFile","renderer","WebGLRenderer","antialias","setSize","setPixelRatio","devicePixelRatio","sortObjects","domElement","orbitControls","screenSpacePanning","enableMiddleZoom","aAvatars","Array","from","querySelectorAll","href","modelUrl","_sendAllPeerConnections","JSON","stringify","method","fontPromise","Promise","all","fetch","then","res","json","accept","reject","TextureLoader","load","results","buttonSize","buttonGeometry","BoxBufferGeometry","x","colors","normal","highlight","mirrorMesh","mirrorWidth","mirrorHeight","PlaneBufferGeometry","makeTranslation","Reflector","clipBias","textureWidth","textureHeight","addColor","recursion","borderMesh","MeshPhongMaterial","buttonMeshes","textMesh","box","Box3","buttonMesh","setFromCenterAndSize","getWorldPosition","clone","multiply","getWorldScale","getButtonIntersectionIndex","containsPoint","onBeforeRender2","rig","undecapitate","onAfterRender2","session","decapitate","userHeight","_getHeightFactor","rigHeight","heightFactor","newModel","remove","destroy","fingers","hair","visemes","microphoneMediaStream","debug","height","divideScalar","lastPresseds","lastBs","lastPads","lastPositions","startGripPositions","startSceneMatrix","startModelScale","dateOffset","floor","random","realDateNow","now","Date","lastTimestamp","animate","timestamp","frame","referenceSpace","timeDiff","vr","enabled","vrCameras","getCamera","cameras","vrCamera","vrCamera2","matrixWorld","decompose","quaternion","inputSources","gamepads","navigator","getGamepads","inputs","hmd","copy","sub","multiplyScalar","_getGamepad","handedness","inputSource","find","pose","gamepad","getPose","gripSpace","transform","orientation","matrix","rawP","p","q","pressed","buttons","lastPressed","pointer","value","grip","pad","axes","padX","padY","stick","a","b","lastB","rawPosition","fromArray","_updateTeleportMesh","lastPad","teleportMesh","applyMatrix4","getInverse","setFromQuaternion","max","applyQuaternion","setFromEuler","intersection","intersectPlane","distanceTo","origin","moveLength","hmdEuler","applyEuler","wasLastBd","lg","li","leftGamepad","click","rg","ri","rightGamepad","_startScale","_processScale","startDistance","currentDistance","startGripPosition","currentGripPosition","positionDiff","makeScale","isLastBd","setHex","controlsBound","positionOffset","sin","positionOffset2","standFactor","rotationAngle","shoulderWidth","render","peerConnections","peerConnection","min","mouse","movementY","movementX","floorRotation","keys","left","right","up","down","normalize","shift","space","lerpFactor","c","outputs","eyes","setAnimationLoop","unbindControls","pointerLockElement","_bindControls","_keydown","which","_keyup","_mousemove","removeEventListener","firstpersonButton","requestPointerLock","thirdpersonButton","enterXrButton","noXrButton","xr","requestSession","requiredFeatures","referenceSpaceType","_loadReferenceSpace","lastReferenceSpaceType","requestReferenceSpace","err","console","log","loadReferenceSpaceInterval","setInterval","setSession","requestAnimationFrame","getViewerPose","viewport","renderState","baseLayer","getViewport","views","fullWidth","result","enableMicButton","disableMicButton","mediaDevices","getUserMedia","audio","setMicrophoneMediaStream","channelConnection","warn","getAudioTracks","forEach","track","stop","send","channelInput","connectButton","channelInputValue","match","userName","channelName","XRChannelConnection","encodeURIComponent","detail","mediaStream","updateInterval","push","toArray","index","indexOf","splice","clearInterval","data","starts","rotation","targets","muted","parse","_update","slerp","lerp","apply","arguments","supportsSession","loginToken","loginUrl","doLogin","email","code","status","newLoginToken","storage","body","loginForm","get","k","localStorage","getItem","undefined","v","setItem","removeItem","loginEmail","loginNameStatic","loginEmailStatic","statusNotConnected","statusConnected","loginVerificationCode","loginNotice","loginError","logoutButton","onsubmit","contains","innerHTML","blob","Error","location","reload","exportModelButton","ab","export","Blob","u","download","revokeObjectURL","scaleDownButton","orbitControlsTarget","scaleUpButton","localLoginToken","token","aspect","updateProjectionMatrix"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\n\nimport React from 'react';\nimport { OrbitControls } from './OrbitControls.js';\nimport * as THREE from 'three';\n\nimport './webxr-polyfill.module.js';\nimport './HelioWebXRPolyfill.js';\n// import avatarModels from 'https://avatar-models.exokit.org/avatar-models.js'\n// import ModelLoader from 'https://model-loader.exokit.org/model-loader.js';\nimport Avatar from './avatars.js';\n// import {XRChannelConnection} from 'https://multiplayer.exokit.org/multiplayer.js';\n\n\nconst AvatarsApp = props => {\n\nconst peerPoseUpdateRate = 50;\nconst walkSpeed = 0.0015;\nconst floorPlane = new THREE.Plane().setFromNormalAndCoplanarPoint(new THREE.Vector3(0, 1, 0), new THREE.Vector3(0, 0, 0));\n\nconst localVector = new THREE.Vector3();\nconst localVector2 = new THREE.Vector3();\nconst localVector3 = new THREE.Vector3();\nconst localVector4 = new THREE.Vector3();\nconst localVector5 = new THREE.Vector3();\nconst localQuaternion = new THREE.Quaternion();\nconst localQuaternion2 = new THREE.Quaternion();\nconst localMatrix = new THREE.Matrix4();\nconst localEuler = new THREE.Euler();\nconst localRay = new THREE.Ray();\n\nconst z180Quaternion = new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.PI);\n\n{\n  const avatarModelsEl = document.getElementById('avatar-models');\n\n  const noneAAvatar = document.createElement('a');\n  noneAAvatar.classList.add('a-avatar');\n  noneAAvatar.innerText = 'none';\n  avatarModelsEl.appendChild(noneAAvatar);\n\n  for (let i = 0; i < avatarModels.length; i++) {\n    const avatarmodel = avatarModels[i];\n\n    const aAvatar = document.createElement('a');\n    aAvatar.classList.add('a-avatar');\n    aAvatar.setAttribute('href', `https://avatar-models.exokit.org/${avatarmodel.url}`);\n    aAvatar.innerText = avatarmodel.label;\n\n    avatarModelsEl.appendChild(aAvatar);\n  }\n}\n\nconst scene = new THREE.Scene();\n\nconst container = new THREE.Object3D();\nscene.add(container);\n\nconst camera = new THREE.PerspectiveCamera(90, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.y = 1.5;\ncamera.position.z = 2;\n// camera.rotation.y = Math.PI;\n\nconst ambientLight = new THREE.AmbientLight(0x808080);\nscene.add(ambientLight);\n\nconst directionalLight = new THREE.DirectionalLight(0xFFFFFF, 1);\ndirectionalLight.position.set(0.5, 1, 0.5);\nscene.add(directionalLight);\n\n/* const directionalLight2 = new THREE.DirectionalLight(0xFFFFFF, 1);\ndirectionalLight2.position.set(0, -0.25, -0.25);\nscene.add(directionalLight2); */\n\nconst gridHelper = new THREE.GridHelper(10, 10);\ncontainer.add(gridHelper);\n\nconst _makeTextMesh = (s = '', color = 0x000000, size = 1) => {\n  // create a geometry of packed bitmap glyphs,\n  // word wrapped to 300px and right-aligned\n  var geometry = createTextGeometry({\n    width: Infinity,\n    font: fontJson,\n  });\n\n  // change text and other options as desired\n  // the options sepcified in constructor will\n  // be used as defaults\n  geometry.update(s);\n\n  // the resulting layout has metrics and bounds\n  // console.log(geometry.layout.height)\n  // console.log(geometry.layout.descender)\n\n  var material = new THREE.RawShaderMaterial(createSDFShader({\n    map: fontTexture,\n    transparent: true,\n    color,\n    // color: palette[Math.floor(Math.random() * palette.length)]\n    // negate: false,\n    side: THREE.DoubleSide,\n  }));\n\n  const scaleFactor = 0.002 * size;\n\n  const mesh = new THREE.Mesh(geometry, material)\n  mesh.position.set(0, -geometry.layout.lineHeight * 0.001, 0);\n  mesh.scale.set(scaleFactor, -scaleFactor, -scaleFactor);\n  mesh.getText = () => s;\n  mesh.setText = newS => {\n    if (newS !== s) {\n      s = newS;\n      geometry.update(s);\n    }\n  };\n  return mesh;\n};\n\nconst teleportGeometry = new THREE.TorusBufferGeometry(0.5, 0.15, 3, 5)\n  .applyMatrix(new THREE.Matrix4().makeRotationX(-(Math.PI / 2)))\n  .applyMatrix(new THREE.Matrix4().makeRotationY((1 / 20) * (Math.PI * 2)));\nconst teleportMaterial = new THREE.MeshBasicMaterial({\n  color: 0x44c2ff,\n});\nconst _makeTeleportMesh = () => {\n  const geometry = teleportGeometry;\n  const material = teleportMaterial;\n\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.visible = false;\n  mesh.frustumCulled = false;\n  return mesh;\n};\nconst teleportMeshes = [\n  _makeTeleportMesh(),\n  _makeTeleportMesh(),\n];\ncontainer.add(teleportMeshes[0]);\ncontainer.add(teleportMeshes[1]);\n\nconst _patchModel = object => {\n  object.scene.traverse(o => {\n    if (o.isMesh) {\n      o.frustumCulled = false;\n\n      if (o.material.opacity === 0) {\n        o.material.opacity = 1;\n      }\n    }\n  });\n};\nconst _loadModelUrl = async (url, filename) => {\n  const model = await ModelLoader.loadModelUrl(url, filename);\n  _patchModel(model);\n  return model;\n};\n\nconst _bindUploadFileButton = inputFileEl => {\n  inputFileEl.addEventListener('change', async e => {\n    const {files} = e.target;\n    if (files.length === 1) {\n      const [file] = files;\n      const dataUrl = URL.createObjectURL(file);\n      const model = await _loadModelUrl(dataUrl, file.name);\n      _setLocalModel(model);\n      // modelUrl = dataUrl;\n    }\n\n    const {parentNode} = inputFileEl;\n    parentNode.removeChild(inputFileEl);\n    const newInputFileEl = document.createElement('input');\n    newInputFileEl.type = 'file';\n    newInputFileEl.id = 'upload-file-button';\n    newInputFileEl.style.display = 'none';\n    parentNode.appendChild(newInputFileEl);\n    _bindUploadFileButton(newInputFileEl);\n  });\n};\n_bindUploadFileButton(document.getElementById('upload-file-button'));\nwindow.document.addEventListener('dragover', e => {\n  e.preventDefault();\n});\nwindow.document.addEventListener('drop', async e => {\n  e.preventDefault();\n\n  if (e.dataTransfer.items.length !== 1) {\n    return;\n  }\n\n  for (var i = 0; i < e.dataTransfer.items.length; i++) {\n    if (e.dataTransfer.items[i].kind === 'file') {\n      const file = e.dataTransfer.items[i].getAsFile();\n      // console.log('got file', e.dataTransfer.items[i], file);\n      const dataUrl = URL.createObjectURL(file);\n      const model = await _loadModelUrl(dataUrl, file.name);\n      _setLocalModel(model);\n      // modelUrl = dataUrl;\n    }\n  }\n});\n\nconst renderer = new THREE.WebGLRenderer({\n  // canvas: document.getElementById('canvas'),\n  // alpha: true,\n  antialias: true,\n});\n// console.log('set size', window.innerWidth, window.innerHeight);\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.sortObjects = false;\ndocument.getElementById('iframe-wrapper').appendChild(renderer.domElement);\n\nconst orbitControls = new THREE.OrbitControls(camera, renderer.domElement);\norbitControls.screenSpacePanning = true;\norbitControls.enableMiddleZoom = false;\norbitControls.update();\n\nconst aAvatars = Array.from(document.querySelectorAll('.a-avatar'));\nfor (let i = 0; i < aAvatars.length; i++) {\n  const aAvatar = aAvatars[i];\n  aAvatar.addEventListener('click', async e => {\n    e.preventDefault();\n\n    const {href} = aAvatar;\n    if (href) {\n      _setLocalModel(await _loadModelUrl(href));\n    } else {\n      _setLocalModel(null);\n    }\n    modelUrl = href;\n    _sendAllPeerConnections(JSON.stringify({\n      method: 'model',\n      url: modelUrl,\n    }));\n  });\n}\n\nlet fontJson, fontTexture;\nconst fontPromise = Promise.all([\n  fetch('DejaVu-sdf.json').then(res => res.json()),\n  new Promise((accept, reject) => {\n    new THREE.TextureLoader().load('DejaVu-sdf.png', accept);\n  }),\n]).then(results => {\n  fontJson = results[0];\n  fontTexture = results[1];\n});\nconst buttonSize = new THREE.Vector3(1, 0.1*0.9, 0.1);\nconst buttonGeometry = new THREE.BoxBufferGeometry(buttonSize.x, buttonSize.y, buttonSize.z);\nconst colors = {\n  normal: 0x5c6bc0,\n  highlight: 0x303f9f,\n};\nconst mirrorMesh = (() => {\n  const mirrorWidth = 3;\n  const mirrorHeight = 2;\n  const geometry = new THREE.PlaneBufferGeometry(mirrorWidth, mirrorHeight)\n    .applyMatrix(new THREE.Matrix4().makeTranslation(0, 1, 0));\n  const mesh = new THREE.Reflector(geometry, {\n    clipBias: 0.003,\n    textureWidth: 1024 * window.devicePixelRatio,\n    textureHeight: 2048 * window.devicePixelRatio,\n    color: 0x889999,\n    addColor: 0x300000,\n    recursion: 1,\n    transparent: true,\n  });\n  mesh.position.set(0, 0, -1);\n\n  const borderMesh = new THREE.Mesh(\n    new THREE.BoxBufferGeometry(mirrorWidth + 0.1, mirrorHeight + 0.1, 0.1)\n      .applyMatrix(new THREE.Matrix4().makeTranslation(0, 1, -0.1/2 - 0.01)),\n    new THREE.MeshPhongMaterial({\n      color: 0x5c6bc0,\n    })\n  );\n  mesh.add(borderMesh);\n\n  const buttonMeshes = aAvatars.map((aAvatar, i) => {\n    const geometry = buttonGeometry;\n    const material = new THREE.MeshPhongMaterial({\n      color: colors.normal,\n    });\n    const mesh = new THREE.Mesh(geometry, material);\n    mesh.position.set(-2, 2 - 0.1/2 - i*0.1, 0);\n    mesh.frustumCulled = false;\n\n    fontPromise.then(() => {\n      const textMesh = _makeTextMesh(aAvatar.innerText, 0xFFFFFF);\n      textMesh.position.x = -0.45;\n      textMesh.position.y = -0.02;\n      textMesh.position.z = 0.06;\n      mesh.add(textMesh);\n    });\n\n    mesh.box = new THREE.Box3();\n\n    return mesh;\n  });\n  for (let i = 0; i < buttonMeshes.length; i++) {\n    mesh.add(buttonMeshes[i]);\n  }\n  mesh.buttonMeshes = buttonMeshes;\n  mesh.update = () => {\n    for (let i = 0; i < buttonMeshes.length; i++) {\n      const buttonMesh = buttonMeshes[i];\n      buttonMesh.box.setFromCenterAndSize(buttonMesh.getWorldPosition(new THREE.Vector3()), buttonSize.clone().multiply(buttonMesh.getWorldScale(new THREE.Vector3())));\n    }\n  };\n  mesh.getButtonIntersectionIndex = position => {\n    for (let i = 0; i < buttonMeshes.length; i++) {\n      if (buttonMeshes[i].box.containsPoint(position)) {\n        return i;\n      }\n    }\n    return -1;\n  };\n\n  mesh.onBeforeRender2 = () => {\n    if (rig) {\n      rig.undecapitate();\n    }\n  };\n  mesh.onAfterRender2 = () => {\n    if (rig && session) {\n      rig.decapitate();\n    }\n  };\n\n  return mesh;\n})();\ncontainer.add(mirrorMesh);\n\nconst userHeight = 1.7;\nconst _getHeightFactor = rigHeight => rigHeight / userHeight;\n\nlet rig = null;\nlet modelUrl = '';\nlet heightFactor = 0;\nconst _setLocalModel = newModel => {\n  if (rig) {\n    container.remove(rig.model);\n    rig.destroy();\n    rig = null;\n  }\n\n  rig = new Avatar(newModel, {\n    fingers: true,\n    hair: true,\n    visemes: true,\n    // decapitate: true,\n    microphoneMediaStream,\n    debug: !newModel,\n  });\n  container.add(rig.model);\n  window.model = newModel;\n\n  heightFactor = _getHeightFactor(rig.height);\n\n  container.scale.set(1, 1, 1).divideScalar(heightFactor);\n};\n\nconst lastPresseds = [false, false];\nconst lastBs = [false, false];\nconst lastPads = [false, false];\nconst lastPositions = [new THREE.Vector3(), new THREE.Vector3()];\nconst startGripPositions = [new THREE.Vector3(), new THREE.Vector3()];\nconst startSceneMatrix = new THREE.Matrix4();\nlet startModelScale = 1;\nconst dateOffset = Math.floor(Math.random() * 60 * 1000);\nconst realDateNow = (now => () => dateOffset + now())(Date.now);\nlet lastTimestamp = Date.now();\nfunction animate(timestamp, frame, referenceSpace) {\n  const now = Date.now();\n  const timeDiff = now - lastTimestamp;\n\n  if (rig) {\n    if (renderer.vr.enabled) {\n      const vrCameras = renderer.vr.getCamera(camera).cameras;\n      const vrCamera = vrCameras[0];\n      const vrCamera2 = vrCameras[1];\n      vrCamera.matrixWorld.decompose(vrCamera.position, vrCamera.quaternion, vrCamera.scale);\n      vrCamera2.matrixWorld.decompose(vrCamera2.position, vrCamera2.quaternion, vrCamera2.scale);\n      vrCamera.position.add(vrCamera2.position).divideScalar(2);\n      const {inputSources} = session;\n      const gamepads = navigator.getGamepads();\n\n      rig.inputs.hmd.position.copy(vrCamera.position).sub(container.position).multiplyScalar(heightFactor);\n      rig.inputs.hmd.quaternion.copy(vrCamera.quaternion);\n\n      const _getGamepad = i => {\n        const handedness = i === 0 ? 'left' : 'right';\n        const inputSource = inputSources.find(inputSource => inputSource.handedness === handedness);\n        let pose, gamepad;\n        if (inputSource && (pose = frame.getPose(inputSource.gripSpace, referenceSpace)) && (gamepad = inputSource.gamepad || gamepads[i])) {\n          const {transform} = pose;\n          const {position, orientation, matrix} = transform;\n          if (position) { // new WebXR api\n            const rawP = localVector.copy(position);\n            const p = localVector2.copy(rawP).sub(container.position).multiplyScalar(heightFactor);\n            const q = localQuaternion.copy(orientation);\n            const pressed = gamepad.buttons[0].pressed;\n            const lastPressed = lastPresseds[i];\n            const pointer = gamepad.buttons[0].value;\n            const grip = gamepad.buttons[1].value;\n            const pad = gamepad.axes[1] <= -0.5 || gamepad.axes[3] <= -0.5;\n            const padX = gamepad.axes[0] !== 0 ? gamepad.axes[0] : gamepad.axes[2];\n            const padY = gamepad.axes[1] !== 0 ? gamepad.axes[1] : gamepad.axes[3];\n            const stick = !!gamepad.buttons[3] && gamepad.buttons[3].pressed;\n            const a = !!gamepad.buttons[4] && gamepad.buttons[4].pressed;\n            const b = !!gamepad.buttons[5] && gamepad.buttons[5].pressed;\n            const lastB = lastBs[i];\n            return {\n              rawPosition: rawP,\n              position: p,\n              quaternion: q,\n              pressed,\n              lastPressed,\n              pointer,\n              grip,\n              pad,\n              padX,\n              padY,\n              stick,\n              a,\n              b,\n              lastB,\n            };\n          } else if (matrix) { // old WebXR api\n            const rawP = localVector;\n            const p = localVector2;\n            const q = localQuaternion;\n            const s = localVector3;\n            localMatrix\n              .fromArray(transform.matrix)\n              .decompose(rawP, q, s);\n            p.copy(rawP).sub(container.position).multiplyScalar(heightFactor);\n            const pressed = gamepad.buttons[0].pressed;\n            const lastPressed = lastPresseds[i];\n            const pointer = gamepad.buttons[0].value;\n            const grip = gamepad.buttons[1].value;\n            const pad = gamepad.axes[1] <= -0.5 || gamepad.axes[3] <= -0.5;\n            const padX = gamepad.axes[0] !== 0 ? gamepad.axes[0] : gamepad.axes[2];\n            const padY = gamepad.axes[1] !== 0 ? gamepad.axes[1] : gamepad.axes[3];\n            const stick = !!gamepad.buttons[3] && gamepad.buttons[3].pressed;\n            const a = !!gamepad.buttons[4] && gamepad.buttons[4].pressed;\n            const b = !!gamepad.buttons[5] && gamepad.buttons[5].pressed;\n            const lastB = lastBs[i];\n            return {\n              rawPosition: rawP,\n              position: p,\n              quaternion: q,\n              pressed,\n              lastPressed,\n              pointer,\n              grip,\n              pad,\n              padX,\n              padY,\n              stick,\n              a,\n              b,\n              lastB,\n            };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      };\n      const _updateTeleportMesh = (i, pad, lastPad, position, quaternion, padX, padY, stick) => {\n        const teleportMesh = teleportMeshes[i];\n        teleportMesh.visible = false;\n\n        if (pad) {\n          localVector.copy(vrCamera.position).applyMatrix4(localMatrix.getInverse(container.matrix));\n          localEuler.setFromQuaternion(quaternion, 'YXZ');\n\n          for (let i = 0; i < 20; i++, localVector.add(localVector2), localEuler.x = Math.max(localEuler.x - Math.PI*0.07, -Math.PI/2)) {\n            localRay.set(localVector, localVector2.set(0, 0, -1).applyQuaternion(localQuaternion.setFromEuler(localEuler)));\n            const intersection = localRay.intersectPlane(floorPlane, localVector3);\n            if (intersection && intersection.distanceTo(localRay.origin) <= 1) {\n              teleportMesh.position.copy(intersection);\n              localEuler.setFromQuaternion(localQuaternion, 'YXZ');\n              localEuler.x = 0;\n              localEuler.z = 0;\n              teleportMesh.quaternion.setFromEuler(localEuler);\n              teleportMesh.visible = true;\n              break;\n            }\n          }\n        } else if (lastPad) {\n          localVector.copy(teleportMesh.position).applyMatrix4(container.matrix).sub(vrCamera.position);\n          localVector.y = 0;\n          container.position.sub(localVector);\n        }\n\n        if (padX !== 0 || padY !== 0) {\n          localVector.set(padX, 0, padY);\n          const moveLength = localVector.length();\n          if (moveLength > 1) {\n            localVector.divideScalar(moveLength);\n          }\n          const hmdEuler = localEuler.setFromQuaternion(rig.inputs.hmd.quaternion, 'YXZ');\n          localEuler.x = 0;\n          localEuler.z = 0;\n          container.position.sub(localVector.multiplyScalar(walkSpeed * timeDiff * (stick ? 3 : 1) * rig.height).applyEuler(hmdEuler));\n        }\n      };\n\n      const wasLastBd = lastBs[0] && lastBs[1];\n\n      const lg = _getGamepad(1);\n      let li = -1;\n      if (lg) {\n        const {rawPosition, position, quaternion, pressed, lastPressed, pointer, grip, pad, b} = lg;\n        rig.inputs.leftGamepad.quaternion.copy(quaternion);\n        rig.inputs.leftGamepad.position.copy(position);\n        rig.inputs.leftGamepad.pointer = pointer;\n        rig.inputs.leftGamepad.grip = grip;\n\n        li = mirrorMesh.getButtonIntersectionIndex(position);\n        if (pressed && !lastPressed) {\n          if (li !== -1) {\n            aAvatars[li].click();\n          }\n        }\n\n        _updateTeleportMesh(0, pad, lastPads[0], position, quaternion, 0, 0, false);\n\n        lastPresseds[0] = pressed;\n        lastPads[0] = pad;\n        lastBs[0] = b;\n        lastPositions[0].copy(rawPosition);\n      }\n      const rg = _getGamepad(0);\n      let ri = -1;\n      if (rg) {\n        const {rawPosition, position, quaternion, pressed, lastPressed, pointer, grip, pad, padX, padY, stick, b} = rg;\n        rig.inputs.rightGamepad.quaternion.copy(quaternion);\n        rig.inputs.rightGamepad.position.copy(position);\n        rig.inputs.rightGamepad.pointer = pointer;\n        rig.inputs.rightGamepad.grip = grip;\n\n        ri = mirrorMesh.getButtonIntersectionIndex(position);\n        if (pressed && !lastPressed) {\n          if (ri !== -1) {\n            aAvatars[ri].click();\n          }\n        }\n\n        _updateTeleportMesh(1, false, false, position, quaternion, padX, padY, stick);\n\n        lastPresseds[1] = pressed;\n        lastPads[1] = pad;\n        lastBs[1] = b;\n        lastPositions[1].copy(rawPosition);\n      }\n\n      const _startScale = () => {\n        for (let i = 0; i < startGripPositions.length; i++) {\n          startGripPositions[i].copy(lastPositions[i]);\n        }\n        startSceneMatrix.copy(container.matrix);\n        startModelScale = rig ? rig.inputs.hmd.scaleFactor : 1;\n      };\n      const _processScale = () => {\n        const startDistance = startGripPositions[0].distanceTo(startGripPositions[1]);\n        const currentDistance = lastPositions[0].distanceTo(lastPositions[1]);\n        const scaleFactor = currentDistance / startDistance;\n\n        let startGripPosition = localVector3.copy(startGripPositions[0]).add(startGripPositions[1]).divideScalar(2)\n        let currentGripPosition = localVector4.copy(lastPositions[0]).add(lastPositions[1]).divideScalar(2)\n        startGripPosition.applyMatrix4(localMatrix.getInverse(startSceneMatrix));\n        currentGripPosition.applyMatrix4(localMatrix/*.getInverse(startSceneMatrix)*/);\n\n        const positionDiff = localVector5.copy(currentGripPosition).sub(startGripPosition);\n\n        container.matrix.copy(startSceneMatrix)\n          .multiply(localMatrix.makeTranslation(currentGripPosition.x, currentGripPosition.y, currentGripPosition.z))\n          .multiply(localMatrix.makeScale(scaleFactor, scaleFactor, scaleFactor))\n          .multiply(localMatrix.makeTranslation(-currentGripPosition.x, -currentGripPosition.y, -currentGripPosition.z))\n          .multiply(localMatrix.makeTranslation(positionDiff.x, positionDiff.y, positionDiff.z))\n          .decompose(container.position, container.quaternion, container.scale);\n\n        if (rig) {\n          rig.inputs.hmd.scaleFactor = startModelScale / scaleFactor;\n        }\n\n        // _startScale();\n      };\n      const isLastBd = lastBs[0] && lastBs[1];\n      if (!wasLastBd && isLastBd) {\n        _startScale();\n      } else if (isLastBd) {\n        _processScale();\n      }\n\n      for (let i = 0; i < mirrorMesh.buttonMeshes.length; i++) {\n        mirrorMesh.buttonMeshes[i].material.color.setHex((i === li || i === ri) ? colors.highlight : colors.normal);\n      }\n\n      rig.update();\n    } else if (controlsBound) {\n      // defer\n    } else {\n      const positionOffset = Math.sin((realDateNow()%10000)/10000*Math.PI*2)*2;\n      const positionOffset2 = -Math.sin((realDateNow()%5000)/5000*Math.PI*2)*1;\n      const standFactor = rig.height - 0.1*rig.height + Math.sin((realDateNow()%2000)/2000*Math.PI*2)*0.2*rig.height;\n      const rotationAngle = (realDateNow()%5000)/5000*Math.PI*2;\n\n      // rig.inputs.hmd.position.set(positionOffset, 0.6 + standFactor, 0);\n      rig.inputs.hmd.position.set(positionOffset, standFactor, positionOffset2);\n      rig.inputs.hmd.quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), rotationAngle)\n        .multiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(1, 0, 0), Math.sin((realDateNow()%2000)/2000*Math.PI*2)*Math.PI*0.2))\n        .multiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 0, 1), Math.sin((realDateNow()%2000)/2000*Math.PI*2)*Math.PI*0.25));\n\n      rig.inputs.rightGamepad.quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), rotationAngle)\n        // .multiply(new THREE.Quaternion().setFromAxisAngle(new THREE.Vector3(0, 1, 0), Math.sin((realDateNow()%5000)/5000*Math.PI*2)*Math.PI*0.6));\n      rig.inputs.rightGamepad.position.set(positionOffset, rig.height*0.7 + Math.sin((realDateNow()%2000)/2000*Math.PI*2)*0.1, positionOffset2).add(\n        new THREE.Vector3(-rig.shoulderWidth/2, 0, -0.2).applyQuaternion(rig.inputs.rightGamepad.quaternion)\n      )/*.add(\n        new THREE.Vector3(-0.1, 0, -1).normalize().multiplyScalar(rig.rightArmLength*0.4).applyQuaternion(rig.inputs.rightGamepad.quaternion)\n      ); */\n      rig.inputs.leftGamepad.quaternion.setFromAxisAngle(new THREE.Vector3(0, 1, 0), rotationAngle);\n      rig.inputs.leftGamepad.position.set(positionOffset, rig.height*0.7, positionOffset2).add(\n        new THREE.Vector3(rig.shoulderWidth/2, 0, -0.2).applyQuaternion(rig.inputs.leftGamepad.quaternion)\n      )/*.add(\n        new THREE.Vector3(0.1, 0, -1).normalize().multiplyScalar(rig.leftArmLength*0.4).applyQuaternion(rig.inputs.leftGamepad.quaternion)\n      );*/\n\n      rig.inputs.leftGamepad.pointer = (Math.sin((Date.now()%10000)/10000*Math.PI*2) + 1) / 2;\n      rig.inputs.leftGamepad.grip = (Math.sin((Date.now()%10000)/10000*Math.PI*2) + 1) / 2;\n\n      rig.inputs.rightGamepad.pointer = (Math.sin((Date.now()%10000)/10000*Math.PI*2) + 1) / 2;\n      rig.inputs.rightGamepad.grip = (Math.sin((Date.now()%10000)/10000*Math.PI*2) + 1) / 2;\n\n      rig.update();\n    }\n  }\n\n  renderer.render(scene, camera);\n\n  for (let i = 0; i < peerConnections.length; i++) {\n    const peerConnection = peerConnections[i];\n    if (peerConnection.rig) {\n      peerConnection.rig.update();\n    }\n  }\n\n  if (controlsBound) {\n    localEuler.setFromQuaternion(rig.inputs.hmd.quaternion, 'YXZ');\n    localEuler.x = Math.min(Math.max(localEuler.x - mouse.movementY * 0.01, -Math.PI/2), Math.PI/2);\n    localEuler.y -= mouse.movementX * 0.01\n    localEuler.z = 0;\n    rig.inputs.hmd.quaternion.setFromEuler(localEuler);\n    mouse.movementX = 0;\n    mouse.movementY = 0;\n\n    localEuler.setFromQuaternion(rig.inputs.hmd.quaternion, 'YXZ');\n    localEuler.x = 0;\n    localEuler.z = 0;\n    const floorRotation = localQuaternion.setFromEuler(localEuler);\n\n    localVector.set(0, 0, 0);\n    if (keys.left) {\n      localVector.x += -1;\n    }\n    if (keys.right) {\n      localVector.x += 1;\n    }\n    if (keys.up) {\n      localVector.z += -1;\n    }\n    if (keys.down) {\n      localVector.z += 1;\n    }\n    rig.inputs.hmd.position.add(localVector.normalize().multiplyScalar(walkSpeed * timeDiff * (keys.shift ? 3 : 1) * rig.height).applyQuaternion(floorRotation));\n    if (keys.space) {\n      const lerpFactor = 0.3;\n      rig.inputs.hmd.position.y = rig.inputs.hmd.position.y * (1-lerpFactor) + rig.height*1.1 * lerpFactor;\n    } else if (keys.z) {\n      const lerpFactor = 0.05;\n      rig.inputs.hmd.position.y = rig.inputs.hmd.position.y * (1-lerpFactor) + rig.height*0.2 * lerpFactor;\n    } else if (keys.c) {\n      const lerpFactor = 0.2;\n      rig.inputs.hmd.position.y = rig.inputs.hmd.position.y * (1-lerpFactor) + rig.height*0.7 * lerpFactor;\n    } else {\n      const lerpFactor = 0.3;\n      rig.inputs.hmd.position.y = rig.inputs.hmd.position.y * (1-lerpFactor) + rig.height*0.9 * lerpFactor;\n    }\n\n    rig.inputs.leftGamepad.position.copy(rig.inputs.hmd.position)\n      .add(localVector.set(0.15, -0.15, -0.2).multiplyScalar(rig.height).applyQuaternion(rig.inputs.hmd.quaternion));\n    rig.inputs.leftGamepad.quaternion.copy(rig.inputs.hmd.quaternion)\n      .multiply(localQuaternion2.setFromAxisAngle(localVector.set(1, 0, 0), Math.PI*0.5));\n    rig.inputs.rightGamepad.position.copy(rig.inputs.hmd.position)\n      .add(localVector.set(-0.15, -0.15, -0.2).multiplyScalar(rig.height).applyQuaternion(rig.inputs.hmd.quaternion));\n    rig.inputs.rightGamepad.quaternion.copy(rig.inputs.hmd.quaternion)\n      .multiply(localQuaternion2.setFromAxisAngle(localVector.set(1, 0, 0), Math.PI*0.5))\n\n    if (controlsBound === 'firstperson') {\n      rig.decapitate();\n    } else if (controlsBound === 'thirdperson') {\n      rig.undecapitate();\n    }\n\n    rig.update();\n\n    if (controlsBound === 'firstperson') {\n      rig.outputs.eyes.matrixWorld.decompose(camera.position, camera.quaternion, localVector);\n      camera.position.divideScalar(heightFactor).add(container.position);\n      camera.quaternion.multiply(z180Quaternion);\n    } else if (controlsBound === 'thirdperson') {\n      rig.outputs.eyes.matrixWorld.decompose(camera.position, camera.quaternion, localVector);\n      camera.position.divideScalar(heightFactor).add(container.position);\n      camera.quaternion.multiply(z180Quaternion);\n      camera.position.add(localVector.set(0, 0.5, 2).applyQuaternion(camera.quaternion));\n    }\n  }\n\n  lastTimestamp = now;\n}\nrenderer.setAnimationLoop(animate);\n\nconst mouse = {\n  movementX: 0,\n  movementY: 0,\n};\nconst keys = {\n  up: false,\n  down: false,\n  left: false,\n  right: false,\n  z: false,\n  c: false,\n  space: false,\n  shift: false,\n};\nlet controlsBound = null;\nlet unbindControls = null;\nwindow.document.addEventListener('pointerlockchange', () => {\n  if (!window.document.pointerLockElement && unbindControls) {\n    unbindControls();\n    unbindControls = null;\n  }\n});\n\nconst _bindControls = type => {\n  const _keydown = e => {\n    switch (e.which) {\n      case 65: {\n        keys.left = true;\n        break;\n      }\n      case 68: {\n        keys.right = true;\n        break;\n      }\n      case 87: {\n        keys.up = true;\n        break;\n      }\n      case 83: {\n        keys.down = true;\n        break;\n      }\n      case 90: {\n        keys.z = true;\n        break;\n      }\n      case 67: {\n        keys.c = true;\n        break;\n      }\n      case 32: {\n        keys.space = true;\n        break;\n      }\n      case 16: {\n        keys.shift = true;\n        break;\n      }\n    }\n  };\n  window.addEventListener('keydown', _keydown);\n  const _keyup = e => {\n    switch (e.which) {\n      case 65: {\n        keys.left = false;\n        break;\n      }\n      case 68: {\n        keys.right = false;\n        break;\n      }\n      case 87: {\n        keys.up = false;\n        break;\n      }\n      case 83: {\n        keys.down = false;\n        break;\n      }\n      case 90: {\n        keys.z = false;\n        break;\n      }\n      case 67: {\n        keys.c = false;\n        break;\n      }\n      case 32: {\n        keys.space = false;\n        break;\n      }\n      case 16: {\n        keys.shift = false;\n        break;\n      }\n    }\n  };\n  window.addEventListener('keyup', _keyup);\n  const _mousemove = e => {\n    mouse.movementX += e.movementX;\n    mouse.movementY += e.movementY;\n  };\n  window.addEventListener('mousemove', _mousemove);\n  orbitControls.enabled = false;\n  controlsBound = type;\n\n  unbindControls = () => {\n    window.addEventListener('keydown', _keydown);\n    window.addEventListener('keyup', _keyup);\n    window.removeEventListener('mousemove', _mousemove);\n    orbitControls.target.copy(camera.position).add(new THREE.Vector3(0, 0, -3).applyQuaternion(camera.quaternion));\n    orbitControls.enabled = true;\n    controlsBound = null;\n  };\n};\nconst firstpersonButton = document.getElementById('firstperson-button');\nfirstpersonButton.addEventListener('click', async () => {\n  if (rig) {\n    await renderer.domElement.requestPointerLock();\n    _bindControls('firstperson');\n  }\n});\nconst thirdpersonButton = document.getElementById('thirdperson-button');\nthirdpersonButton.addEventListener('click', async () => {\n  if (rig) {\n    await renderer.domElement.requestPointerLock();\n    _bindControls('thirdperson');\n  }\n});\n\nlet session = null;\nconst enterXrButton = document.getElementById('enter-xr-button');\nconst noXrButton = document.getElementById('no-xr-button');\nenterXrButton.addEventListener('click', async () => {\n  session = await navigator.xr.requestSession('immersive-vr', {\n    requiredFeatures: ['local-floor'],\n  });\n  let referenceSpace;\n  let referenceSpaceType = '';\n  const _loadReferenceSpace = async () => {\n    const lastReferenceSpaceType = referenceSpaceType;\n    try {\n      referenceSpace = await session.requestReferenceSpace('local-floor');\n      referenceSpaceType = 'local-floor';\n    } catch (err) {\n      referenceSpace = await session.requestReferenceSpace('local');\n      referenceSpaceType = 'local';\n    }\n\n    if (referenceSpaceType !== lastReferenceSpaceType) {\n      console.log(`referenceSpace changed to ${referenceSpaceType}`);\n    }\n  };\n  await _loadReferenceSpace();\n  const loadReferenceSpaceInterval = setInterval(_loadReferenceSpace, 1000);\n\n  renderer.vr.setSession(session);\n\n  session.requestAnimationFrame((timestamp, frame) => {\n    const pose = frame.getViewerPose(referenceSpace);\n    const viewport = session.renderState.baseLayer.getViewport(pose.views[0]);\n    // const width = viewport.width;\n    const height = viewport.height;\n    const fullWidth = (() => {\n      let result = 0;\n      for (let i = 0; i < pose.views.length; i++) {\n        result += session.renderState.baseLayer.getViewport(pose.views[i]).width;\n      }\n      return result;\n    })();\n    renderer.setSize(fullWidth, height);\n    renderer.setPixelRatio(1);\n\n    renderer.setAnimationLoop(null);\n\n    renderer.vr.enabled = true;\n    renderer.vr.setSession(session);\n    renderer.vr.setAnimationLoop(animate);\n\n    console.log('loaded root in XR');\n  });\n});\n\nlet microphoneMediaStream = null;\nconst enableMicButton = document.getElementById('enable-mic-button');\nconst disableMicButton = document.getElementById('disable-mic-button');\nenableMicButton.addEventListener('click', async () => {\n  try {\n    microphoneMediaStream  = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n\n    rig.setMicrophoneMediaStream(microphoneMediaStream);\n    if (channelConnection) {\n      channelConnection.setMicrophoneMediaStream(microphoneMediaStream);\n    }\n\n    disableMicButton.style.display = null;\n    enableMicButton.style.display = 'none';\n  } catch (err) {\n    console.warn(err);\n  }\n});\ndisableMicButton.addEventListener('click', async () => {\n  rig.setMicrophoneMediaStream(null);\n  if (channelConnection) {\n    channelConnection.setMicrophoneMediaStream(null);\n  }\n  microphoneMediaStream.getAudioTracks().forEach(track => {\n    track.stop();\n  });\n\n  microphoneMediaStream = null;\n  enableMicButton.style.display = null;\n  disableMicButton.style.display = 'none';\n\n  /* try {\n    await navigator.permissions.revoke({\n      name: 'microphone',\n    });\n  } catch(err) {\n    console.warn(err);\n  } */\n});\n\nlet channelConnection = null;\nconst peerConnections = [];\nconst _sendAllPeerConnections = s => {\n  for (let i = 0; i < peerConnections.length; i++) {\n    peerConnections[i].send(s);\n  }\n};\nconst channelInput = document.getElementById('channel-input');\nconst connectButton = document.getElementById('connect-button');\nconnectButton.addEventListener('click', () => {\n  const channelInputValue = channelInput.value;\n  const match = channelInputValue.match(/^(.+?)\\/(.+?)$/);\n  if (match) {\n    const userName = match[1];\n    const channelName = match[2];\n\n    console.log(`connecting to ${userName}/${channelName}`);\n\n    channelConnection = new XRChannelConnection(`wss://presence.exokit.org/?u=${encodeURIComponent(userName)}&c=${encodeURIComponent(channelName)}`, {\n      microphoneMediaStream,\n    });\n    channelConnection.addEventListener('open', () => {\n      console.log('xr channel open');\n    });\n    channelConnection.addEventListener('error', err => {\n      console.warn('xr channel error', err);\n    });\n    channelConnection.addEventListener('peerconnection', e => {\n      const peerConnection = e.detail;\n\n      peerConnection.rig = null;\n      peerConnection.mediaStream = null;\n      let updateInterval = 0;\n      peerConnection.addEventListener('open', () => {\n        console.log('add peer connection', peerConnection);\n\n        peerConnections.push(peerConnection);\n\n        peerConnection.send(JSON.stringify({\n          method: 'model',\n          url: modelUrl,\n        }));\n\n        updateInterval = setInterval(() => {\n          if (rig) {\n            const hmd = {\n              position: localVector.copy(rig.inputs.hmd.position).divideScalar(heightFactor).toArray(),\n              quaternion: rig.inputs.hmd.quaternion.toArray(),\n              scaleFactor: rig.inputs.hmd.scaleFactor,\n            };\n            const gamepads = [\n              {\n                position: localVector.copy(rig.inputs.leftGamepad.position).divideScalar(heightFactor).toArray(),\n                quaternion: rig.inputs.leftGamepad.quaternion.toArray(),\n                pointer: rig.inputs.leftGamepad.pointer,\n                grip: rig.inputs.leftGamepad.grip,\n                visible: true,\n              },\n              {\n                position: localVector.copy(rig.inputs.rightGamepad.position).divideScalar(heightFactor).toArray(),\n                quaternion: rig.inputs.rightGamepad.quaternion.toArray(),\n                pointer: rig.inputs.rightGamepad.pointer,\n                grip: rig.inputs.rightGamepad.grip,\n                visible: true,\n              },\n            ];\n            peerConnection.update(hmd, gamepads);\n          }\n        }, peerPoseUpdateRate);\n      });\n      peerConnection.addEventListener('close', () => {\n        console.log('remove peer connection', peerConnection);\n\n        const index = peerConnections.indexOf(peerConnection);\n        if (index !== -1) {\n          peerConnections.splice(index, 1);\n        }\n\n        clearInterval(updateInterval);\n\n        if (peerConnection.rig) {\n          container.remove(peerConnection.rig.model);\n          peerConnection.rig.destroy();\n        }\n      });\n      peerConnection.addEventListener('pose', e => {\n        const {rig} = peerConnection;\n        if (rig) {\n          const {detail: data} = e;\n          const {hmd, gamepads} = data;\n\n          rig.starts.hmd.position.copy(peerConnection.rig.inputs.hmd.position);\n          rig.starts.hmd.rotation.copy(peerConnection.rig.inputs.hmd.quaternion);\n          rig.starts.hmd.scaleFactor = peerConnection.rig.inputs.hmd.scaleFactor;\n          rig.starts.gamepads[0].position.copy(peerConnection.rig.inputs.leftGamepad.position);\n          rig.starts.gamepads[0].rotation.copy(peerConnection.rig.inputs.leftGamepad.quaternion);\n          rig.starts.gamepads[0].pointer = peerConnection.rig.inputs.leftGamepad.pointer;\n          rig.starts.gamepads[0].grip = peerConnection.rig.inputs.leftGamepad.grip;\n          rig.starts.gamepads[1].position.copy(peerConnection.rig.inputs.rightGamepad.position);\n          rig.starts.gamepads[1].rotation.copy(peerConnection.rig.inputs.rightGamepad.quaternion);\n          rig.starts.gamepads[1].pointer = peerConnection.rig.inputs.rightGamepad.pointer;\n          rig.starts.gamepads[1].grip = peerConnection.rig.inputs.rightGamepad.grip;\n\n          rig.targets.hmd.position.fromArray(hmd.position);\n          rig.targets.hmd.rotation.fromArray(hmd.quaternion);\n          rig.targets.hmd.scaleFactor = hmd.scaleFactor;\n          rig.targets.gamepads[0].position.fromArray(gamepads[0].position);\n          rig.targets.gamepads[0].rotation.fromArray(gamepads[0].quaternion);\n          rig.targets.gamepads[0].pointer = gamepads[0].pointer;\n          rig.targets.gamepads[0].grip = gamepads[0].grip;\n          rig.targets.gamepads[1].position.fromArray(gamepads[1].position);\n          rig.targets.gamepads[1].rotation.fromArray(gamepads[1].quaternion);\n          rig.targets.gamepads[1].pointer = gamepads[1].pointer;\n          rig.targets.gamepads[1].grip = gamepads[1].grip;\n          rig.targets.timestamp = Date.now();\n        }\n      });\n      peerConnection.addEventListener('mediastream', e => {\n        console.log('got media stream', e.detail, e.detail.getAudioTracks());\n        peerConnection.mediaStream = e.detail;\n        if (peerConnection.rig) {\n          peerConnection.rig.setMicrophoneMediaStream(peerConnection.mediaStream, {\n            muted: false,\n          });\n        }\n      });\n      peerConnection.addEventListener('message', async e => {\n        console.log('got message', e);\n        const data = JSON.parse(e.data);\n        const {method} = data;\n        if (method === 'model') {\n          const {url} = data;\n          console.log('got peer model', {url});\n\n          if (peerConnection.rig) {\n            container.remove(peerConnection.rig.model);\n            peerConnection.rig.destroy();\n          }\n\n          const model = url ? await _loadModelUrl(url) : null;\n          peerConnection.rig = new Avatar(model, {\n            fingers: true,\n            hair: true,\n            visemes: true,\n            microphoneMediaStream: peerConnection.mediaStream,\n            muted: false,\n            debug: !model,\n          });\n          container.add(peerConnection.rig.model);\n\n          peerConnection.rig.starts = {\n            hmd: {\n              position: peerConnection.rig.inputs.hmd.position.clone(),\n              rotation: peerConnection.rig.inputs.hmd.quaternion.clone(),\n              scaleFactor: peerConnection.rig.inputs.hmd.scaleFactor,\n            },\n            gamepads: [\n              {\n                position: peerConnection.rig.inputs.leftGamepad.position.clone(),\n                rotation:  peerConnection.rig.inputs.leftGamepad.quaternion.clone(),\n                pointer: peerConnection.rig.inputs.leftGamepad.pointer,\n                grip: peerConnection.rig.inputs.leftGamepad.grip,\n              },\n              {\n                position: peerConnection.rig.inputs.rightGamepad.position.clone(),\n                rotation: peerConnection.rig.inputs.rightGamepad.quaternion.clone(),\n                pointer: peerConnection.rig.inputs.rightGamepad.pointer,\n                grip: peerConnection.rig.inputs.rightGamepad.grip,\n              },\n            ],\n          };\n          peerConnection.rig.targets = {\n            hmd: {\n              position: new THREE.Vector3(),\n              rotation: new THREE.Quaternion(),\n              scaleFactor: 1,\n            },\n            gamepads: [\n              {\n                position: new THREE.Vector3(),\n                rotation: new THREE.Quaternion(),\n                pointer: 0,\n                grip: 0,\n              },\n              {\n                position: new THREE.Vector3(),\n                rotation: new THREE.Quaternion(),\n                pointer: 0,\n                grip: 0,\n              },\n            ],\n            timestamp: Date.now(),\n          };\n          const heightFactor = _getHeightFactor(peerConnection.rig.height);\n          peerConnection.rig.update = (_update => function update() {\n            const now = Date.now();\n            const {timestamp} = peerConnection.rig.targets;\n            const lerpFactor = Math.min(Math.max((now - timestamp) / (peerPoseUpdateRate*2), 0), 1);\n\n            peerConnection.rig.inputs.hmd.quaternion.copy(peerConnection.rig.starts.hmd.rotation).slerp(peerConnection.rig.targets.hmd.rotation, lerpFactor);\n            peerConnection.rig.inputs.hmd.position.copy(peerConnection.rig.starts.hmd.position).lerp(\n              localVector.copy(peerConnection.rig.targets.hmd.position).multiplyScalar(heightFactor),\n              lerpFactor\n            );\n            peerConnection.rig.inputs.hmd.scaleFactor = peerConnection.rig.starts.hmd.scaleFactor * (1-lerpFactor) + peerConnection.rig.targets.hmd.scaleFactor * lerpFactor;\n\n            peerConnection.rig.inputs.leftGamepad.position.copy(peerConnection.rig.starts.gamepads[0].position).lerp(\n              localVector.copy(peerConnection.rig.targets.gamepads[0].position).multiplyScalar(heightFactor),\n              lerpFactor\n            );\n            peerConnection.rig.inputs.leftGamepad.quaternion.copy(peerConnection.rig.starts.gamepads[0].rotation).slerp(peerConnection.rig.targets.gamepads[0].rotation, lerpFactor);\n            peerConnection.rig.inputs.leftGamepad.pointer = peerConnection.rig.starts.gamepads[0].pointer * (1-lerpFactor) + peerConnection.rig.targets.gamepads[0].pointer * lerpFactor;\n            peerConnection.rig.inputs.leftGamepad.grip = peerConnection.rig.starts.gamepads[0].grip * (1-lerpFactor) + peerConnection.rig.targets.gamepads[0].grip * lerpFactor;\n\n            peerConnection.rig.inputs.rightGamepad.position.copy(peerConnection.rig.starts.gamepads[1].position).lerp(\n              localVector.copy(peerConnection.rig.targets.gamepads[1].position).multiplyScalar(heightFactor),\n              lerpFactor\n            );\n            peerConnection.rig.inputs.rightGamepad.quaternion.copy(peerConnection.rig.starts.gamepads[1].rotation).slerp(peerConnection.rig.targets.gamepads[1].rotation, lerpFactor);\n            peerConnection.rig.inputs.rightGamepad.pointer = peerConnection.rig.starts.gamepads[1].pointer * (1-lerpFactor) + peerConnection.rig.targets.gamepads[1].pointer * lerpFactor;\n            peerConnection.rig.inputs.rightGamepad.grip = peerConnection.rig.starts.gamepads[1].grip * (1-lerpFactor) + peerConnection.rig.targets.gamepads[1].grip * lerpFactor;\n\n            _update.apply(this, arguments);\n          })(peerConnection.rig.update);\n        } else {\n          console.warn('invalid method', {method});\n        }\n      });\n    });\n\n    connectButton.style.display = 'none';\n  } else {\n    console.warn(`invalid user/channel: ${channelInputValue}`);\n  }\n});\n\n(async () => {\n  let result;\n  if (navigator.xr) {\n    try {\n      await navigator.xr.supportsSession('immersive-vr');\n      result = true;\n    } catch (err) {\n      console.warn(err);\n      result = false;\n    }\n  } else {\n    result = false;\n  }\n  if (result) {\n    console.log('xr available');\n    enterXrButton.style.display = null;\n  } else {\n    console.log('no xr');\n    noXrButton.style.display = null;\n  }\n\n  /* const microphonePermission = await navigator.permissions.query({\n    name: 'microphone',\n  });\n  if (microphonePermission.state === 'granted') {\n    microphoneMediaStream  = await navigator.mediaDevices.getUserMedia({\n      audio: true,\n    });\n    disableMicButton.style.display = null;\n  } else {\n    enableMicButton.style.display = null;\n  } */\n  enableMicButton.style.display = null;\n\n  const {href} = aAvatars[1];\n  const model = await _loadModelUrl(href);\n  _setLocalModel(model);\n  modelUrl = href;\n  _sendAllPeerConnections(JSON.stringify({\n    method: 'model',\n    url: modelUrl,\n  }));\n})();\n\nlet loginToken = null;\nconst loginUrl = 'https://login.exokit.org/';\nasync function doLogin(email, code) {\n  const res = await fetch(`${loginUrl}?email=${encodeURIComponent(email)}&code=${encodeURIComponent(code)}`, {\n    method: 'POST',\n  });\n  if (res.status >= 200 && res.status < 300) {\n    const newLoginToken = await res.json();\n\n    await storage.set('loginToken', newLoginToken);\n\n    loginToken = newLoginToken;\n\n    // loginNameStatic.innerText = loginToken.name;\n    // loginEmailStatic.innerText = loginToken.email;\n\n    document.body.classList.add('logged-in');\n    loginForm.classList.remove('phase-1');\n    loginForm.classList.remove('phase-2');\n    loginForm.classList.add('phase-3');\n\n    return true;\n  } else {\n    return false;\n  }\n}\nconst storage = {\n  async get(k) {\n    const s = localStorage.getItem(k);\n    if (typeof s === 'string') {\n      return JSON.parse(s);\n    } else {\n      return undefined;\n    }\n  },\n  async set(k, v) {\n    localStorage.setItem(k, JSON.stringify(v));\n  },\n  async remove(k) {\n    localStorage.removeItem(k);\n  },\n};\n\n// const loginButton = document.getElementById('login-button');\n// const loginButton2 = document.getElementById('login-button-2');\n// const loginPopdown = document.getElementById('login-popdown');\nconst loginForm = document.getElementById('login-form');\nconst loginEmail = document.getElementById('login-email');\nconst loginNameStatic = document.getElementById('login-name-static');\nconst loginEmailStatic = document.getElementById('login-email-static');\nconst statusNotConnected = document.getElementById('status-not-connected');\nconst statusConnected = document.getElementById('status-connected');\nconst loginVerificationCode = document.getElementById('login-verification-code');\nconst loginNotice = document.getElementById('login-notice');\nconst loginError = document.getElementById('login-error');\nconst logoutButton = document.getElementById('logout-button');\nloginForm.onsubmit = async e => {\n  e.preventDefault();\n\n  if (loginForm.classList.contains('phase-1') && loginEmail.value) {\n    loginNotice.innerHTML = '';\n    loginError.innerHTML = '';\n    loginForm.classList.remove('phase-1');\n\n    const res = await fetch(`${loginUrl}?email=${encodeURIComponent(loginEmail.value)}`, {\n      method: 'POST',\n    })\n    if (res.status >= 200 && res.status < 300) {\n      loginNotice.innerText = `Code sent to ${loginEmail.value}!`;\n      loginForm.classList.add('phase-2');\n\n      return res.blob();\n    } else if (res.status === 403) {\n      loginError.innerText = `${loginEmail.value} is not in the beta yet :(`;\n\n      loginForm.classList.add('phase-1');\n    } else {\n      throw new Error(`invalid status code: ${res.status}`);\n    }\n  } else if (loginForm.classList.contains('phase-2') && loginEmail.value && loginVerificationCode.value) {\n    loginNotice.innerHTML = '';\n    loginError.innerHTML = '';\n    loginForm.classList.remove('phase-2');\n\n    await doLogin(loginEmail.value, loginVerificationCode.value);\n  } else if (loginForm.classList.contains('phase-3')) {\n    await storage.remove('loginToken');\n\n    window.location.reload();\n\n    /* loginToken = null;\n    xrEngine.postMessage({\n      method: 'login',\n      loginToken,\n    });\n\n    loginNotice.innerHTML = '';\n    loginError.innerHTML = '';\n    document.body.classList.remove('logged-in');\n    loginForm.classList.remove('phase-3');\n    loginForm.classList.add('phase-1'); */\n  }\n};\n\nconst exportModelButton = document.getElementById('export-model-button');\nexportModelButton.addEventListener('click', async () => {\n  const ab = await model.export();\n  const b = new Blob([ab], {type: 'model/gltf-binary'});\n  const u = URL.createObjectURL(b);\n\n  const a = document.createElement('a');\n  a.download = 'model.glb';\n  a.href = u;\n  a.style.display = 'none';\n  document.body.appendChild(a);\n  a.click();\n\n  document.body.removeChild(a);\n  URL.revokeObjectURL(u);\n});\n\nconst scaleDownButton = document.getElementById('scale-down-button');\nscaleDownButton.addEventListener('click', () => {\n  const scaleFactor = 1.25;\n\n  const orbitControlsTarget = localVector.copy(orbitControls.target);\n  container.matrix\n    .multiply(localMatrix.makeTranslation(orbitControlsTarget.x, orbitControlsTarget.y, orbitControlsTarget.z))\n    .multiply(localMatrix.makeScale(scaleFactor, scaleFactor, scaleFactor))\n    .multiply(localMatrix.makeTranslation(-orbitControlsTarget.x, -orbitControlsTarget.y, -orbitControlsTarget.z))\n    .decompose(container.position, container.quaternion, container.scale);\n\n  if (rig) {\n    rig.inputs.hmd.scaleFactor /= scaleFactor;\n  }\n});\nconst scaleUpButton = document.getElementById('scale-up-button');\nscaleUpButton.addEventListener('click', () => {\n  const scaleFactor = 1/1.25;\n\n  const orbitControlsTarget = localVector.copy(orbitControls.target);\n  container.matrix\n    .multiply(localMatrix.makeTranslation(orbitControlsTarget.x, orbitControlsTarget.y, orbitControlsTarget.z))\n    .multiply(localMatrix.makeScale(scaleFactor, scaleFactor, scaleFactor))\n    .multiply(localMatrix.makeTranslation(-orbitControlsTarget.x, -orbitControlsTarget.y, -orbitControlsTarget.z))\n    .decompose(container.position, container.quaternion, container.scale);\n\n  if (rig) {\n    rig.inputs.hmd.scaleFactor /= scaleFactor;\n  }\n});\n\n(async () => {\n  const localLoginToken = await storage.get('loginToken');\n  if (localLoginToken) {\n    const res = await fetch(`${loginUrl}?email=${encodeURIComponent(localLoginToken.email)}&token=${encodeURIComponent(localLoginToken.token)}`, {\n      method: 'POST',\n    })\n    if (res.status >= 200 && res.status < 300) {\n      loginToken = await res.json();\n\n      await storage.set('loginToken', loginToken);\n\n      // loginNameStatic.innerText = loginToken.name;\n      // loginEmailStatic.innerText = loginToken.email;\n\n      document.body.classList.add('logged-in');\n      loginForm.classList.remove('phase-1');\n      loginForm.classList.remove('phase-2');\n      loginForm.classList.add('phase-3');\n    } else {\n      await storage.remove('loginToken');\n\n      console.warn(`invalid status code: ${res.status}`);\n    }\n  }\n})();\n\nwindow.addEventListener('resize', e => {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n});\n\nreturn null;\n}\nexport default AvatarsApp;"]},"metadata":{},"sourceType":"module"}