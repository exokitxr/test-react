{"ast":null,"code":"/* eslint-disable */\n\n/**\n * @author mvilledieu / http://github.com/mvilledieu\n */\nif (/(Helio)/g.test(navigator.userAgent) && \"xr\" in navigator) {\n  console.log(\"Helio WebXR Polyfill (Lumin 0.97.0)\");\n  const isHelio96 = navigator.userAgent.includes(\"Chrome/73\"); // WebXRManager - XR.supportSession() Polyfill - WebVR.js line 147\n\n  if (\"supportsSession\" in navigator.xr === false && \"supportsSessionMode\" in navigator.xr) {\n    navigator.xr.supportsSession = function (sessionType) {\n      // Force using immersive-ar\n      return navigator.xr.supportsSessionMode('immersive-ar');\n    };\n  }\n\n  if (\"requestSession\" in navigator.xr) {\n    const tempRequestSession = navigator.xr.requestSession.bind(navigator.xr);\n\n    navigator.xr.requestSession = function (sessionType) {\n      return new Promise(function (resolve, reject) {\n        const sessionType = isHelio96 ? {\n          mode: 'immersive-ar' // Force using immersive-ar\n\n        } : 'immersive-ar';\n        tempRequestSession(sessionType).then(function (session) {\n          // WebXRManager - xrFrame.getPose() Polyfill - line 279\n          const tempRequestAnimationFrame = session.requestAnimationFrame.bind(session);\n\n          session.requestAnimationFrame = function (callback) {\n            return tempRequestAnimationFrame(function (time, frame) {\n              // WebXRManager - xrFrame.getViewerPose() Polyfill - line 279\n              // Transforms view.viewMatrix to view.transform.inverse.matrix\n              const tempGetViewerPose = frame.getViewerPose.bind(frame);\n\n              frame.getViewerPose = function (referenceSpace) {\n                const pose = tempGetViewerPose(referenceSpace);\n                pose.views.forEach(function (view) {\n                  view.transform = {\n                    inverse: {\n                      matrix: view.viewMatrix\n                    }\n                  };\n                });\n                return pose;\n              }; // WebXRManager - xrFrame.getPose() Polyfill - line 259\n\n\n              const tempGetPose = isHelio96 ? null : frame.getPose.bind(frame);\n\n              frame.getPose = function (targetRaySpace, referenceSpace) {\n                if (isHelio96) {\n                  const inputPose = frame.getInputPose(targetRaySpace, referenceSpace);\n                  inputPose.transform = {\n                    matrix: inputPose.targetRay.transformMatrix\n                  };\n                  return inputPose;\n                } else {\n                  return tempGetPose(targetRaySpace.gripSpace, referenceSpace);\n                }\n              };\n\n              callback(time, frame);\n            });\n          }; // WebXRManager - xrFrame.getPose( inputSource.targetRaySpace, referenceSpace) Polyfill - line 279\n\n\n          const tempGetInputSources = session.getInputSources.bind(session);\n\n          session.getInputSources = function () {\n            const res = tempGetInputSources();\n            res.forEach(function (xrInputSource) {\n              if (!('targetRaySpace' in xrInputSource)) {\n                Object.defineProperty(xrInputSource, \"targetRaySpace\", {\n                  get: function () {\n                    return xrInputSource;\n                  }\n                });\n              }\n            });\n            return res;\n          }; // WebXRManager - xrSession.getInputSources() Polyfill Line 132 - 136\n\n          /* session.inputSources = */\n\n\n          Object.defineProperty(session, \"inputSources\", {\n            get: session.getInputSources\n          }); // WebXRManager - xrSession.updateRenderState() Polyfill Line 129\n\n          if (isHelio96) {\n            session.updateRenderState = function ({\n              baseLayer\n            }) {\n              session.baseLayer = baseLayer; // WebXRManager - xrSession.renderState.baseLayer Polyfill Line 219\n\n              session.renderState = {\n                baseLayer: baseLayer\n              };\n            };\n          } // WebXRManager - xrSession.requestReferenceSpace() Polyfill Line 130\n\n\n          const tempRequestReferenceSpace = session.requestReferenceSpace.bind(session);\n\n          session.requestReferenceSpace = function () {\n            return tempRequestReferenceSpace({\n              type: \"stationary\",\n              subtype: \"floor-level\"\n            });\n          };\n\n          resolve(session);\n        }).catch(function (error) {\n          return reject(error);\n        });\n      });\n    };\n  }\n}","map":{"version":3,"sources":["/Users/chris/Documents/Github/test-react/src/WebXRApps/Avatars/HelioWebXRPolyfill.js"],"names":["test","navigator","userAgent","console","log","isHelio96","includes","xr","supportsSession","sessionType","supportsSessionMode","tempRequestSession","requestSession","bind","Promise","resolve","reject","mode","then","session","tempRequestAnimationFrame","requestAnimationFrame","callback","time","frame","tempGetViewerPose","getViewerPose","referenceSpace","pose","views","forEach","view","transform","inverse","matrix","viewMatrix","tempGetPose","getPose","targetRaySpace","inputPose","getInputPose","targetRay","transformMatrix","gripSpace","tempGetInputSources","getInputSources","res","xrInputSource","Object","defineProperty","get","updateRenderState","baseLayer","renderState","tempRequestReferenceSpace","requestReferenceSpace","type","subtype","catch","error"],"mappings":"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","sourcesContent":["/* eslint-disable */\n\n/**\n * @author mvilledieu / http://github.com/mvilledieu\n */\n\nif ( /(Helio)/g.test( navigator.userAgent ) && \"xr\" in navigator ) {\n\n\tconsole.log( \"Helio WebXR Polyfill (Lumin 0.97.0)\" );\n\n\tconst isHelio96 = navigator.userAgent.includes(\"Chrome/73\");\n\n\t// WebXRManager - XR.supportSession() Polyfill - WebVR.js line 147\n\n\tif (\n\t\t\"supportsSession\" in navigator.xr === false &&\n    \"supportsSessionMode\" in navigator.xr\n\t) {\n\n\t\tnavigator.xr.supportsSession = function ( sessionType ) {\n\n\t\t\t// Force using immersive-ar\n\t\t\treturn navigator.xr.supportsSessionMode( 'immersive-ar' );\n\n\t\t};\n\n\t}\n\n\tif ( \"requestSession\" in navigator.xr ) {\n\n\t\tconst tempRequestSession = navigator.xr.requestSession.bind( navigator.xr );\n\n\t\tnavigator.xr.requestSession = function ( sessionType ) {\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tconst sessionType = (isHelio96 ? {\n\t\t\t\t\tmode: 'immersive-ar' // Force using immersive-ar\n\t\t\t\t} : 'immersive-ar');\n\n\t\t\t\ttempRequestSession( sessionType )\n\t\t\t\t\t.then( function ( session ) {\n\n\t\t\t\t\t\t// WebXRManager - xrFrame.getPose() Polyfill - line 279\n\n\t\t\t\t\t\tconst tempRequestAnimationFrame = session.requestAnimationFrame.bind(\n\t\t\t\t\t\t\tsession\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsession.requestAnimationFrame = function ( callback ) {\n\n\t\t\t\t\t\t\treturn tempRequestAnimationFrame( function ( time, frame ) {\n\n\t\t\t\t\t\t\t\t// WebXRManager - xrFrame.getViewerPose() Polyfill - line 279\n\t\t\t\t\t\t\t\t// Transforms view.viewMatrix to view.transform.inverse.matrix\n\n\t\t\t\t\t\t\t\tconst tempGetViewerPose = frame.getViewerPose.bind( frame );\n\n\t\t\t\t\t\t\t\tframe.getViewerPose = function ( referenceSpace ) {\n\n\t\t\t\t\t\t\t\t\tconst pose = tempGetViewerPose( referenceSpace );\n\n\t\t\t\t\t\t\t\t\tpose.views.forEach( function ( view ) {\n\n\t\t\t\t\t\t\t\t\t\tview.transform = {\n\t\t\t\t\t\t\t\t\t\t\tinverse: {\n\t\t\t\t\t\t\t\t\t\t\t\tmatrix: view.viewMatrix\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\treturn pose;\n\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// WebXRManager - xrFrame.getPose() Polyfill - line 259\n\n\t\t\t\t\t\t\t\tconst tempGetPose = (isHelio96 ? null : frame.getPose.bind( frame ));\n\n\t\t\t\t\t\t\t\tframe.getPose = function ( targetRaySpace, referenceSpace ) {\n\n\t\t\t\t\t\t\t\t\tif (isHelio96) {\n\n\t\t\t\t\t\t\t\t\t\tconst inputPose = frame.getInputPose(\n\t\t\t\t\t\t\t\t\t\t\ttargetRaySpace,\n\t\t\t\t\t\t\t\t\t\t\treferenceSpace\n\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\tinputPose.transform = {\n\t\t\t\t\t\t\t\t\t\t\tmatrix: inputPose.targetRay.transformMatrix\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\treturn inputPose;\n\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\treturn tempGetPose(targetRaySpace.gripSpace, referenceSpace);\n\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\tcallback( time, frame );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// WebXRManager - xrFrame.getPose( inputSource.targetRaySpace, referenceSpace) Polyfill - line 279\n\n\t\t\t\t\t\tconst tempGetInputSources = session.getInputSources.bind( session );\n\n\t\t\t\t\t\tsession.getInputSources = function () {\n\n\t\t\t\t\t\t\tconst res = tempGetInputSources();\n\n\t\t\t\t\t\t\tres.forEach( function (xrInputSource ) {\n\n                if (!('targetRaySpace' in xrInputSource)) {\n                  Object.defineProperty( xrInputSource, \"targetRaySpace\", {\n                    get: function () {\n\n                      return xrInputSource;\n\n                    }\n                  } );\n                }\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\treturn res;\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// WebXRManager - xrSession.getInputSources() Polyfill Line 132 - 136\n\n\t\t\t\t\t\t/* session.inputSources = */Object.defineProperty(\n\t\t\t\t\t\t\tsession,\n\t\t\t\t\t\t\t\"inputSources\",\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tget: session.getInputSources\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// WebXRManager - xrSession.updateRenderState() Polyfill Line 129\n\n\t\t\t\t\t\tif (isHelio96) {\n\n\t\t\t\t\t\t\tsession.updateRenderState = function ( { baseLayer } ) {\n\n\t\t\t\t\t\t\t\tsession.baseLayer = baseLayer;\n\n\t\t\t\t\t\t\t\t// WebXRManager - xrSession.renderState.baseLayer Polyfill Line 219\n\n\t\t\t\t\t\t\t\tsession.renderState = {\n\t\t\t\t\t\t\t\t\tbaseLayer: baseLayer\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// WebXRManager - xrSession.requestReferenceSpace() Polyfill Line 130\n\n\t\t\t\t\t\tconst tempRequestReferenceSpace = session.requestReferenceSpace.bind(\n\t\t\t\t\t\t\tsession\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tsession.requestReferenceSpace = function () {\n\n\t\t\t\t\t\t\treturn tempRequestReferenceSpace( {\n\t\t\t\t\t\t\t\ttype: \"stationary\",\n\t\t\t\t\t\t\t\tsubtype: \"floor-level\"\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tresolve( session );\n\n\t\t\t\t\t} )\n\t\t\t\t\t.catch( function ( error ) {\n\n\t\t\t\t\t\treturn reject( error );\n\n\t\t\t\t\t} );\n\n\t\t\t} );\n\n\t\t};\n\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}